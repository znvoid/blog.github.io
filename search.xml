<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/uncategorized/JavaWeb-Servlet/"/>
      <url>/uncategorized/JavaWeb-Servlet/</url>
      <content type="html"><![CDATA[<p>#Servlet </p><h2 id="主要点"><a href="#主要点" class="headerlink" title="主要点"></a>主要点</h2><ol><li><code>servlet的生命周期</code></li><li>url-pattern的配置</li><li>路径问题</li><li>ServletContext对象</li></ol><h2 id="Servlet-实现类"><a href="#Servlet-实现类" class="headerlink" title="Servlet 实现类"></a>Servlet 实现类</h2><blockquote><p>Servlet :接口</p><blockquote><p>GenericServlet :通用的Servlet</p><blockquote><p>HttpServlet     :处理http协议的Servlet</p></blockquote></blockquote></blockquote><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><blockquote><p>对象从创建到销毁的过程</p><p>Servlet生命周期: Servlet从创建到销毁的过程.</p></blockquote><p>何时创建:用户第一次访问Servlet创建Servlet的实例, 只会被创建一次, 所以是单例<br>何时销毁:当项目从服务器中移除的时候，或者关闭服务器的时候.</p><p>==用户第一次访问Servlet的时候,服务器会创建一个Servlet的实例,那么Servlet中init方法就会执行.任何一次请求服务器都会创建一个新的线程访问Servlet中的service的方法.在service方法内部根据请求的方式的不同调用doXXX的方法.(get请求调用doGet,post请求调用doPost).当Servlet中服务器中移除掉,或者关闭服务器,Servlet的实例就会被销毁,那么destroy方法就会执行.==</p><ol><li>Servlet生命周期分为三个阶段，初始化阶段，运行阶段，销毁阶段</li><li>初始化阶段默认在Servlet第一次被访问的时候执行，调用init方法执行一些初始化准备工作。浏览器每次发起请求则执行运行阶段调用service方法，执行具体业务流程。当服务器关闭或者项目被移除执行销毁阶段，调用destory方法，可以在destory方法中执行资源回收，连接关闭等工作。</li><li>初始化阶段和销毁阶段在整个生命周期过程中只执行一次，运行阶段可以执行多次</li></ol><h2 id="Servlet的配置"><a href="#Servlet的配置" class="headerlink" title="Servlet的配置"></a>Servlet的配置</h2><p>Servlet默认是在第一次访问的时候创建的.现在让Servlet在服务器启动的时候创建好.进行对Servlet的配置:<br>在web.xml中在<code>&lt;servlet&gt;&lt;/servlet&gt;</code>标签中配置:<code>&lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</code> 传入正整数,整数越小,被创建的优先级就越高.</p><p>url-pattern配置方式共有三种:</p><ol><li>完全路径匹配 ：以 / 开始<code>&lt;url-pattern&gt;/ServletDemo1&lt;/url-pattern&gt;</code></li><li>目录匹配 ：以 / 开始需要以 <em> 结束.`<url-pattern>/aaa/</url-pattern></em>` </li><li>扩展名匹配 ：不能以 / 开始 以 <em> 开始的. `<url-pattern></url-pattern></em>.action` </li></ol><p>==错误的写法 ：<code>/*.do</code>==</p><blockquote><p>structs2默认的是以.action为后缀，springmvc是以.do为后缀</p></blockquote><h2 id="Servlet路径编写"><a href="#Servlet路径编写" class="headerlink" title="Servlet路径编写"></a>Servlet路径编写</h2><ul><li><p>相对路径:都是需要找位置相对关系.不能以 / 开始的 <code>./ 当前路径  ../上一级目录</code><br>使用相对路径访问:</p></li><li><p>绝对路径:不需要找位置相对关系. 以 / 开始的.<br>绝对路径中分为客户端路径和服务器端路径:</p><ul><li>客户端路径一定要加工程名.</li><li>服务器端路径不需要加工程名.</li></ul></li></ul><h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><p>ServletContext对象存取数据,存的数据都是有一定的作用的范围的.这种对象称为是域对象.<br>所有的Servlet都在ServletContext环境下(每一个项目有且只有一个ServletContext对象)<br>ServletContext存取数据:<br>存入数据:<code>setAttribute(key,value)</code><br>获取数据:<code>Object getAttribute(key)</code><br>移除数据:<code>removeAttribute(key)</code></p><h3 id="ServletContext的作用"><a href="#ServletContext的作用" class="headerlink" title="ServletContext的作用:"></a>ServletContext的作用:</h3><ul><li>用来获得全局初始化参数.</li><li>用来获得文件的MIME的类型.</li><li>作为域对象存取数据.(ServletContext是一个域对象)<ul><li>作用范围:整个web工程.</li><li>创建:服务器启动的时候,tomcat服务器为每个web项目创建一个单独ServletContext对象.</li><li>销毁:服务器关闭的时候,或者项目从服务器中移除的时候.</li></ul></li><li>用来读取web项目下的文件.</li></ul><h2 id="ServletConfig-对象"><a href="#ServletConfig-对象" class="headerlink" title="ServletConfig 对象"></a>ServletConfig 对象</h2>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig servletConfig = <span class="keyword">this</span>.getServletConfig();</span><br><span class="line">String servletName = servletConfig.getServletName();</span><br><span class="line">System.out.println(servletName);</span><br><span class="line"></span><br><span class="line">String username = servletConfig.getInitParameter(<span class="string">"username"</span>);</span><br><span class="line">String password = servletConfig.getInitParameter(<span class="string">"password"</span>);</span><br><span class="line">System.out.println(username+<span class="string">"    "</span>+password);</span><br></pre></td></tr></table></figure><pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo7<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.itheima.a_servlet.ServletDemo7<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Mysql</title>
      <link href="/JavaWeb/JavaWeb%20-Mysql/"/>
      <url>/JavaWeb/JavaWeb%20-Mysql/</url>
      <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><pre><code>是一个文件系统,存储数据,通过标准的SQLy语句获取数据</code></pre><h4 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h4><pre><code>关系型数据库存放的是实体之间的关系  常见关系型如:mysql orcale db2</code></pre><p><img src="D:/soft/Youdao/noteImg/ER模型.bmp" alt="image"></p><h5 id="mysql-安装"><a href="#mysql-安装" class="headerlink" title="mysql 安装"></a>mysql 安装</h5><pre><code>注意路径不能有空格 中文等</code></pre><h3 id="数据存储方式"><a href="#数据存储方式" class="headerlink" title="数据存储方式"></a>数据存储方式</h3><pre><code>数据库服务器 --&gt;数据库 ---&gt;表(为每个实体创建一个表)--&gt;字段一台数据库服务器中会创建很多数据库（一个项目，会创建一个数据库）。在数据库中会创建很多张表（一个实体会创建一个表）。在表中会有很多记录（一个对象的实例会添加一条新的记录）。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">数据库服务器--&gt;数据库1</span><br><span class="line">数据库服务器--&gt;数据库2</span><br><span class="line">数据库1--&gt;表1</span><br><span class="line">数据库1--&gt;表2</span><br><span class="line"></span><br><span class="line">数据库2--&gt;表3</span><br><span class="line">数据库2--&gt;表4</span><br></pre></td></tr></table></figure><pre><code>eg:表结构(table)</code></pre><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>13</td></tr><tr><td>2</td><td>李四</td><td>15</td></tr></tbody></table><pre><code>netstat -ano    端口查看tasklist /svc   任务列表ipconfig /flushdns  ip刷新</code></pre><h2 id="sql-结构化查询语言"><a href="#sql-结构化查询语言" class="headerlink" title="sql 结构化查询语言"></a>sql 结构化查询语言</h2><p><strong>分类:</strong></p><pre><code>DDL 数据定义语言    数据库/表的操作    create drop altetDCL 数据控制语言    grant ifDML 数据操作语言        对数据进行操作    insert updata deleteDQL 数据查询语言    select</code></pre><p><strong>数据库操作</strong></p><pre><code>创建数据库    CREATE DATABASE 数据库名称 CHARACTER SET 字符集 COLLATE; 字符集校对规则    eg:       CREATE DATABASE; //字符集和校对规则可省略 查看数据库 SHOW  DATABASES; 查看某个数据库的定义信息： SHOW CREATE DATABASE 数据库名称;修改数据库        修改数据库字符集        ALTER 数据库名 CHARACTER SET 字符集;    删除数据库        DROP DATABASE 数据库名;切换使用的数据库    use 数据库名;查看正在使用的数据库    select database();</code></pre><p><strong>数据类型</strong></p><pre><code>表中字段类型Java中的类型                        MySQL中的类型    byte/short/int/long                 tinyint/smallint/int/bigint    float                                float    double                                double    boolean                                bit    char/String                            char和varchar类型   //需要指定长度    Date                                date/time/datetime/timestamp    File                                blob/text   //很少用注意:在mysql中</code></pre><ul><li>char代表是固定长度的字符或字符串   eg:char(8) 存入长度不够8用空格不齐</li><li>varchar代表的是可变长度的字符串 eg: varchar(8)    长度不够8不会不齐   </li><li>datetime就是既有日期又有时间的日期类型,如果没有向这个字段中存值，数据库使用null存入到数据库中</li><li>timestamp也是既有日期又有时间的日期类型，如果没有向这个字段中存值，数据库使用当前的系统时间存入到数据库中</li></ul><p><strong>表的操作</strong></p><blockquote><pre><code>创建表      CREATE TABLE 表名(字段名称 字段类型(长度) 约束,字段名称 字段类型(长度) 约束...);eg:    CREATE TABLE person{        id INT PRIMARY KEY AUTO_INCREMENT,        name VARCHAR(10) UNIQUE,        age INT    };注意:    创建表之前要有数据库并使用数据库    约束可省略约束    主键    PRIMARY KEY 默认非空唯一    非空    NOT NULL    唯一    UNIQUE查看所有表    SHOW TABLES;查看某个表的结构信息    DESC 表名;查看表创建信息    SHOW CREATE TABLE 表名;删除表   DROP TABLE 表名;</code></pre></blockquote><blockquote><pre><code>修改表    1）添加列    ALTER TABLE 表名称 ADD 列名 类型(长度) 约束;    eg:        ALTER TABLE t_address ADD phone VARCHAR(20);    2)修改列的类型、长度、约束    ALTER TABLE 表名称 MODIFY  类型(长度) 约束;    eg：        ALTER TABLE t_address MODIFY phone VARCHAR(30) NOT NULL;    3)修改列名    ALTER TABLE 表名称 CHANGE 旧列名 新列名 类型(长度) 约束;    eg：        ALTER TABLE t_address CHANGE phone tel VARCHAR(30) NOT NULL;    4)删除列    ALTER TABLE 表名称 DROP 列名;    eg:        ALTER TABLE t_address DROP tel;  5)修改表名        RENAME TABLE 表名 TO 新表名;    </code></pre></blockquote><ul><li><p>插入数据</p><p>1)INSERT INTO 表名(列名1,列名2,…,列名N) VALUES(值1,值2,…,值N);<br>2)INSERT INTO 表名(列名1,列名2,…,列名N) VALUES(值1,值2,…,值N),(值1,值2,…,值N),…,(值1,值2,…,值N);<br>3)INSERT INTO 表名 VALUES(值1,值2,…,值N);</p></li></ul><ul><li><p>更新数据</p><p>UPDATE 表名 SET 列名1=值1,列名2=值2,…,列名n=值n WHERE 条件;</p></li></ul><ul><li><p>删除数据</p><p>1)删除部分数据</p><pre><code>DELETE FROM 表名 WHERE 条件;</code></pre><p>2)删除表内所有数据</p><pre><code>--DELETE是一条条删除，不会清空AUTO_INCREMENTDELETE FROM 表名;   --属于DML,事务可以作用在DML上--直接将表删除，重建，AUTO_INCREMENT重置为0TRUNCATE TABLE 表名;    --属于DDL</code></pre></li><li><p>查询数据<br>   基本查询</p><pre><code>    SELECT * FROM 表名 ;    --查询所有    SELECT 列名1,列名2... FROM 表名 ;     --查询指定列数据    SELECT DISTINCT 列名1... FROM 表名  ;    --去重查询,参数所有列完全相同时去重    SELECT 列名1 AS 列名1别名,列名2 AS 列名2别名 FROM 表名 ;    --别名查询,AS可以省略条件查询    基本查询+WHERE 条件;    SELECT * FROM 表名 WHERE 条件;    条件:        &gt;, &lt; ,&gt;=, &lt;= ,&lt;&gt;, =        like 模糊查询,使用_或%作为站位符,_代表一个字符,%代表任意个字符        in      范围查询 匹配内容        between .. and        and ,or  ,not    eg:    SELECT * FROM headset WHERE name LIKE &apos;李_&apos;;    SELECT * FROM headset WHERE age IN(21,22,23);    SELECT * FROM headset WHERE money BETWEEN 1000 AND 1800;</code></pre><p><img src="D:/soft/Youdao/noteImg/where.jpg" alt="img"></p></li><li><p>排序查询<br>   order by 字段名 asc(升序默认可省略)/desc(降序);<br>   eg:</p><pre><code>select * from exam order by score;select * from exam order by score desc;select * from exam order by score desc,age asc;</code></pre><p>分页查询 sql语句最后<br>   limit 起始index,数目</p><p>聚合函数<br>   count<br>   max/min<br>   sum<br>   avg<br>eg:<br>   SELECT sum(english) from exam where name like ‘李%’;</p><p>ifnull(字段,默认值)     –当字段为空时以默认值计算</p><p>分组查询<br>   SELECT 字段 ,COUNT(*) FROM 表名 GROUP BY 字段;</p><p>  聚合函数通常和分组配合,  where 后不能跟聚合函数 需要用having</p></li></ul><pre><code>SELECT 字段 ,SUM(字段1) FROM 表名 GROUP BY 字段 HAVING 条件;</code></pre><ul><li>总结<br>   S(select)… F(from)…W(where)…G(group by)…H(having)…O(order by);</li></ul><h2 id="多表"><a href="#多表" class="headerlink" title="多表"></a>多表</h2><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><pre><code>外键约束:保证数据的完整性alter table 表 add foreign key(字段) references 表a(字段a)外键一般连接的都是主键</code></pre><h4 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h4><pre><code>一对一    一的其中一方创建外键指向另一方的主键    主键绑定主键</code></pre><p><img src="D:/soft/Youdao/noteImg/一对一.jpg" alt="img"><br>        一对多<br>            多的一方创建外键指向一的主键<br><img src="D:/soft/Youdao/noteImg/一对多.jpg" alt="img"><br>        多对多<br>            需要创建第三张表(中间表),在中间表中能够至少有两个字段作为外键分别指向多对多双方主键<br><img src="D:/soft/Youdao/noteImg/多对多.jpg" alt="img">     </p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>####连接查询</p><pre><code>交叉连接(了解)    两个表的笛卡尔积    select * from 表1 cross join 表2;    select * from 表1 , 表2;内连接    显示内连接  inner join  (inner 可省略)         select * from 表1 inner join 表2 on 关联条件;    隐士内连接         select * from 表1,表2 where 关联条件;外连接  outer join (outer 可省略)    左外连接        select * from 表1 left outer join 表2 on 关联条件    右外连接        select * from 表1 right outer join 表2 on 关联条件</code></pre><p><img src="D:/soft/Youdao/noteImg/内外连接的区别.jpg" alt="img">            </p><p>####子查询</p><pre><code>一个查询语句需要依赖另一个查询语句的结果    查询中嵌套查询inany     任意一个all     所有exists      select * from clsses where exists(selct cno from student where birthday&gt;&apos;1991-01-01&apos;)</code></pre><p>###事务</p><blockquote><p> 特性  </p></blockquote><pre><code>原子性    事务不可分割一致性    事务执行的前后,数据的完整性保持一致隔离性    一个事务的执行不应该受到其他事务的干扰持久性    事务一旦提交结束 就因该保存到数据库中</code></pre><blockquote><p>   开启事务</p></blockquote><pre><code>    start transaction提交事务    commit回滚事务    rollback</code></pre><blockquote><p>  隔离级别</p></blockquote><pre><code>基于隔离性出现的问题    脏读        一个事务查询到另外一个事务未提交的数据,导致查询结果不一致    不可重复读        一个事务读到了到另外一个事务已提交的update数据,导致多次查询结果不一致    虚读/幻读     一个事务读到了到另外一个事务已提交的insert数据,导致多次查询结果不一致级别    read uncommitted    read committed    repeatable     serializable</code></pre><hr><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><pre><code>java数据连接  一组Java语言的类和接口  规范驱动:两设备(应用)之间的通信桥梁</code></pre><p>步骤</p><ol><li>注册驱动<blockquote><pre><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></pre></blockquote></li><li>获取连接对象<blockquote><pre><code>Connection con=DriverManager.getConnection(&quot;jdbc:mysql://ip地址:端口/数据库名称&quot;,数据库用户名,数据库密码);</code></pre></blockquote></li><li>获得一个操作sql对象<blockquote><pre><code>Statement sm=  con.createStatement;</code></pre></blockquote></li><li><p>执行sql语句 获取结果</p><blockquote><pre><code>String sql =&quot;sql语句&quot;;</code></pre><p> ResultSet set=sm.executeQuery(sql); 查询<br> int row =sm.executeUpdate(sql);     增删改</p></blockquote></li><li><p>处理结果</p></li></ol><ol start="6"><li>释放资源<blockquote><pre><code>set.close();</code></pre><p> sm.close();<br> con.close()           </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">if (rs != null) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        rs.close();</span><br><span class="line">    &#125; catch (SQLException sqlEx) &#123; // ignore &#125;</span><br><span class="line"></span><br><span class="line">     rs = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (stmt != null) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        stmt.close();</span><br><span class="line">    &#125; catch (SQLException sqlEx) &#123; // ignore &#125;</span><br><span class="line"></span><br><span class="line">    stmt = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>###JDBC 的sql 注入漏洞</p><pre><code>把用户输入得参数当作sql关键字被解释执行 </code></pre><h3 id="jdbc事务"><a href="#jdbc事务" class="headerlink" title="jdbc事务"></a>jdbc事务</h3><ol><li><p>环境准备</p><pre><code>数据库及表create database web_test;use web_test;create table account(    id int primary key auto_increment,    userName varchar(20),    password varchar(20),    money double);insert into account values(null,zhangsan,12345);</code></pre></li><li><p>开启事务</p><pre><code>conn.setAutoCOmmit(false);//关闭自动提交</code></pre></li><li>提交事务<pre><code>conn.commit();</code></pre></li><li>事务回滚<pre><code>conn.rollback();</code></pre></li></ol><figure class="highlight java"><figcaption><span>代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><pre><code>创建和管理一个连接的缓存池的技术连接的创建和销毁需要时间,在服务器初级化时就初始化一些连接放入连接池中,使用时可从内存中获取,在内存中效率高</code></pre><p>1.自定义连接池<br>    装饰着模式</p><p>2.Druid连接池</p><pre><code>DuridDataSource ds =new DuridDataSource();//手动ds.setDriverClassName(&quot;&quot;);ds.setUrl(&quot;&quot;);ds.setPassword(&quot;&quot;);//配置文件方式/*    DriverClassName=    url=    username=    password=*/Properties prop= new Properties()prop.load(InputStream)DruidDataSourceFaxtory.createDataSource(prop)//获得连接ds.getConnection();</code></pre><p>3.c3p0连接池</p><pre><code>ComboPooledDataSource ds =new ComboPooledDataSource();ds,setDriverClass(&quot;&quot;);ds.setJdbcUrl(&quot;&quot;);ds.setUser(&quot;&quot;);ds.setPassword(&quot;&quot;);//获得连接 ds.getConnection();</code></pre><ol start="4"><li><p>DBUtils</p><p> 对jdbc简单的封装而没有影响性能</p></li></ol>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML</title>
      <link href="/JavaWeb/JavaWeb%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
      <url>/JavaWeb/JavaWeb%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>Hyper Text Markup Language  超文本标记语言</p><blockquote><p>标记语言：指的是通过一组标签的形式描述事物的一门语言<br>用于制作页面（静态）</p></blockquote></blockquote><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><blockquote><p>一个HTML文件后缀名为.html 或 htm</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头标签 基于当前页面的一些配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html 标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置字符集 seo优化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 体标签 展示内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">html body</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h2><ol><li>按标签写法<blockquote><ul><li>双边  <code>&lt;body&gt;&lt;/body&gt;</code></li><li>单边  <code>&lt;br /&gt;</code></li></ul></blockquote></li><li>按状态<blockquote><ul><li>行内 <code>&lt;span&gt;</code></li><li>块级 <code>&lt;div&gt;</code></li></ul></blockquote></li></ol><h3 id="HTML-字体排版标签"><a href="#HTML-字体排版标签" class="headerlink" title="HTML 字体排版标签"></a>HTML 字体排版标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span> 字体便签</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">size</span>=<span class="string">"12"</span> <span class="attr">face</span>=<span class="string">"宋体"</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">属性 color 字体颜色</span><br><span class="line">英文单词 red black..</span><br><span class="line">使用16进制  #FFFFFF , #FFFF</span><br><span class="line">属性 size  字体大小</span><br><span class="line">从1 到 7</span><br><span class="line">属性 face 字体</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> 换行标签</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> &gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> 标题标签 ... <span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> 段落标签</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span> <span class="tag">&lt;/<span class="name">b</span>&gt;</span> 字体加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 斜体标签</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span> 下划线标签</span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span> <span class="tag">&lt;/<span class="name">center</span>&gt;</span>内容居中</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">hr</span>&gt;</span> 分隔线</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span> 预定义标签 将字符串原封不动的显示出来</span><br></pre></td></tr></table></figure><h3 id="HTML-图片标签"><a href="#HTML-图片标签" class="headerlink" title="HTML 图片标签"></a>HTML 图片标签</h3><blockquote><p><code>&lt;img&gt; 图片标签</code></p></blockquote><pre><code>属性src     ：   图片来源width  :    图片的宽度.height: 图片的高度.alt    :   图片找不到显示的内容.</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"a.png"</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">100%</span> <span class="attr">alt</span>=<span class="string">"img"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-列表标签"><a href="#HTML-列表标签" class="headerlink" title="HTML 列表标签"></a>HTML 列表标签</h3><ul><li>无序<blockquote><p> ul li</p><p>  属性</p><pre><code>type    类型circle 空心点disc  实心点 默认square 方块</code></pre></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>有序<blockquote><p>ol li</p></blockquote>  属性<pre><code>type    类型1  数字型a 英文型i 罗马字符型start 从哪个开始</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="超链接标签-lt-a-gt"><a href="#超链接标签-lt-a-gt" class="headerlink" title="超链接标签 &lt;a&gt;"></a>超链接标签 <code>&lt;a&gt;</code></h3><blockquote><p>属性<br>   href   :链接的路径<br>   target :打开的方式<br>               _self   :在自身页面打开<br>              _blank  :新打开一个页面</p></blockquote><h3 id="table标签"><a href="#table标签" class="headerlink" title="table标签"></a>table标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;&lt;!--行--&gt;</span><br><span class="line">&lt;td&gt;&lt;/td&gt; 列</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>属性<br>width ； 表格宽度<br>height：表格高度<br>border ： 边框<br>Align: 水平位置<br>left<br>right<br>center</p><p><td> 属性<br>合并单元格<br>colspan=”列数”<br>rowspan=”行数”</td></p><h3 id="表单标签-lt-form-gt"><a href="#表单标签-lt-form-gt" class="headerlink" title="表单标签 &lt;form&gt;"></a>表单标签 <code>&lt;form&gt;</code></h3><blockquote><p>action 提交的路径，默认当前页面</p></blockquote><blockquote><p>method 请求方式，GET 和POST 默认为GET</p></blockquote><h4 id="表单中的元素"><a href="#表单中的元素" class="headerlink" title="表单中的元素"></a>表单中的元素</h4><h5 id="lt-input-gt-文本框"><a href="#lt-input-gt-文本框" class="headerlink" title="&lt;input&gt; 文本框"></a><code>&lt;input&gt;</code> 文本框</h5><blockquote><p> <code>&lt;input type=&quot;text&quot;/&gt;</code>  文本框</p><pre><code>属性  type：      类型  text        文本框  password    密码框  radio       单选按钮  checkbox    复选按钮  button      普通按钮  submit      提交按钮  reset       重置按钮  file        文件上传的表单项  hidden      隐藏字段  image       图片按钮  name:       表单元素名称 必须有  value:      文本框默认值  size:       文本框长度  maxlength:  最大输入长度  readonly:   只读  checked:    单选/复选按钮默认选中</code></pre></blockquote><h5 id="lt-select-gt-下拉列表"><a href="#lt-select-gt-下拉列表" class="headerlink" title="&lt;select&gt;    下拉列表"></a><code>&lt;select&gt;</code>    下拉列表</h5><blockquote><p>name 属性</p></blockquote><h5 id="lt-option-gt"><a href="#lt-option-gt" class="headerlink" title="&lt;option&gt;"></a><code>&lt;option&gt;</code></h5><blockquote><p>value 属性</p></blockquote><p>#####<code>&lt;textarea&gt;</code> 文本域</p><blockquote><p>cols</p></blockquote><blockquote><p>rows</p></blockquote><h4 id="框架标签-frameset"><a href="#框架标签-frameset" class="headerlink" title="框架标签 frameset"></a>框架标签 frameset</h4><blockquote><p>注意 与body 标签冲突</p></blockquote><blockquote><p>属性<br>    rows<br>    cols<br>    两者只能出现其一</p></blockquote><blockquote><p>使用<code>&lt;frame&gt;</code> 标签 frame代表分切的每个部分</p><blockquote><p>属性</p></blockquote></blockquote><pre><code>src 网页的连接name 指定名称  可以通过a标签跳转onresize 让frame边框不能拖动</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;frameset rows=2&gt;</span><br><span class="line">&lt;frame&gt;&lt;/frame&gt;</span><br><span class="line">&lt;frameset cols=2&gt;</span><br><span class="line">&lt;frame&gt;&lt;/frame&gt;</span><br><span class="line">&lt;frame&gt;&lt;/frame&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br></pre></td></tr></table></figure><h1 id="css-层叠样式"><a href="#css-层叠样式" class="headerlink" title="css 层叠样式"></a>css 层叠样式</h1><blockquote><p>div +css 页面布局</p></blockquote><blockquote><p> 对页面进行美化</p></blockquote><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><p><code>&lt;div&gt;&lt;/div&gt;</code> ： 默认一个独占一行</p><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><p><code>&lt;span&gt;&lt;/span&gt;</code>  : 默认不换行</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>####行内式</p><blockquote><p>直接标签内使用style 属性<br><code>&lt; h1 style=&quot;color:red;&quot;&gt;&lt;/h1&gt;</code></p></blockquote><p>####内联式</p><blockquote><p>使用style标签,一般放在head 标签内</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">h1&#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>####外联式</p><blockquote><p>单独定义.css文件在HTML中link标签中引入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.css文件中</span><br><span class="line">h1&#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">html中 使用link 标签</span><br><span class="line">&lt;link href=&quot;.css文件路径&quot; type=&quot;text/css&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="声明-属性-值"><a href="#声明-属性-值" class="headerlink" title="声明      属性:值"></a>声明      属性:值</h4><blockquote><p>选择器{属性:值;属性:值…}</p></blockquote><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><blockquote><p>根据标签名称<br>    div{}</p></blockquote><p>####id选择器   </p><blockquote><p>根据标签id属性值 _id</p></blockquote><pre><code>#_id{}</code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><blockquote><p>根据标签class属性值 _class<br>    ._class{}</p></blockquote><h4 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h4><h5 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h5><pre><code>eq: input[type=&quot;text&quot;]{}</code></pre><h5 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h5><pre><code>div span{} 查找所有div 中的所有span标签</code></pre><p>#####子元素选择器<br>    div &gt; span{} 查找所有div 中的第一层是span标签</p><h5 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h5><pre><code>div + span{}</code></pre><h5 id="并列选择器"><a href="#并列选择器" class="headerlink" title="并列选择器"></a>并列选择器</h5><pre><code>选择器1,选择器2{}</code></pre><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><pre><code>CSS float 属性值 描述left 元素向左浮动。right 元素向右浮动。none 默认值。元素不浮动，并会显示在其在文本中出现的位置。inherit 规定应该从父元素继承 float 属性的值。清除浮动 使用clear 属性</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:'left'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear :'none'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><pre><code>position绝对定位 absolute相对定位 relative盒子模型内边距 pedJSKSJding边框 border外边距 margin</code></pre><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><blockquote><p>脚本语言</p></blockquote><p>##组成<br>    ECMAScript: 基本语法<br>    DOM document object model 文档对象模型<br>    BOM browser object model    浏览器对象模型</p><p>##语法<br>区分大小写</p><p>###弱变量类型语言(与java不同)<br>    变量命名<br>    var i =3;//整数型<br>    var i =”3”;//字符串类型</p><p>###数据类型<br>    undefined 未定义<br>    boolean<br>    number<br>    string<br>    object</p><p>###运算符 与Java中基本一致<br>    js中=== 全等 类型和值都一致才为true</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><pre><code>与Java语句一致</code></pre><p>##开发步骤<br>    通常由一个事件触发<br>    事件触发后引用函数<br>    调用函数</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><pre><code>function 函数名(){函数体}</code></pre><h3 id="匿名函数-window-onload-function"><a href="#匿名函数-window-onload-function" class="headerlink" title="匿名函数 window.onload=function(){}"></a>匿名函数 window.onload=function(){}</h3><pre><code>常用事件onclick     点击事件 onsubmit   提交onchange    select选中onfocus         获得焦点onblur      失去焦点onload      页面加载</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">var br=doucment.getElementById(&quot;id&quot;);</span><br><span class="line">br.onclik(function()&#123;</span><br><span class="line">//...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="js引入方式"><a href="#js引入方式" class="headerlink" title="js引入方式"></a>js引入方式</h2><h3 id="使用script-标签"><a href="#使用script-标签" class="headerlink" title="使用script 标签"></a>使用script 标签</h3><pre><code>&lt;script&gt;js内容&lt;/script&gt;</code></pre><h3 id="引入-js-文件"><a href="#引入-js-文件" class="headerlink" title="引入.js 文件"></a>引入.js 文件</h3><pre><code>&lt;script src=&quot;js文件&quot;&gt;&lt;/script&gt;</code></pre><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><pre><code>&quot;&quot;.match(/正则表达式/)/正则表达式/.test(&quot;&quot;)</code></pre><p>##获得页面元素<br>    document.getElementById(“id”);</p><pre><code>window中setTimeout(一定时间后执行) setInterval(每隔一定时间执行)eg:setInterval(function(){},1000);setTimeout(function(){},1000);</code></pre><h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><blockquote><p>一个js 的框架(类库)</p></blockquote><p>##引入<br>    <script src="jq文件"></script><br>    $(function(){               //$相当于JQuery 对象<br>    //等页面的Dom树绘制完成后执行<br>    });</p><h2 id="js-jq对象转换"><a href="#js-jq对象转换" class="headerlink" title="js/jq对象转换"></a>js/jq对象转换</h2><p>###js对象转jq对象<br>    $(js对象)</p><p>###jq对象转js对象<br>    var $d1=$(“#id”);//jq对象 $d1 变量名可起其他名    #id 为 #+标签id    eq: var a =$(#id);<br>    $d1[0];或    $d1.get(0);//转为js对象</p><p>##显示与隐藏<br>    $(选择器).show();<br>    $(选择器).hide();<br>    $(选择器).toggle(); 当标签隐藏时显示,显示时隐藏<br>    用于绑定两个或多个事件处理器函数，以响应被选元素的轮流的 click 事件。<br>    如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。</p><p>###基本<br>    show([speed,[easing],[fn]])<br>    hide([speed,[easing],[fn]])<br>    toggle([speed],[easing],[fn])</p><p>###滑动<br>    slideDown([spe],[eas],[fn])<br>    slideUp([speed,[easing],[fn]])<br>    slideToggle([speed],[easing],[fn])<br>    注意要设置标签的宽度</p><p>###淡入淡出<br>    fadeIn([speed],[eas],[fn])<br>    fadeOut([speed],[eas],[fn])<br>    fadeTo([[spe],opa,[eas],[fn]])<br>    fadeToggle([speed,[eas],[fn]])</p><p>##选择器</p><blockquote><p>$(选择器)</p></blockquote><p>###基本</p><pre><code>#id             id选择器.class          类选择器元素名         元素选择器*               通配选择器选择器1,选择器2   并列选择器</code></pre><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><pre><code>ancestor descendant     后代选择器       使用空格        eg: $(body div) body 下的所有的div标签parent &gt; child          子元素选择器      使用&gt;     eg:$(body&gt;div)  body下的第一层div标签prev + next             下一个元素       使用+     eg:$(#id+div)       id标签的下一个标签prev ~ siblings         兄弟元素            使用~     eg:$(#id~div)       id标签的所有兄弟标签</code></pre><h3 id="基本过滤"><a href="#基本过滤" class="headerlink" title="基本过滤"></a>基本过滤</h3><pre><code>:first          第一个元素:last           最后一个元素:odd            奇数元素:even       偶数元素:eq(index)      下标为index 元素内容过滤:contains(text)     内容为text的元素</code></pre><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre><code>[attribute]                         [attribute=value]           匹配给定的属性是某个特定值的元素[attribute!=value]          匹配所有不含有指定的属性，或者属性不等于特定值的元素[attribute^=value]          匹配给定的属性是以某些值开始的元素[attribute$=value] [attribute*=value] [attrSel1][attrSel2][attrSelN] </code></pre><h3 id="表单选择器和表单属性选择器"><a href="#表单选择器和表单属性选择器" class="headerlink" title="表单选择器和表单属性选择器"></a>表单选择器和表单属性选择器</h3><pre><code>:input  所有的表单标签checked     checkbox 或  radio 被选中selected    select被选中</code></pre><h3 id="添加和移除样式"><a href="#添加和移除样式" class="headerlink" title="添加和移除样式"></a>添加和移除样式</h3><pre><code>* 如果样式没有事先定义,可以使用css方法为奇数行或者偶数行设置背景颜色.css(&quot;属性&quot;,&quot;值&quot;)css(&quot;属性1:值1&quot;,&quot;属性2:值2&quot;)* 如果已经在css文件中事先将样式定义完成了,不能使用css方法了.使用JQ中的CSS类中的方法：    * addClass();    * removeClass();eg:$(&quot;tr&quot;).addClass(&quot;&quot;);</code></pre><h2 id="标签属性操作"><a href="#标签属性操作" class="headerlink" title="标签属性操作"></a>标签属性操作</h2><pre><code>attr(); 高版本会失效prop(); 获取设置属性  prop(&quot;属性&quot;)  prop(&quot;属性&quot;,&quot;值&quot;)removeProp()    移除属性操作文档对象append()        添加appendTo()  添加到html()      替换内容</code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre><code>$().each(function(i,n){ // i代表index ,n代表当前元素})$.each(数组,function(i,n){})</code></pre><h3 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h3><pre><code>toggle();用于绑定两个或多个事件处理器函数，以响应被选元素的轮流的 click 事件。如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。eg:对表格切换显示/隐藏$(&apos;td).toggle();对表格的切换一个类$(&quot;td&quot;).toggle(  function () {    $(this).addClass(&quot;selected&quot;);  },  function () {    $(this).removeClass(&quot;selected&quot;);  });</code></pre><h3 id="trigger和triggerHandler的区别"><a href="#trigger和triggerHandler的区别" class="headerlink" title="trigger和triggerHandler的区别"></a>trigger和triggerHandler的区别</h3><pre><code>1.trigger和triggerHandler都会触发自己实现的逻辑2.trigger会导致系统的事件和自己定义的逻辑都被触发3.triggerHandler只会触发自己实现的逻辑,不会触发系统的事件4.trigger会对所有匹配到的元素都执行相关逻辑5.triggerHandler他只会对匹配到的元素的第一个执行自己的逻辑,并且不会执行系统的事件6.trigger会导致事件冒泡.triggerHanlder不会导致事件冒泡</code></pre><h1 id="BootStrap-前端响应式框架"><a href="#BootStrap-前端响应式框架" class="headerlink" title="BootStrap  前端响应式框架"></a>BootStrap  前端响应式框架</h1><blockquote><p>引入bootstrap文件</p></blockquote><blockquote><p>注意先引入jquery在引入bootstrap.js</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap-theme.min.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>添加<code>&lt;meta&gt;标签</code><br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p></blockquote></blockquote><h2 id="全局css"><a href="#全局css" class="headerlink" title="全局css"></a>全局css</h2><h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><pre><code>.container.container-flue</code></pre><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><pre><code>12列.row 行.col-lg-n       .col-md-n       .col-sm-n       .col-xs-n   四种列样式,n是数字1-12代表占行的份额,行的总份额为12</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="javaScript插件"><a href="#javaScript插件" class="headerlink" title="javaScript插件"></a>javaScript插件</h3><h4 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h4>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Http</title>
      <link href="/JavaWeb/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/JavaWeb/HTTP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><blockquote><p>超文本传输协议,用来规定浏览器和服务器之间要遵守的协议</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><p>基于请求和响应的模型</p><blockquote><p>必须现有请求后有响应</p></blockquote></blockquote><blockquote><blockquote><p>请求和响应成对出现</p></blockquote></blockquote><h3 id="协议详解"><a href="#协议详解" class="headerlink" title="协议详解"></a>协议详解</h3><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，定义了主机如何连入因特网及数据如何再它们之间传输的标准，从字面意思来看TCP/IP是TCP和IP协议的合称，但实际上TCP/IP协议是指因特网整个TCP/IP协议族。不同于OSI模型的七个分层，TCP/IP协议参考模型把所有的TCP/IP系列协议归类到四个抽象层中<br>应用层：TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet 等等<br>传输层：TCP，UDP<br>网络层：IP，ICMP，OSPF，EIGRP，IGMP<br>数据链路层：SLIP，CSLIP，PPP，MTU<br>每一抽象层建立在低一层提供的服务上，并且为高一层提供服务，看起来大概是这样子的<br><img src="http://os4z8t7lb.bkt.clouddn.com/201710121244_542.png" alt=""><br>建立TCP连接的三次握手<br><img src="http://os4z8t7lb.bkt.clouddn.com/201710121247_95.png" alt=""><br><img src="http://os4z8t7lb.bkt.clouddn.com/201712240822_837.png" alt=""></p><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><p>套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：<br>连接使用的协议， 本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。<br>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个 TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。<br>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。<br>socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。<br><img src="http://os4z8t7lb.bkt.clouddn.com/201710121245_575.png" alt=""></p><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p>Http协议是建立在TCP协议基础之上的，当浏览器需要从服务器获取网页数据的时候，会发出一次Http请求。Http会通过TCP建立起一个到服务器的连接通道，当本次请求需要的数据完毕后，Http会立即将TCP连接断开，这个过程是很短的。<br>在HTTP 1.0中客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。<br>从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。虽然这里使用TCP连接保持了一段时间，但是这个时间是有限范围的，到了时间点依然是会关闭的，所以我们还把其看做是每次连接完成后就会关闭。<br>Http连接是一种短连接，是一种无状态的连接。所谓的无状态，是指浏览器每次向服务器发起请求的时候，不是通过一个连接，而是每次都建立一个新的连接。如果是一个连接的话，服务器进程中就能保持住这个连接并且在内存中记住一些信息状态。而每次请求结束后，连接就关闭，相关的内容就释放了，所以记不住任何状态，称为无状态连接。<br>如果要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的做法是即使不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。<br>通过Session, Cookie等相关技术，也能保持一些用户的状态。但是还是每次都使用一个连接，依然是无状态连接。<br>Http协议指定的端口是 80，所以一般计算机上不会限制这个端口，所以Http协议能够顺利通过所有机器上的防火墙。</p><h4 id="HTTP，socket，TCP-IP："><a href="#HTTP，socket，TCP-IP：" class="headerlink" title="HTTP，socket，TCP/IP："></a>HTTP，socket，TCP/IP：</h4><p>网络由下往上分为：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。<br>IP协议对应于网络层，TCP协议对应于传输层，而HTTP协议对应于应用层，三者从本质上来说没有可比性<br>socket则是对TCP/IP协议的封装和应用(程序员层面上)。<br>TPC/IP协议是传输层协议，主要解决数据如何在网络中传输<br>HTTP是应用层协议，主要解决如何包装数据。<br>关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：“我们在传输数据时，可以只使用(传输层)TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容。如果想要使传输的数据有意义，则必须使用到应用层协议。应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”<br>socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口(API)。<br>通过Socket，我们才能使用TCP/IP协议。实际上，Socket跟TCP/IP协议没有必然的联系。Socket的出现只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、listen、connect、accept、send、read和write等等。<br>关于socket和TCP/IP协议关系的说法比较容易理解：“TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。这个就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。”<br>有个比较形象的描述：HTTP是轿车，提供了封装或者显示数据的具体形式;Socket是发动机，提供了网络通信的能力。</p><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><ul><li>200 ：成功</li><li>302 ：重定向</li><li>304 ：查找本地缓存</li><li>404 ：资源不存在</li><li>500 ：服务器内部错误<br><a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">更多状态码</a></li></ul>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat</title>
      <link href="/JavaWeb/WEB%E5%B7%A5%E7%A8%8B-Tomcat/"/>
      <url>/JavaWeb/WEB%E5%B7%A5%E7%A8%8B-Tomcat/</url>
      <content type="html"><![CDATA[<h1 id="Tomcat发布一个WEB工程"><a href="#Tomcat发布一个WEB工程" class="headerlink" title="Tomcat发布一个WEB工程"></a>Tomcat发布一个WEB工程</h1><p>##常见WEB服务器</p><ol><li>Apache :发布PHP的. LAMP:Linux Apache MySQL PHP.</li><li>IIS :发布ASP的.</li><li>WebSphere、WebLogic、Jboss</li><li>Nginx ， Tomcat</li></ol><blockquote><p>Apache组织研发,免费的小型的服务器软件,支持Servlet/JSP的开发规范</p></blockquote><h2 id="Tomcat安装及目录结构"><a href="#Tomcat安装及目录结构" class="headerlink" title="Tomcat安装及目录结构"></a>Tomcat安装及目录结构</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p><a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">官网下载</a> 解压即可</p></blockquote><blockquote><p>注意:路径不能有中文</p></blockquote><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><blockquote><p>配置JAVA_HOME环境变量 指向JDK 安装目录</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="http://os4z8t7lb.bkt.clouddn.com/201710112316_298.png" alt=""></p><ul><li>bin       <blockquote><p>tomcat的执行的文件.</p></blockquote></li><li>conf      <blockquote><p>tomcat的配置文件.</p></blockquote></li><li>lib       <blockquote><p>tomcat运行的需要的jar包.</p></blockquote></li><li>logs      <blockquote><p>tomcat的运行的日志文件.</p></blockquote></li><li>temp      <blockquote><p>tomcat产生临时文件存放的路径.</p></blockquote></li><li>webapps   <blockquote><p> tomcat发布的web项目的路径.</p></blockquote></li><li>work      <blockquote><p> tomcat运行JSP的时候,JSP翻译成Servlet的代码存放的路径.</p></blockquote></li></ul><h2 id="发布一个WEB工程到Tomcat中"><a href="#发布一个WEB工程到Tomcat中" class="headerlink" title="发布一个WEB工程到Tomcat中"></a>发布一个WEB工程到Tomcat中</h2><blockquote><p>共有三种方式:</p></blockquote><ul><li>1.直接将工程copy到tomcat/webapps下.<blockquote><p> 将工程复制到webapps即可.</p></blockquote></li><li>2.配置tomcat虚拟路径-不推荐：<blockquote><p>在tomcat/conf/server.xml文件中进行配置:</p><blockquote><p>在<host>标签下配置:</host></p><blockquote><pre><code>&lt;Context path=&quot;/itheima&quot; docBase=&quot;C:/website&quot;/&gt;</code></pre></blockquote></blockquote></blockquote></li><li><code>3.配置tomcat虚拟路径-推荐：</code><blockquote><p>在tomcat/conf/Catalina/localhost/xxx.xml</p><blockquote><pre><code>配置&lt;Context docBase=&quot;C:/website&quot;/&gt;xxx作为虚拟路径的名称.</code></pre></blockquote></blockquote></li></ul><h2 id="eclipse开发web项目server配置"><a href="#eclipse开发web项目server配置" class="headerlink" title="eclipse开发web项目server配置"></a>eclipse开发web项目server配置</h2><blockquote><p>选择window下的Perferences弹出窗口</p></blockquote><blockquote><blockquote><p>左侧找到Server下的Runtime Enviroment 点击Add按钮</p></blockquote></blockquote><blockquote><blockquote><p>然后选择apchae Tomcat v7.0(也可以是其他版本) 单击Next</p></blockquote></blockquote><blockquote><blockquote><p>填写Tomcat istallation directory 安装目录 然后 Finish</p></blockquote></blockquote>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaSE加强</title>
      <link href="/java/JavaSE%E5%8A%A0%E5%BC%BA/"/>
      <url>/java/JavaSE%E5%8A%A0%E5%BC%BA/</url>
      <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><blockquote><p>修饰成员变量和方法 内部类</p></blockquote><p>####特点：</p><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>被类的所有对象共享</li><li>可以被类名调用</li><li>优缺点：<ul><li>优点:<ul><li>对象共享数据，节省空间</li><li>被类名直接调用</li></ul></li><li>缺点: <ul><li>访问有局限性    </li></ul></li></ul></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><blockquote><p>在java中，使用{}括起来的代码被称为代码块</p></blockquote><p>####分类</p><p>#####局部代码块</p><blockquote><p>在方法中出现，控制变量生命周期，及早释放，提高内存利用率</p></blockquote><p>#####构造代码块</p><blockquote><p>在类中方法外出现，抽取构造方法中的共性，每次创建对象都会执行，并且在构造方法前执行</p></blockquote><p>#####静态代码块</p><blockquote><p>在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。</p></blockquote><blockquote><p>一般用于加载驱动</p></blockquote><p>#####同步代码块</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>多个类有共同的成员变量和方法，抽取到另一个类中（父类）在让多个类继承父类</p></blockquote><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><pre><code>class 子类 extends 父类 {}</code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>在Java中，类只支持单继承，不允许多继承，也就是说一个类只能有一个直接父类,但多个类可以继承一个父类</li><li>在Java中，多层继承是可以的，即一个类的父类可以再去继承另外的父类</li><li><p>在Java中，子类和父类是一种相对概念，也就是说一个类是某个类父类的同时，也可以是另一个类的子类</p><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><blockquote><p>子类只能获取父类的非私有成员</p><p>super 可以获取父类的成员变量和成员方法，用法与 this 相似</p></blockquote><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><blockquote><p>当父类方法不能完成满足子类使用</p><p>用注解 @Override：方法重写，说明下面的方法是重写父类的方法</p></blockquote><pre><code>注意事项：     不能继承父类私有成员     权限修饰符必须大于等于</code></pre></li></ul><h3 id="继承中构造方法的执行顺序"><a href="#继承中构造方法的执行顺序" class="headerlink" title="继承中构造方法的执行顺序"></a>继承中构造方法的执行顺序</h3><pre><code>A:super(实参列表);语句 在子类的构造方法中使用,用来调用父类中的构造方法(具体哪一个由传递的参数决定),并且只能在构造方法第一行使用B:this(实参列表); 语句  在类的构造方法中使用,用来调用本类中的其它构造方法(具体哪一个由传递的参数决定),并且只能在构造方法的第一行使用</code></pre><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><pre><code>没有变量引用的对象当方法只调用一次时使用</code></pre><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><pre><code>final： 修饰符，可以用于修饰类、成员方法和成员变量   final所修饰的类：不能被继承，不能有子类   final所修饰的方法:不能被重写   final所修饰的变量：是不可以修改的，是常量</code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><pre><code>abstract 修饰符 用于方法和类有抽象方法的类必须是抽象类抽象类的特点：    抽象方法只能在抽象类里面    抽象类和抽象方法必须被abstract修饰    抽象类不能创建对象（不能实例化）    抽象类中可以有非抽象的方法    抽象类和类的关系也是继承    一个类继承了抽象类要么重写所有的抽象方法，要么他自己是抽象类static 修饰的方法不会被继承</code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><pre><code>处理单一继承的局限性比抽象类还抽象的类，接口里所有的方法都是抽象方法，接口和类的关系是实现 implements</code></pre><h4 id="定义格式："><a href="#定义格式：" class="headerlink" title="定义格式："></a>定义格式：</h4><pre><code>public interface 接口名 {    抽象方法1;    抽象方法2;}</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre><code>class 类 implements 接口 {    重写接口中方法} </code></pre><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><pre><code>只能有抽象方法方法只能使用pulic abstract 修饰符 默认使用 可省略只能有常量常量只能使用pulic static fianl 修饰符 默认使用 可省略</code></pre><h4 id="类与接口关系"><a href="#类与接口关系" class="headerlink" title="类与接口关系"></a>类与接口关系</h4><pre><code>类与类之间:继承关系,一个类只能直接继承一个父类,但是支持多重继承类与接口之间:只有实现关系,一个类可以实现多个接口接口与接口之间:只有继承关系,可以多重继承</code></pre><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><pre><code>打破继承的局限性对外提供规则降低了程序的耦合性</code></pre><h5 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h5><pre><code>1.共性：不断的进行抽取，抽取出抽象的，没有具体实现的方法,都不能实例化（不能创建对象）2.区别    与类的关系    类与接口是实现关系，而且是多实现，一个类可以实现多个接口，类与抽象类是继承关系，Java中的继承是单一继承，多层继承，一个类只能继承一个父类，但是可以有爷爷类   成员    a.成员变量        抽象类可以有成员变量，也可以有常量        接口只能有常量，默认修饰符public static final    b.成员方法            抽象类可以有抽象方法，也可以有非抽象方法            接口只能有抽象方法，默认修饰符 public abstract    c.构造方法            抽象类有构造方法，为子类提供            接口没有构造方法</code></pre><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>多态是继封装、继承之后，面向对象的第三大特性</p></blockquote><pre><code>前提    子父类    方法重写    父类引用指向子类对象动态绑定    运行期方法调用是根据其具体类优点 可维护性 可扩展性</code></pre><h4 id="包："><a href="#包：" class="headerlink" title="包："></a>包：</h4><pre><code>多层结构不同包下文件名可相同 必须在第一行声明类的全名    包名.类名使用import 类的全名  将类导入</code></pre><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table><thead><tr><th>权限修饰符</th><th>public</th><th>protected</th><th>default</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√      </td></tr><tr><td>同一包中(子类与无关类)</td><td>√</td><td>√</td><td>√</td></tr><tr><td>不同包的子类</td><td>√</td><td>√        </td></tr><tr><td>不同包中的无关类</td><td>√    </td></tr></tbody></table><table><thead><tr><th>修饰符</th><th>类</th><th>成员变量</th><th>成员方法</th><th>构造方法</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>default</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td></td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>private</td><td>　</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>abstract</td><td>Y</td><td></td><td>Y</td><td>　</td></tr><tr><td>static</td><td>　</td><td>Y</td><td>Y</td><td>　</td></tr><tr><td>final</td><td>Y</td><td>Y</td><td>Y</td><td>　</td></tr></tbody></table><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><blockquote><p>将类写在其他类的内部，可以写在其他类的成员位置和局部位置，这时写在其他类内部的类就称为内部类。其他类也称为外部类。</p></blockquote><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><pre><code>在类的成员位置可以访问外部类的成员包括私有成员外部类.内部类 对象名 = new 外部类().new 内部类();</code></pre><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><blockquote><p>在方法内，出了方法就无法使用   </p></blockquote><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><pre><code>可以看做没有名字的局部内部类格式    new 类/接口 (){        有抽象方法就必须实现具体方法体    };原理：    创建了这个类（接口）的子类对象</code></pre><hr><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><blockquote><p>类层次结构的根类</p></blockquote><p>###方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toString()</span><br><span class="line">equals(Object obj)</span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><blockquote><p>不能被实例化 包含一些有用的字段和方法</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arraycopy(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span><br><span class="line">从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">currentTimeMillis() </span><br><span class="line">          返回以毫秒为单位的当前时间</span><br><span class="line">          </span><br><span class="line">exit(<span class="keyword">int</span> status) </span><br><span class="line">          终止当前正在运行的 Java 虚拟机</span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><blockquote><p>表示特定的瞬间，精确到毫秒</p></blockquote><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><pre><code>Date()  创建当前系统时间的Date对象Date(long date) 创建指定时间的Date对象</code></pre><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><pre><code>    setTime(long time)    long getTime()大部分方法已过时 Calendar类代替</code></pre><h3 id="DateFormat"><a href="#DateFormat" class="headerlink" title="DateFormat"></a>DateFormat</h3><blockquote><p>抽象类 已知实现子类SimpleDateFormat</p></blockquote><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><pre><code>SimpleDateFormat() 默认模式创建对象SimpleDateFormat(String pattern)指定模式创建对象</code></pre><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><pre><code>Date parse(String text)解析字符串的文本，生成 Date。String format(Date date)  将给定的 Date 格式化为日期/时间字符串。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  例：</span><br><span class="line">      SimpleDateFormatsdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日HH:mm:ss"</span>);</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">String s = sdf.format(date)</span><br><span class="line">-----------------</span><br><span class="line">String now = <span class="string">"2000-01-01"</span>；</span><br><span class="line">SimpleDateFormatsdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">Date d2 = sdf.parse(now);</span><br></pre></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><pre><code>抽象类 已知实现子类GregorianCalendarCalendar c = Calendar.getInstance();c.get(Calendar.DAY_OF_MONTH )</code></pre><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><pre><code>由于基本数据类型只能做一些简单的操作和运算，所以java为我们封装了基本类型。自动装箱和拆箱    从JDK1.5 开始</code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre><code>一套规则可以用于比配字符串PatternMatcher字符 x 字符 x \\ 反斜线字符 字符类 [abc] a、b 或 c（简单类） [^abc] 任何字符，除了 a、b 或 c（否定） [a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）预定义字符类 . 任何字符（与行结束符可能匹配也可能不匹配） \d 数字：[0-9] \D 非数字： [^0-9] \s 空白字符：[ \t\n\x0B\f\r] \S 非空白字符：[^\s] \w 单词字符：[a-zA-Z_0-9] \W 非单词字符：[^\w] 数量词 X? X，一次或一次也没有 X* X，零次或多次 X+ X，一次或多次 X{n} X，恰好 n 次 X{n,} X，至少 n 次 X{n,m} X，至少 n 次，但是不超过 m 次 </code></pre><h1 id="集合Collection"><a href="#集合Collection" class="headerlink" title="集合Collection"></a>集合Collection</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="接口Collection-层次结构的根"><a href="#接口Collection-层次结构的根" class="headerlink" title="接口Collection 层次结构的根"></a>接口Collection<e> 层次结构的根</e></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><pre><code>1、toArray() 把集合变成数组，然后遍历数组2、iterator() 迭代器对象，通过迭代器对象迭代集合    Iterator 类      Object next() 下一个元素      boolean  hasNext() 判断是否有下一个元素</code></pre><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><pre><code>for(元素类型 元素变量：集合或数组对象){    可以直接使用元素变量}在增强for循环中不能修改集合，否则会发生并发异常</code></pre><h3 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h3><pre><code>在使用迭代器是不允许集合有修改（增加、删除），否则会抛出异常解决办法    使用迭代器自身去修改集合</code></pre><p>##泛型</p><ol><li><p>是一种广泛的类型，把明确数据类型的工作提前到了编译时期，借鉴了数组的特点</p><blockquote><pre><code>特别注意：泛型只能写引用数据类型。</code></pre></blockquote></li><li><p>泛型的好处</p><ul><li>避免了类型转换的问题</li><li>可以减少黄色警告线</li><li>可以简化我们代码的书写</li></ul></li></ol><h3 id="类名上的泛型"><a href="#类名上的泛型" class="headerlink" title="类名上的泛型"></a>类名上的泛型</h3><pre><code>class Box&lt;E&gt;{}</code></pre><h3 id="方法上的泛型"><a href="#方法上的泛型" class="headerlink" title="方法上的泛型"></a>方法上的泛型</h3><pre><code>public &lt;T&gt; T method(T t){    return t;}</code></pre><h3 id="泛型上下限"><a href="#泛型上下限" class="headerlink" title="泛型上下限"></a>泛型上下限</h3><pre><code>? extends 类名1           泛型上限 ？ super  类名2           泛型下限</code></pre><h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><blockquote><p>长度一旦定义就不能改变</p></blockquote><blockquote><p>有整数索引</p></blockquote><blockquote><p>只能存储同一种类型的元素</p></blockquote><blockquote><p>即可以存储基本数据类型也可以存储引用数据类型</p></blockquote><blockquote><p>查找快 增删慢    </p></blockquote><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>由链子连接起来的一堆节点</p></blockquote><blockquote><p>特点:查询慢 增删快</p></blockquote><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>先进后出       </p></blockquote><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>先进先出    </p></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><pre><code>有序 存储顺序有序索引允许重复子类    ArrayList        底层是数组结构 查询快 增删慢    LinkedList        底层是链表结构 查询慢 增删快        方法            addFirst(E e)            getFirst()            removeFirst()            addLast(E e)            getLast()            removeLast()</code></pre><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><pre><code>List的子类无序（存储和读取的顺序）元素唯一</code></pre><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><blockquote><p>集合工具类</p></blockquote><h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List list,T key)</span>   <span class="comment">//二分查找指定元素的下标,注意list必须排序完毕</span></span></span><br><span class="line"><span class="function">       </span></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(List&lt;? <span class="keyword">super</span> T&gt; dest, List&lt;? extends T&gt; src)</span>  <span class="comment">//  把源列表数据覆盖到目标列表，注意目标列表的长度至少必须等于源列表</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fill</span><span class="params">(List&lt;? <span class="keyword">super</span> T&gt; list, T obj)</span>  <span class="comment">//使用指定元素替换指定列表中的所有元素 </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">shuffle</span><span class="params">(List&lt;?&gt; list)</span>    <span class="comment">//使用默认随机源对指定列表进行置换。</span></span></span><br><span class="line"><span class="function">       </span></span><br><span class="line"><span class="function"><span class="title">sort</span><span class="params">(List&lt;T&gt; list)</span>      <span class="comment">//根据元素的自然顺序 对指定列表按升序进行排序。   </span></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function"><span class="title">swap</span><span class="params">(List&lt;?&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>     <span class="comment">//在指定列表的指定位置处交换元素。</span></span></span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><blockquote><p>将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值。    </p></blockquote><h2 id="与Collextion的区别"><a href="#与Collextion的区别" class="headerlink" title="与Collextion的区别"></a>与Collextion的区别</h2><blockquote><p>Map : 双列集合 通常处理有对应关系的数据 key是不可重复的</p></blockquote><blockquote><p>Collection: 单列集合，有不同子类体系</p></blockquote><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><ol><li><p>增</p><blockquote><p>put(key ,value)</p></blockquote></li><li><p>删</p><blockquote><p>clear()     清除所有</p><p> remove(Object e) 移除</p></blockquote></li><li><p>查</p><blockquote><p>  get(Object key)</p></blockquote></li></ol><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><blockquote><p>包含错误的类型、原因、位置</p></blockquote><p>##体系结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">Throwable--&gt;Error</span><br><span class="line">Throwable--&gt;Exception</span><br></pre></td></tr></table></figure><h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><ol><li>出现异常未处理 jvm帮我们处理 控制台打印异常信息并终止程序</li><li><p>捕获处理</p><blockquote><pre><code>try ... catch try{      可能出现问题的代码 }catch(异常类 异常){         }</code></pre></blockquote></li><li><p>抛出去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   方法（） throws 异常类 &#123;&#125;</span><br><span class="line">新</span><br><span class="line">    try(FileWriter fw = new FileWriter(&quot;a.txt&quot;))&#123;//自动关流</span><br><span class="line">        fw.write(&quot;&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;catch(Exception e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="异常种类"><a href="#异常种类" class="headerlink" title="异常种类"></a>异常种类</h2><p>###运行时异常</p><blockquote><p>RuntimeException 的子类，在运行时期的异常          </p></blockquote><h3 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h3><blockquote><p>Exception子类RuntimeException子类非编译时期必须处理</p></blockquote><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File(File parent,String child)</span><br><span class="line">File(String path)</span><br><span class="line">File(String parent,String child)</span><br></pre></td></tr></table></figure><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">creatNewFile() <span class="comment">//创建文件</span></span><br><span class="line">mkdir()     <span class="comment">//创建文件夹</span></span><br><span class="line">mkdirs()</span><br><span class="line">delete() <span class="comment">//删除文件，</span></span><br><span class="line">isAbsolute() 路径是否是绝对路径</span><br></pre></td></tr></table></figure><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><blockquote><p>System.in</p></blockquote><blockquote><p>System.out</p></blockquote><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><blockquote><p>把字节流转换为字符流<br>    outputStreamWriter<br>    inputStreamReader</p></blockquote><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><blockquote><p>打印流添加输出数据的功能，使它们能够方便地打印各种数据值表示形式.<br>    字符打印流    PrintWriter<br>    void print(String str): 输出任意类型的数据，<br>    void println(String str): 输出任意类型的数据，自动写入换行操作</p></blockquote><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><blockquote><p>用于从流中读取对象的<br>    ObjectInputStream称为 反序列化流,利用输入流从文件中读取对象<br>    ObjectOutputStream 称为 序列化流,利用输出流向文件中写入对象<br>    特点：用于操作对象。可以将对象写入到文件中，也可以从文件中读取对象。</p></blockquote><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="进程：一个应用程序在内存中执行区域"><a href="#进程：一个应用程序在内存中执行区域" class="headerlink" title="进程：一个应用程序在内存中执行区域"></a>进程：一个应用程序在内存中执行区域</h3><h3 id="线程：进程中的一个执行控制单元"><a href="#线程：进程中的一个执行控制单元" class="headerlink" title="线程：进程中的一个执行控制单元"></a>线程：进程中的一个执行控制单元</h3><blockquote><p>一个进程可以有多个线程</p></blockquote><h3 id="多线程实现"><a href="#多线程实现" class="headerlink" title="多线程实现"></a>多线程实现</h3><blockquote><p>方式一</p></blockquote><pre><code>继承Thread 类重写run方法创建对象启动 start()</code></pre><blockquote><p> 方式二</p><pre><code>实现Runnable 接口</code></pre></blockquote><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><blockquote><p>设备之间的数据通讯<br>    Socket</p></blockquote><h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><pre><code>ip    网络设备的标识端口    用于标识进程的逻辑地址传输协议    udp tcp ip</code></pre><h2 id="InerAddress"><a href="#InerAddress" class="headerlink" title="InerAddress"></a>InerAddress</h2><pre><code>表示网络协议（IP) 地址   InetAddress address =InetAddress.getByName(&quot;itheima&quot;);//通过主机名获取InetAddress    InetAddress address =InetAddress.getLocalHost();//本地主机InetAddress</code></pre><h2 id="Udp"><a href="#Udp" class="headerlink" title="Udp"></a>Udp</h2><h3 id="发送过程"><a href="#发送过程" class="headerlink" title="发送过程"></a>发送过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建Socket对象</span></span><br><span class="line"> DatagramSocket ds =<span class="keyword">new</span> DategramSocket();<span class="comment">//创建socket对象随机分配端口</span></span><br><span class="line"> <span class="comment">//DatagramSocket ds =new DategramSocket(1000);指定端口</span></span><br><span class="line"> <span class="comment">//创建数据并打包</span></span><br><span class="line"> <span class="comment">//DatagramPacket 数据包类</span></span><br><span class="line"> <span class="keyword">byte</span>[] bys;<span class="comment">//数据</span></span><br><span class="line"> InetAddress addr = InetAddress.getByName(<span class="string">""</span>);<span class="comment">//ip地址</span></span><br><span class="line"> <span class="keyword">int</span> port ;<span class="comment">//端口</span></span><br><span class="line"> DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys,bys.length,addr,port);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"> ds.send(dp);</span><br><span class="line"> <span class="comment">//关闭资源</span></span><br><span class="line"> ds.close();</span><br></pre></td></tr></table></figure><h3 id="接收过程"><a href="#接收过程" class="headerlink" title="接收过程"></a>接收过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建Socket对象</span></span><br><span class="line"> DatagramSocket ds =<span class="keyword">new</span> DategramSocket(<span class="number">1000</span>);<span class="comment">//指定端口</span></span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagrmPacket(bys,bys.length);</span><br><span class="line">ds.receive(dp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拆分数据</span></span><br><span class="line">InetAddress addr =dp.getAddress();</span><br><span class="line"><span class="keyword">int</span> length =dp.getLength();<span class="comment">//数据长度</span></span><br><span class="line"><span class="comment">//byte[] data =dp.getData();//数据会在bys 中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">ds.close();</span><br></pre></td></tr></table></figure><h2 id="Tcp"><a href="#Tcp" class="headerlink" title="Tcp"></a>Tcp</h2><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建socket对象</span></span><br><span class="line"> Socket socket = <span class="keyword">new</span> Socket(InetAddres.getByName(<span class="string">""</span>),<span class="number">10086</span>);</span><br><span class="line"><span class="comment">// 获取输出流对象</span></span><br><span class="line">OutputSteam os socket.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">  os.write(<span class="string">""</span>);</span><br><span class="line"> <span class="comment">//关闭资源</span></span><br><span class="line"> socket.close();</span><br></pre></td></tr></table></figure><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10086</span>);</span><br><span class="line"> <span class="comment">//监听</span></span><br><span class="line">Socket socket = ss.accept();</span><br><span class="line"><span class="comment">//获得输入流</span></span><br><span class="line">InputStream is =socket.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len =is.read(bs);</span><br><span class="line"></span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote><p>运行过程中获取对象，对象中的成员</p></blockquote><h2 id="获取字节码对象"><a href="#获取字节码对象" class="headerlink" title="获取字节码对象"></a>获取字节码对象</h2><pre><code>Class clz =Class.forName(&quot;类的全名&quot;);</code></pre><h2 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h2><pre><code>Constructor[] cs=  clz.getConstructors() //获取所有public 构造方法Constructor c =clz.getConstructor();//获取无参构造Constructor c =clz.getConstructor(T.class,..);//获取有参构造</code></pre><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><pre><code>Object o = c.newInstance();//无参 c为无构造Object o = c.newInstance(...);//有参 传递实参 c为有参构造</code></pre><h2 id="获取成员字段"><a href="#获取成员字段" class="headerlink" title="获取成员字段"></a>获取成员字段</h2><pre><code>Field field =clz.getField();Field[]  getFields(); public 字段getDeclarefields(); 所有的字段field.get(o) //获取o对象上的field字段的值field.setAccessible(true) //设置反射取消java访问检查field.set(o,值) //给o对象上的field字段设值</code></pre><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><pre><code>Method m = clz.getMethod(&quot;method&quot;,形参类型);m.Invoke(o,实参); 调用方法 </code></pre>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 进阶学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaSE基础</title>
      <link href="/java/JavaSE%E5%9F%BA%E7%A1%80/"/>
      <url>/java/JavaSE%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="JavaSE基础"><a href="#JavaSE基础" class="headerlink" title="JavaSE基础"></a>JavaSE基础</h1><p>##环境搭建</p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code>JVMJRE =JVM +类库JDK =JRE+java开发工具</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>整数  <ul><li>byte      一个字节</li><li>short     两个字节</li><li>int       四个字节</li><li>long      八个字节</li></ul></li><li>小数<ul><li>float     4个字节</li><li>double    8个字节</li></ul></li><li>字符<ul><li>char      2个字节  </li></ul></li><li>布尔<ul><li>boolean </li></ul></li></ul><blockquote><p>float double 在内存中存放结构</p></blockquote><blockquote><p>float一共32位，其结构定义如下：</p></blockquote><blockquote><p>|—— 31 —–|—- 30-23 —— |—— 22-0 —–|</p><p>  符号位(sign)         指数部分(exp)           小数部分(mag)</p></blockquote><blockquote><ul><li>sign:符号位就一位，0表示正数，1表示负数</li><li>exp: 指数部分，无符号正数</li><li>mag:小数部分，定点小数，小数点在最左边。</li></ul></blockquote><blockquote><p>   float的表达式 :  pow(-1,sign)  <em>  (1+mag)  </em> pow(2,exp-127)</p></blockquote><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>数组 对象(new出来的)</p><blockquote><p>需要注意的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">byte</span> c=a+b;<span class="comment">//编译通不过，byte short char 做+、-、*、/运算时结果为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">3</span>;<span class="comment">//java有常量优化机制 , 3 为常量 在取值范围内jvm会自动强制转换</span></span><br></pre></td></tr></table></figure><h3 id="常量、变量"><a href="#常量、变量" class="headerlink" title="常量、变量"></a>常量、变量</h3><blockquote><p>变量定义格式</p></blockquote><pre><code>数据类型 变量名 = 初始化值；例： int a=10;</code></pre><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><pre><code>+   -   *   /   %   ++  --</code></pre><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><pre><code>&amp;    |   ！  ^  &amp;&amp;         ||</code></pre><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><pre><code>关系表达式？表达式1：表达式2；    int c=a&gt;b?a:b;不能单独存在,结果必须被接收</code></pre><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>()&#123;</span><br><span class="line">    <span class="keyword">case</span> 值:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(;;)&#123;</span><br><span class="line">&#125;</span><br><span class="line">while()&#123;</span><br><span class="line">&#125;</span><br><span class="line">do&#123;</span><br><span class="line">&#125;while();</span><br></pre></td></tr></table></figure><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><blockquote><p>break</p></blockquote><blockquote><p>continue</p></blockquote><blockquote><p>return</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="声明数组："><a href="#声明数组：" class="headerlink" title="声明数组："></a>声明数组：</h3><p>数据类型[] 数组名；</p><h3 id="数组赋值："><a href="#数组赋值：" class="headerlink" title="数组赋值："></a>数组赋值：</h3><ul><li><p>数组名=new 数组类型[数组长度]；</p></li><li><p>数组名=new 数组类型[]{数据1，数据2，…}；</p></li></ul><h3 id="数组进行初始化"><a href="#数组进行初始化" class="headerlink" title="数组进行初始化"></a>数组进行初始化</h3><ul><li>a:动态初始化 只指定长度，由系统给出初始化值<ul><li>int[] arr = new int[5];         </li></ul></li><li>b:静态初始化 给出初始化值，由系统决定长度 <ul><li>int[] arr = new int[]{1,2,3,4,5};</li><li>简写：int[] arr = {1,2,3,4,5};</li></ul></li><li>c 不能动静结合的初始化 如int[] arr = new int[5]{1,2,3,4,5};编译不会通过<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">int</span>[] arr =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span> arr =<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//静态初始化</span></span><br><span class="line"><span class="keyword">int</span> arr =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//错误的表示编译报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="二维、多维数组"><a href="#二维、多维数组" class="headerlink" title="二维、多维数组"></a>二维、多维数组</h3><blockquote><p>int[][] arr=new int[m][n];</p></blockquote><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li>冒泡排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;      </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j+<span class="number">1</span> &lt; arr.length-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp =arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>*选择排序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp =arr[i];</span><br><span class="line">            arr[i] =arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><pre><code>定义：    声明：大括号前面的内容    内容：大括号里面的内容修饰符 返回类型 方法名（参数类型 参数1，参数类型 参数2....）{//return  ;//当返回类型为void 是可以省略，可以不带值return 返回值；//返回值的类型必须与返回类型匹配}</code></pre><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol><li>面向过程:<br>一步一步的执行 强调过程</li><li>面向对象:<br>是一种思想基于面向过程的</li></ol><blockquote><p>将过程封装起来<br>是一种更符合我们思考习惯的思想<br>复杂变简单<br>执行者变成指挥者</p></blockquote><h3 id="Java语言最基本的单位-类"><a href="#Java语言最基本的单位-类" class="headerlink" title="Java语言最基本的单位-类"></a>Java语言最基本的单位-类</h3><ul><li>类：是一组相关的属性和行为的集合</li><li>对象：就是该事物的具体体现</li></ul><h3 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h3><ol><li>封装<blockquote><p>将不需要对外提供的内容都隐藏起来</p></blockquote></li><li>继承</li><li>多态</li></ol><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote><p>与类名一致 不写返回值类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;<span class="comment">//构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javaBean规范"><a href="#javaBean规范" class="headerlink" title="javaBean规范"></a>javaBean规范</h3><blockquote><p>空参构造</p></blockquote><blockquote><p>属性私有化</p></blockquote><blockquote><p>提供setXXX(…)     getXXX() </p></blockquote><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><blockquote><p>应用程序接口</p></blockquote><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String(String original)</span><br><span class="line">String(<span class="keyword">char</span>[] value)</span><br><span class="line">String(<span class="keyword">char</span>[],<span class="keyword">int</span> index,<span class="keyword">int</span> count)<span class="comment">//把字符数组的一部分变成字符串对象</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串的内容存储在方法区的常量池中的，方便字符串的重复使用</p></blockquote><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span>:比较字符串的内容是否相同</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String str)</span>:比较字符串的内容是否相同,忽略大小写</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span>:判断字符串对象是否以指定的str开头</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span>:判断字符串对象是否以指定的str结尾</span></span><br></pre></td></tr></table></figure><h4 id="StringBulider类"><a href="#StringBulider类" class="headerlink" title="StringBulider类"></a>StringBulider类</h4><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><blockquote><p>可以把数据存储到文件也可以从文件中读取数据</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>按方向：<ul><li>输入流</li><li>输出流</li></ul></li><li>按功能：<ul><li>节点流</li><li>处理流</li></ul></li><li>按数据<ul><li>字节流</li><li>字符流<h3 id="FileWriter-类"><a href="#FileWriter-类" class="headerlink" title="FileWriter 类"></a>FileWriter 类</h3><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileWriter(File file)</span><br><span class="line">FileWriter(String fileName)</span><br><span class="line">FileWriter(String fileName,<span class="keyword">boolean</span> flag) <span class="comment">//flag表示是否在文件末尾追加写入 默认false</span></span><br></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">write(String str) <span class="comment">//写字符串</span></span><br><span class="line">wirte(String str,<span class="keyword">int</span> index,<span class="keyword">int</span> len)</span><br><span class="line">write(<span class="keyword">char</span> ch)</span><br><span class="line">wirte(<span class="keyword">char</span> ch,<span class="keyword">int</span> index,<span class="keyword">int</span> len)</span><br><span class="line">flush() <span class="comment">//刷新</span></span><br><span class="line">close() <span class="comment">//关闭流释放资源，流将不能再使用了</span></span><br></pre></td></tr></table></figure><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>创建对象，关联文件</li><li>调用输出流对象的写数据方法write(String str)</li><li>关闭资源<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line">FileWrite fw =<span class="keyword">new</span> FileWriter(<span class="string">"D:\\a.txt"</span>);</span><br><span class="line">fw.write(<span class="string">"IO流"</span>);</span><br><span class="line">fw.close();</span><br></pre></td></tr></table></figure></li></ol><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><pre><code>window : \r\nlinux :\nmax :\r</code></pre><h3 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h3><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileReader(Flie flie)</span><br><span class="line">FileReader(String fileName)</span><br></pre></td></tr></table></figure><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">close()</span><br></pre></td></tr></table></figure><h4 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>创建输入流对象</li><li>调用输人流对象的读数据方法read()</li><li>关闭释放资源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">FileReader fr =new FileReader (&quot;D:\\a.txt&quot;);</span><br><span class="line">int a = fr.read();</span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure></li></ol><h3 id="BufferedWriter-类-高效的写字符输出流"><a href="#BufferedWriter-类-高效的写字符输出流" class="headerlink" title="BufferedWriter 类 高效的写字符输出流"></a>BufferedWriter 类 高效的写字符输出流</h3><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter(FileWriter fileWriter)</span><br></pre></td></tr></table></figure><h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write(String s)</span><br><span class="line">flush();</span><br><span class="line">close()</span><br><span class="line">newLine(); <span class="comment">//写一个换行符</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"a.txt"</span>));</span><br><span class="line">bw.wirte(<span class="string">"abv"</span>)</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure><h3 id="BufferedReader类-高效的文本读取"><a href="#BufferedReader类-高效的文本读取" class="headerlink" title="BufferedReader类 高效的文本读取"></a>BufferedReader类 高效的文本读取</h3><h4 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader(FileReader fr)</span><br></pre></td></tr></table></figure><h4 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read()</span><br><span class="line">flush();</span><br><span class="line">close()</span><br><span class="line">readLine() 一次读一行字符不包括换行符</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"a.txt"</span>));</span><br><span class="line"><span class="keyword">int</span> c = bw.read()</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/uncategorized/MarkDown%E8%AF%AD%E6%B3%95/"/>
      <url>/uncategorized/MarkDown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格</p><pre><code>**一个人来到田纳西**__毫无疑问__*我做的馅饼是全天下*_最好吃的_</code></pre><h2 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h2><p>代码：</p><pre><code>*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格</p><pre><code>---***___</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>xml</title>
      <link href="/javaWeb/xml/"/>
      <url>/javaWeb/xml/</url>
      <content type="html"><![CDATA[<h3 id="什么是xml"><a href="#什么是xml" class="headerlink" title="什么是xml"></a>什么是xml</h3><pre><code>可扩展标记语言</code></pre><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><pre><code>传输和存储数据软件的配置文件</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="xml语法"><a href="#xml语法" class="headerlink" title="xml语法"></a>xml语法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法:"></a>基本语法:</h4><pre><code>- XML必须有关闭标签- 区分大小写- 属性需要有引号- 标签必须正确嵌套.文档声明注释元素属性特殊字符和CDATA区</code></pre><h4 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h4><p>通常出现在xml 文档的第一行第一列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml 属性名=&quot;值&quot; ... ?&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;  ?&gt;</span><br><span class="line">* version   :必须的. 使用”1.0”</span><br><span class="line">* encoding  :字符集. 是使用浏览器打开的时候采用的默认的字符集的编码.</span><br><span class="line">* standalone    :描述XML文档是否需要依赖其他的文件.</span><br></pre></td></tr></table></figure></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre><code>&lt;!--  注释内容   --&gt;</code></pre><h4 id="元素-标签"><a href="#元素-标签" class="headerlink" title="元素(标签)"></a>元素(标签)</h4><p>命名规范</p><ol><li>字母 数字 及其他字符</li><li>不能以数字或标点符号开始</li><li>不能以字符”xml”(“XML/Xml”)开始</li><li>不能包含空格</li></ol><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><pre><code>属性的名称规范与元素一致需要引号</code></pre><h4 id="特殊字符和CDATA区"><a href="#特殊字符和CDATA区" class="headerlink" title="特殊字符和CDATA区"></a>特殊字符和CDATA区</h4><p>#####特殊字符</p><pre><code>&amp;lt; &lt; 小于 &amp;gt; &gt; 大于 &amp;amp; &amp; 和号 &amp;apos; &apos; 单引号 &amp;quot; &quot; 引号 </code></pre><h5 id="CDATA区"><a href="#CDATA区" class="headerlink" title="CDATA区"></a>CDATA区</h5><p>CDATA区中的所有内容都会被认为是字符串<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[ 内容 ]]&gt;</span><br></pre></td></tr></table></figure></p><h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><p>从xml文档中获取数据</p><h3 id="解析方式"><a href="#解析方式" class="headerlink" title="解析方式"></a>解析方式</h3><ol><li>DOM解析    Doucument Object Model</li><li>SAX解析    Simple Api for Xml</li></ol><h3 id="两种解析方式的区别"><a href="#两种解析方式的区别" class="headerlink" title="两种解析方式的区别"></a>两种解析方式的区别</h3><p>DOM:</p><pre><code>一次性将文档加载到内存形成树形结构解析优点:当文件特别大时容易内存溢出缺点:对xml进行增删改操作</code></pre><p>SAX:</p><pre><code>事件驱动方式,一行一行的解析优点:不能对文档进行增删改操作缺点:当文件特别大时不会内存溢出</code></pre><h3 id="api实现与案例"><a href="#api实现与案例" class="headerlink" title="api实现与案例"></a>api实现与案例</h3><p>针对这两种解析的方式，不同的公司提供了不同的API的实现.</p><ul><li>JAXP      :SUN公司提供的一套XML的解析的API.</li><li>JDOM      :开源组织提供了一套XML的解析的API-jdom.</li><li><code>DOM4J</code>    :开源组织提供了一套XML的解析的API-dom4j.</li><li><code>pull</code>     :主要应用在Android手机端解析XML.</li></ul><h4 id="dom4j案例代码"><a href="#dom4j案例代码" class="headerlink" title="dom4j案例代码"></a>dom4j案例代码</h4><ol><li>【步骤一】导入jar包.dom4j-1.6.1.jar</li><li>【步骤二】创建解析器</li><li>【步骤三】解析文档获得代表文档的Document对象.</li><li>【步骤四】获得跟节点.</li><li>【步骤五】从跟节点下查找其他的节点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建解析器</span></span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="comment">// 解析XML的文档</span></span><br><span class="line">Document document = reader.read(<span class="string">"xml/demo1.xml"</span>);</span><br><span class="line"><span class="comment">// 获得跟节点</span></span><br><span class="line">Element root = document.getRootElement();</span><br><span class="line">System.out.println(root.getName());</span><br><span class="line"><span class="comment">// 查找跟节点下的子节点. element() elements();</span></span><br><span class="line">Element pElement = root.element(<span class="string">"person"</span>); <span class="comment">// 查找的是第一个person元素</span></span><br><span class="line"><span class="comment">// root.elements("person").get(1); // 查找的是第二个person元素</span></span><br><span class="line">Element nElement = pElement.element(<span class="string">"name"</span>);</span><br><span class="line">Element aElement = pElement.element(<span class="string">"age"</span>);</span><br><span class="line">Element sElement = pElement.element(<span class="string">"sex"</span>);</span><br><span class="line">System.out.println(nElement.getText());</span><br><span class="line">System.out.println(aElement.getText());</span><br><span class="line">System.out.println(sElement.getText());</span><br></pre></td></tr></table></figure><h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4><p>XPath由W3C的XPath 1.0 标准描述,dom4j支持xpath</p><ul><li>jaxen-1.1-beta-6.jar</li></ul><p>dom4j的XPath支持的API:</p><ul><li>List document.selectNodes(String xPath);</li><li>Node document.selectSingleNode(String xPath);<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建解析器:</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="comment">// 解析XML返回Document对象.</span></span><br><span class="line">        Document document = reader.read(<span class="string">"xml/demo1.xml"</span>);</span><br><span class="line">        <span class="comment">/*List&lt;Node&gt; list = document.selectNodes("//name");</span></span><br><span class="line"><span class="comment">        for (Node node : list) &#123;</span></span><br><span class="line"><span class="comment">            Element element = (Element) node;</span></span><br><span class="line"><span class="comment">            System.out.println(element.getText());</span></span><br><span class="line"><span class="comment">        &#125;*/</span> </span><br><span class="line">        List&lt;Node&gt; list = document.selectNodes(<span class="string">"//person['@id']"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Node node : list) &#123;</span><br><span class="line">            Element element = (Element) node;</span><br><span class="line">            System.out.println(element.attributeValue(<span class="string">"id"</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="xml约束"><a href="#xml约束" class="headerlink" title="xml约束"></a>xml约束</h2><h3 id="XML的约束的概述"><a href="#XML的约束的概述" class="headerlink" title="XML的约束的概述:"></a>XML的约束的概述:</h3><ul><li>什么是XML的约束 :就是用来约束XML的文档中可以出现哪些标签，不能出现哪些标签，标签中是否有顺序，出现的次数.</li><li>XML的约束            :用来规范XML的写法</li></ul><p>###XML的约束的种类及区别?<br>DTD 和 Schema :</p><pre><code>区别:     1.DTD语法是自成一体的.Schema语法就是XML的语法.     2.Schema的语法就是XML的语法所以更容易被解析器所解析.     3.Schema支持名称空间.     4.Schema有比DTD更加强大的语义和语法的约束.</code></pre><h3 id="DTD的语法"><a href="#DTD的语法" class="headerlink" title="DTD的语法"></a>DTD的语法</h3><p>####DTD的引入方式:</p><ul><li>内部的DTD:<br>&lt;!DOCTYPE persons [<br>]&gt;</li></ul><ul><li><p>外部的DTD:</p><ul><li>一种本地DTD:<br>&lt;!DOCTYPE persons SYSTEM “unknown.dtd”&gt;</li><li>一种网络DTD:<br>&lt;!DOCTYPE persons PUBLIC “//UNKNOWN/“ “unknown.dtd”&gt;</li></ul></li><li><p>元素:</p><ul><li>&lt;!ELEMENT 元素名 元素类型&gt;   </li><li>元素类型:<ul><li>EMPTY</li><li>ANY</li><li>子元素</li><li>是否有序: 使用 逗号(,)或者竖线(|)表示.</li><li>出现的次数：?:零次或一次 +：一次或多次 *：零次或多次 <ul><li>PCDATA 可解析的字符串</li></ul></li></ul></li></ul></li><li>属性:<ul><li>&lt;!ATTLIST 元素名称 属性名称 属性的类型 属性的约束&gt;<ul><li>属性的类型:<ul><li>ID类型:表示属性值需要是唯一的.</li><li>CDATA类型:普通的字符串.</li><li>枚举:</li></ul></li><li>属性的约束:<ul><li>#REQUIRED 属性值是必须的</li><li>#IMPLIED 属性不是必须的</li><li>#FIXED value   属性值固定<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT persons (person*)&gt;</span><br><span class="line">&lt;!ELEMENT person (name|age|sex)*&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ATTLIST person id ID #REQUIRED&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h3 id="Schema的语法"><a href="#Schema的语法" class="headerlink" title="Schema的语法"></a>Schema的语法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    名称空间:一个XML只能引入一个DTD约束文档.使用了Schema约束XML文档,一个XML可以引入多个Schame的约束!!!</span></span><br><span class="line"><span class="comment">                      如果再多个Schema文档中定义了相同的属性名称 该怎么办?</span></span><br><span class="line"><span class="comment">      * 名称空间类似于java中的package.通过名称空间区分 标签或属性来自于哪个文档的！！！通常名称空间唯一的不重复的即可.一般情况下使用一个URL地址表示一个名称空间.</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">    xmlns               :xml name sapace .代表当前的文档应用的名称空间.</span></span><br><span class="line"><span class="comment">    targetNameSpace     :目标名称空间.</span></span><br><span class="line"><span class="comment">    elementFormDefault  :</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">targetNamespace</span>=<span class="string">"http://www.itheima.com/ee25"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复杂标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"persons"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 复杂类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sequence</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 简单标签 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
            <tag> javaWeb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网站主题设置</title>
      <link href="/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/"/>
      <url>/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><ol><li>修改 <code>_layout.swig</code><br> 主题文件下/layout/_layout.swig<br> 在 &lt;\/body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;</span><br><span class="line">color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改主题配置文件<br> 打开 主题下的_config.yml,在里面添加如下代码：(可以放在最后面)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># --------------------------------------------------------------</span><br><span class="line"># background settings</span><br><span class="line"># --------------------------------------------------------------</span><br><span class="line"># add canvas-nest effect</span><br><span class="line"># see detail from https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure></li></ol><h3 id="主页文章阴影效果"><a href="#主页文章阴影效果" class="headerlink" title="主页文章阴影效果"></a>主页文章阴影效果</h3><pre><code>打开\themes\next\source\css\_custom\custom.styl,向里面加入：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="在网站底部加上访问量"><a href="#在网站底部加上访问量" class="headerlink" title="在网站底部加上访问量"></a>在网站底部加上访问量</h3><p>编辑 主题配置文件 中的busuanzi_count的配置项。</p><p>当enable: true时，代表开启全局开关。若site_uv、site_pv、page_pv的值均为false时，不蒜子仅作记录而不会在页面上显示。</p><p>\themes\next\layout_partials\footer.swig文件,在copyright前加上画红线这句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后添加显示统计的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 放在&lt;div class=&quot;powered-by&quot;&gt; 前--&gt;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="首页只显示文章部分"><a href="#首页只显示文章部分" class="headerlink" title="首页只显示文章部分"></a>首页只显示文章部分</h2><p>   修改 _config.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">    enable: true</span><br><span class="line">    length: 150</span><br></pre></td></tr></table></figure></p><h2 id="页脚元素居中"><a href="#页脚元素居中" class="headerlink" title="页脚元素居中"></a>页脚元素居中</h2><pre><code>修改your blog\themes\next\source\css\schemes\Mist\index.styl文件，将.footer-inner中的text-align: left;修改为text-align: center;即可。</code></pre><h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><pre><code>修改文件 themes\next\source\css\_common\components\post\post.styl ，在末尾添加如下css样式，：</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="blog文章书写开头格式"><a href="#blog文章书写开头格式" class="headerlink" title="blog文章书写开头格式"></a>blog文章书写开头格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">title: # 文章标题</span><br><span class="line">author: # 作者</span><br><span class="line">tags: </span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">categories: </span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">description: # 描述，首页文章显示的摘要</span><br><span class="line">date: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="关闭侧边栏设置"><a href="#关闭侧边栏设置" class="headerlink" title="关闭侧边栏设置"></a>关闭侧边栏设置</h2><p>在\source\js\src\motion.js里自行写实现该效果的js方法（当然也可以放在页面其他js文件里面）：</p><p>这里贴一个实现此需求的js方法：</p><p>// $(‘.sidebar-inner’).css({‘height’:’100%’});<br>$(‘body’).on(‘click’,function(e){<br>    var bSidebarShow = $(‘#sidebar’).css(‘display’)===’block’ &amp;&amp; $(‘#sidebar’).width() &gt; 0;<br>    var bFlag = $(e.target).parents(‘#sidebar,.sidebar-toggle’).length &gt; 0;<br>    if(bSidebarShow &amp;&amp; !bFlag){<br>        $(‘.sidebar-toggle-line-wrap’).trigger(‘click’);<br>        e.preventDefault();<br>    }<br>});</p><h2 id="侧边栏居左"><a href="#侧边栏居左" class="headerlink" title="侧边栏居左"></a>侧边栏居左</h2><ol><li>修改 source\js\src\motion.js<br>使用Ctrl+F查找paddingRight 把其修改为paddingLeft就可以了</li><li>source\css_custom下为custom.styl添加内容<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.sidebar-toggle</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>把back-to-top这个按钮留在了右侧<br>如果你偏向一并放在左侧 添加以下css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.back-to-top</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>修改箭头动画方向<br>修改motion.js文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sidebarToggleLine1st = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-first'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'60%'</span>, <span class="attr">rotateZ</span>: <span class="string">'45deg'</span>, <span class="attr">top</span>: <span class="string">'2px'</span>, <span class="attr">left</span>: <span class="string">'50%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">rotateZ</span>: <span class="string">'-45deg'</span>, <span class="attr">top</span>: <span class="string">'5px'</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sidebarToggleLine2nd = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-middle'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'90%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sidebarToggleLine3rd = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-last'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'60%'</span>, <span class="attr">rotateZ</span>: <span class="string">'-45deg'</span>, <span class="attr">top</span>: <span class="string">'-2px'</span>, <span class="attr">left</span>: <span class="string">'50%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">rotateZ</span>: <span class="string">'45deg'</span>, <span class="attr">top</span>: <span class="string">'-5px'</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>不能调整透明<br>就把motion.js中选择的两个body改成了.container<br>NexT.utils.isDesktop() &amp;&amp; $(‘.container’).velocity(‘stop’)</p><h2 id="侧栏背景图以及内部文字颜色的修改"><a href="#侧栏背景图以及内部文字颜色的修改" class="headerlink" title="侧栏背景图以及内部文字颜色的修改"></a>侧栏背景图以及内部文字颜色的修改</h2><p>在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>:<span class="built_in">url</span>(图片链接);</span><br><span class="line">            <span class="attribute">background-size</span>: cover;</span><br><span class="line">            <span class="attribute">background-position</span>:center;</span><br><span class="line">            <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">            p,span,a &#123;color: 颜色代码;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="滑动的menu"><a href="#滑动的menu" class="headerlink" title="滑动的menu"></a>滑动的menu</h2><h2 id="menu中的搜索"><a href="#menu中的搜索" class="headerlink" title="menu中的搜索"></a>menu中的搜索</h2><pre><code>LocalSearch搜索安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：$ npm install hexo-generator-searchdb --save编辑 站点配置文件，新增以下内容到任意位置：search:  path: search.xml  field: post  format: html  limit: 10000编辑 主题配置文件，启用本地搜索功能： Local searchlocal_search:  enable: true</code></pre>]]></content>
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blog网站搭建</title>
      <link href="/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
      <url>/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>Node.js</li><li>Git</li><li>Hexo</li><li>github账号</li></ol><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>直接到<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git官网</a> 下载安装即可</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><blockquote><p>  什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h3 id="安装好Node-js与Git-执行命令"><a href="#安装好Node-js与Git-执行命令" class="headerlink" title="安装好Node.js与Git 执行命令"></a>安装好Node.js与Git 执行命令</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>随便建一个文件夹，名字随便取，博主取其名为blog，cd 到文件夹里，先安装必要的文件，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init  # hexo会在目标文件夹建立网站所需要的所有文件</span><br><span class="line">npm install  # 安装依赖包</span><br></pre></td></tr></table></figure></p><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>有了必要的各种配置文件之后就可以在本地预览效果了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 等同于hexo generate，生成静态文件</span><br><span class="line">hexo s # 等同于hexo server，在本地服务器运行</span><br></pre></td></tr></table></figure></p><p>打开浏览器并输入IP地址 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看</p><h3 id="简单的命令"><a href="#简单的命令" class="headerlink" title="简单的命令"></a>简单的命令</h3><p>总结一下简单的使用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder] # 初始化一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站</span><br><span class="line">hexo new [layout] &lt;title&gt; # 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来</span><br><span class="line">hexo version # 查看版本</span><br><span class="line">hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g # 等于hexo generate # 生成静态文件</span><br><span class="line">hexo s # 等于hexo server # 本地预览</span><br><span class="line">hexo d # 等于hexo deploy # 部署，可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure></p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><h3 id="git克隆"><a href="#git克隆" class="headerlink" title="git克隆"></a>git克隆</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可<br>使用git克隆最新版next主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开站点配置文件， 找到 theme 字段，并将其值更改为 next<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><p>然后 hexo s 即可预览主题效果</p><h3 id="更换主题外观"><a href="#更换主题外观" class="headerlink" title="更换主题外观"></a>更换主题外观</h3><p>NexT有三个外观，博主用的是 Muse，直接更改主题配置文件的 scheme 参数即可，如果显示的是繁体中文，那么站点配置文件中的 language: zh-CN<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br></pre></td></tr></table></figure></p><h2 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h2><h2 id="部署到Github与Coding"><a href="#部署到Github与Coding" class="headerlink" title="部署到Github与Coding"></a>部署到Github与Coding</h2><h3 id="在此之前，先安装Git部署插件"><a href="#在此之前，先安装Git部署插件" class="headerlink" title="在此之前，先安装Git部署插件"></a>在此之前，先安装Git部署插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="打开站点配置文件，拉到底部，修改部署配置："><a href="#打开站点配置文件，拉到底部，修改部署配置：" class="headerlink" title="打开站点配置文件，拉到底部，修改部署配置："></a>打开站点配置文件，拉到底部，修改部署配置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:masteranthoneyd/masteranthoneyd.github.io.git,master</span><br><span class="line">    coding: git@git.coding.net:ookamiantd/ookamiantd.git,master</span><br></pre></td></tr></table></figure><h3 id="终端执行"><a href="#终端执行" class="headerlink" title="终端执行"></a>终端执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2>]]></content>
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
