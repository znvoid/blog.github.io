<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Maven项目打包</title>
      <link href="/Maven/Maven%E6%89%93%E5%8C%85/"/>
      <url>/Maven/Maven%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="Maven项目打包"><a href="#Maven项目打包" class="headerlink" title="Maven项目打包"></a>Maven项目打包</h1><blockquote><p> maven常用的普通打包方式分为pom,jar,war等</p><p> 如果不进行特殊配置，那么打包出来的jar包是不可运行的。只能当作普通依赖包使用</p></blockquote><h2 id="maven的两种可运行jar打包方式"><a href="#maven的两种可运行jar打包方式" class="headerlink" title="maven的两种可运行jar打包方式"></a>maven的两种可运行jar打包方式</h2><h3 id="内置依赖"><a href="#内置依赖" class="headerlink" title="内置依赖"></a>内置依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 内置打包法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">manifest</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.znvoid.Appliction<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">archive</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外置打包"><a href="#外置打包" class="headerlink" title="外置打包"></a>外置打包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classesDirectory</span>&gt;</span>target/classes/<span class="tag">&lt;/<span class="name">classesDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.znvoid.Appliction<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包时 MANIFEST.MF文件不记录的时间戳版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useUniqueVersions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useUniqueVersions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>.<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includeTypes</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">includeTypes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useUniqueVersions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useUniqueVersions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">              $&#123;project.build.directory&#125;/lib</span><br><span class="line">            <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springboot-项目配置和依赖外置打包方式"><a href="#springboot-项目配置和依赖外置打包方式" class="headerlink" title="springboot 项目配置和依赖外置打包方式"></a>springboot 项目配置和依赖外置打包方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--打包jar--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--不打包资源文件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>META-INF/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>com/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;excludes&gt;</span></span><br><span class="line"><span class="comment">                        &lt;exclude&gt;*.**&lt;/exclude&gt;</span></span><br><span class="line"><span class="comment">                        &lt;exclude&gt;*/*.xml&lt;/exclude&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/excludes&gt; --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--MANIFEST.MF 中 Class-Path 加入前缀--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--jar包不包含唯一版本标识--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">useUniqueVersions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useUniqueVersions</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--指定入口类--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.znvoid.Appliction<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--MANIFEST.MF 中 Class-Path 加入资源文件目录--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>./config/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--拷贝依赖 copy-dependencies--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                                $&#123;project.build.directory&#125;/lib/</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--拷贝资源文件 copy-resources--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring boot repackage，依赖 maven-jar-plugin 打包的jar包 重新打包成 spring boot 的jar包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--重写包含依赖，包含不存在的依赖，jar里没有pom里的依赖--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>null<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>null<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--使用外部配置文件，jar包里没有资源文件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--配置jar包特殊标识 配置后，保留原文件，生成新文件 *-run.jar --&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--配置jar包特殊标识 不配置，原文件命名为 *.jar.original，生成新文件 *.jar --&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- &lt;classifier&gt;run&lt;/classifier&gt; --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis介绍</title>
      <link href="/%E6%A1%86%E6%9E%B6/mybatis/"/>
      <url>/%E6%A1%86%E6%9E%B6/mybatis/</url>
      <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的<br>JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口<br>和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录</p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ol><li><p>maven导入依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建核心配置文件sqlMapConfig.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line">    <span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">            PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">            "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 初始化环境，和spring整合以后，这个将会被废除 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 使用jdbc管理事务，事务控制是由mybatis来执行 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据源 也是由mybatis来进行管理--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.driver&#125;"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.url&#125;"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.username&#125;"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.password&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 引入映射文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"user.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#db.properties文件</span><br><span class="line"></span><br><span class="line">db.driver=com.mysql.jdbc.Driver</span><br><span class="line">db.url=jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8</span><br><span class="line">db.username=root</span><br><span class="line">db.password=</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建映射配置文件xxx.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace是命名空间，用来隔离sql语句，可以随意定义，</span></span><br><span class="line"><span class="comment">注意：在使用代理时具有特殊的约定含义，不能随意定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.znvoid.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByUsername"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.znvoid.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE username like #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.znvoid.User"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        INSERT into user(username,birthday,sex,address)VALUES (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.znvoid.User"</span>&gt;</span></span><br><span class="line">        UPDATE user set username=#&#123;username&#125;,address=#&#123;address&#125; WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>java代码</p><ol><li><p>pojo类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", birthday="</span></span><br><span class="line">                + birthday + <span class="string">", sex="</span> + sex + <span class="string">", address="</span> + address + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory=<span class="keyword">null</span>;</span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//初始化sqlSessionFactory对象</span></span><br><span class="line">    sqlSessionFactory= <span class="keyword">new</span>  SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">    User user = session.selectOne(<span class="string">"user.getUserById"</span>, <span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByUsername</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">    User user = session.selectOne(<span class="string">"user.getUserByUsername"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"tom1"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setSex(<span class="string">"1"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"纽约"</span>);</span><br><span class="line">    session.insert(<span class="string">"user.insertUser"</span>,user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.commit();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">29</span>);</span><br><span class="line">    user.setUsername(<span class="string">"jack"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setSex(<span class="string">"1"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"诶级"</span>);</span><br><span class="line">    session.update(<span class="string">"user.updateUser"</span>,user);</span><br><span class="line">    session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="mybatis架构"><a href="#mybatis架构" class="headerlink" title="mybatis架构"></a>mybatis架构</h2><p><img src="https://20-1257099060.cos.ap-chengdu.myqcloud.com/myabyis/mybatis架构.png" alt="mybatis架构图"></p><p>1、两类配置文件 （核心的配置文件 SqlMapconfig.xml  \XX Maper.xml）</p><p>2、通过一个SqlSessionFactoryBuilder 对象的一个build方法 加载以上配置文件（核心配置文件）得到一个SqlSessionFactory</p><p>3、通过 得到一个SqlSessionFactory的openSession方法 得到SqlSession 对象</p><p>4、通过SqlSession 通过一个Executor执行器执行我们叫MappedSttement对象（输入映射和输出映射）操作数据库</p><h2 id="mybatis基于mapper代理开发方式"><a href="#mybatis基于mapper代理开发方式" class="headerlink" title="mybatis基于mapper代理开发方式"></a>mybatis基于mapper代理开发方式</h2><h3 id="Mapper接口规范"><a href="#Mapper接口规范" class="headerlink" title="Mapper接口规范"></a>Mapper接口规范</h3><p>Mapper接口开发需要遵循以下规范：</p><ol><li>Mapper.xml文件中的namespace与mapper接口的类路径相同。</li><li>Mapper接口方法名和Mapper.xml中定义的每个statement的id相同 </li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li></ol><h3 id="Mapper-xml-映射文件"><a href="#Mapper-xml-映射文件" class="headerlink" title="Mapper.xml(映射文件)"></a>Mapper.xml(映射文件)</h3><blockquote><p>定义mapper映射文件UserMapper.xml（内容同Users.xml），需要修改namespace的值为 UserMapper接口路径。将UserMapper.xml放在classpath 下mapper目录 下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.znvoid.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据id获取用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.znvoid.mybatis.po.User"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Mapper-java-接口文件"><a href="#Mapper-java-接口文件" class="headerlink" title="Mapper.java(接口文件)"></a>Mapper.java(接口文件)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理mapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Public <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">//根据用户id查询用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//查询用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">//添加用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span><span class="keyword">throws</span> Exception</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口定义有如下特点：<br>1、Mapper接口方法名和Mapper.xml中定义的statement的id相同<br>2、Mapper接口方法的输入参数类型和mapper.xml中定义的statement的parameterType的类型相同<br>3、Mapper接口方法的输出参数类型和mapper.xml中定义的statement的resultType的类型相同</p><h3 id="加载UserMapper-xml文件"><a href="#加载UserMapper-xml文件" class="headerlink" title="加载UserMapper.xml文件"></a>加载UserMapper.xml文件</h3><p>修改SqlMapConfig.xml文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//mybatis配置文件</span></span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//使用SqlSessionFactoryBuilder创建sessionFactory</span></span><br><span class="line">sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function">Public <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//获取session</span></span><br><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//获取mapper接口的代理对象</span></span><br><span class="line">UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用代理对象方法</span></span><br><span class="line">User user = userMapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">//关闭session</span></span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web service</title>
      <link href="/JavaWeb/Web_Service-CXF/"/>
      <url>/JavaWeb/Web_Service-CXF/</url>
      <content type="html"><![CDATA[<h1 id="web-service"><a href="#web-service" class="headerlink" title="web service"></a>web service</h1><h2 id="CXF"><a href="#CXF" class="headerlink" title="CXF"></a>CXF</h2><blockquote><p>主流web server 框架</p></blockquote><h3 id="JAX-WS"><a href="#JAX-WS" class="headerlink" title="JAX-WS"></a>JAX-WS</h3><blockquote><p>传输的数据格式是XML 基于SOAP协议</p></blockquote><h3 id="Spring整合"><a href="#Spring整合" class="headerlink" title="Spring整合"></a>Spring整合</h3><ol><li>配置 web.xml Spring 配置文件加载、环境初始化</li><li>导入实体类、Service</li><li>配置 spring cxf 服务发布<br> 引入名称空间<br> xmlns:jaxws=”<a href="http://cxf.apache.org/jaxws&quot;" target="_blank" rel="noopener">http://cxf.apache.org/jaxws&quot;</a><br> <a href="http://cxf.apache.org/jaxws" target="_blank" rel="noopener">http://cxf.apache.org/jaxws</a> <a href="http://cxf.apache.org/schemas/jaxws.xsd" target="_blank" rel="noopener">http://cxf.apache.org/schemas/jaxws.xsd</a></li></ol><h3 id="JAX-RS"><a href="#JAX-RS" class="headerlink" title="JAX-RS"></a>JAX-RS</h3><blockquote><p>传输xml格式或JSON格式，基于HTTP协议</p></blockquote>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache POI对Excel文件读取</title>
      <link href="/JavaWeb/Apache-POI/"/>
      <url>/JavaWeb/Apache-POI/</url>
      <content type="html"><![CDATA[<h1 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h1><blockquote><p>excel文件读取<br>HSSF 解析Excel97-2007<br>XSSF 解析Excel2007以后的版本</p></blockquote><h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p>poi.jar 解析HSSF<br>poi-ooxml.jar 解析XSSF</p><p>Maven 坐标</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;    &lt;artifactId&gt;poi&lt;/artifactId&gt;    &lt;version&gt;${poi.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;    &lt;version&gt;${poi.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;    &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;    &lt;version&gt;${poi.version}&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>加载Excel文件对象</li><li>读取一个sheet</li><li>读取表格中的每一行Row 对象</li><li>遍历获取单元格对象Cell</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于.xls 格式解析 HSSF</span></span><br><span class="line">    <span class="comment">// 1、 加载Excel文件对象</span></span><br><span class="line">HSSFWorkbook hssfWorkbook = <span class="keyword">new</span> HSSFWorkbook(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">    <span class="comment">// 2、 读取一个sheet</span></span><br><span class="line">    HSSFSheet sheet = hssfWorkbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 3、 读取sheet中每一行</span></span><br><span class="line">    <span class="keyword">for</span> (Row row : sheet) &#123;</span><br><span class="line">        <span class="comment">// 一行数据 对应 一个区域对象</span></span><br><span class="line">        <span class="keyword">if</span> (row.getRowNum() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 第一行 跳过</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 跳过空行</span></span><br><span class="line">        <span class="keyword">if</span> (row.getCell(<span class="number">0</span>) == <span class="keyword">null</span></span><br><span class="line">                || StringUtils.isBlank(row.getCell(<span class="number">0</span>).getStringCellValue())) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据处理</span></span><br><span class="line">        Area area = <span class="keyword">new</span> Area();</span><br><span class="line">        area.setId(row.getCell(<span class="number">0</span>).getStringCellValue());</span><br><span class="line">        area.setProvince(row.getCell(<span class="number">1</span>).getStringCellValue());</span><br><span class="line">        area.setCity(row.getCell(<span class="number">2</span>).getStringCellValue());</span><br><span class="line">        area.setDistrict(row.getCell(<span class="number">3</span>).getStringCellValue());</span><br><span class="line">        area.setPostcode(row.getCell(<span class="number">4</span>).getStringCellValue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="额外-jQuery-ocupload-文件上传"><a href="#额外-jQuery-ocupload-文件上传" class="headerlink" title="额外-jQuery-ocupload 文件上传"></a>额外-jQuery-ocupload 文件上传</h2><blockquote><p>一键文件上传，隐藏form和iframe实现<br>库文件jquery.ocupload.js</p></blockquote><ol><li>在页面提供任意元素</li><li>在页面加载完成后调用upload方法(url,提交的参数名称)</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上传"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $(function()&#123;</span></span><br><span class="line"><span class="undefined">        $("#btn").upload(&#123;</span></span><br><span class="line"><span class="undefined">            action:"",</span></span><br><span class="line"><span class="undefined">            name:""</span></span><br><span class="line"><span class="undefined">        &#125;)；</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Apache POI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EasyUI</title>
      <link href="/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/EasyUI/"/>
      <url>/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/EasyUI/</url>
      <content type="html"><![CDATA[<h1 id="EasyUI"><a href="#EasyUI" class="headerlink" title="EasyUI"></a>EasyUI</h1><blockquote><p>jQuery EasyUI是一组基于jQuery的UI插件集合<br>下载地址：<a href="http://www.jeasyui.com/download/list.php" target="_blank" rel="noopener">下载</a><br>如果 jQuery EasyUI 不用于商业用途，下载免费版，用于商业开发 购买收费版</p></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://20-1257099060.cos.ap-chengdu.myqcloud.com/easyui/目录结构.png" alt="目录结构"></p><h2 id="项目导入easyUI"><a href="#项目导入easyUI" class="headerlink" title="项目导入easyUI"></a>项目导入easyUI</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 jquery 核心类库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>= <span class="string">“</span> <span class="attr">.</span>/<span class="attr">js</span>/<span class="attr">jquery-1.8.3.js</span>"&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 导入 easyui 类库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>= <span class="string">“</span> <span class="attr">.js</span>/<span class="attr">easyui</span>/<span class="attr">jquery.easyui.min.js</span>"&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 导入默认主题 <span class="attr">CSS</span> 文件<span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">id</span>=<span class="string">"easyuiTheme"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>= <span class="string">“</span> <span class="attr">.js</span>/<span class="attr">easyui</span>/<span class="attr">themes</span>/<span class="attr">default</span>/<span class="attr">easyui.css</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 导入图标 <span class="attr">CSS</span> 文件<span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>= <span class="string">“</span> <span class="attr">.js</span>/<span class="attr">easyui</span>/<span class="attr">themes</span>/<span class="attr">icon.css</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 导入国际化信息文件<span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>= <span class="string">“</span> <span class="attr">.</span>/<span class="attr">js</span>/<span class="attr">easyui</span>/<span class="attr">locale</span>/<span class="attr">easyui-lang-zh_CN.js</span>"</span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="控件介绍"><a href="#控件介绍" class="headerlink" title="控件介绍"></a>控件介绍</h2><h3 id="主页布局方案-layout"><a href="#主页布局方案-layout" class="headerlink" title="主页布局方案 layout"></a>主页布局方案 layout</h3><p>这个布局容器,有五个区域:北、南、东、西和中心。 他中心地区面板是必需的,<br>但是边缘地区面板是可选的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>layout布局页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery-1.8.3.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/easyui/jquery.easyui.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/easyui/locale/easyui-lang-zh_CN.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../js/easyui/themes/default/easyui.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../js/easyui/themes/icon.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"easyui-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'north',title:'管理系统'"</span> <span class="attr">style</span>=<span class="string">"height: 100px;"</span>&gt;</span>北部区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'west'"</span> <span class="attr">style</span>=<span class="string">"width: 100px;"</span>&gt;</span>西部区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'center'"</span>&gt;</span>中部区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'east'"</span> <span class="attr">style</span>=<span class="string">"width: 80px;"</span>&gt;</span>东部区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'south'"</span> <span class="attr">style</span>=<span class="string">"height: 80px;"</span>&gt;</span>南部区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折叠面板-accordion"><a href="#折叠面板-accordion" class="headerlink" title="折叠面板 accordion"></a>折叠面板 accordion</h3><ol><li>对折叠面板区域 div 设置 class=”easyui-accordion”</li><li>在区域添加多个 div， 每个 div 就是一个面板 （每个面板一定设置 title 属性）</li><li>设置面板属性 fit 为 true，自适应父容器大小</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'west',title:'菜单导航'"</span> <span class="attr">style</span>=<span class="string">"width: 180px;"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--折叠面板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"easyui-accordion"</span> <span class="attr">data-options</span>=<span class="string">"fit:true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"title:'基础菜单'"</span>&gt;</span>面板一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"title:'系统菜单'"</span>&gt;</span>面板二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选项卡面板tabs"><a href="#选项卡面板tabs" class="headerlink" title="选项卡面板tabs"></a>选项卡面板tabs</h3><ol><li>对选项卡面板区域 div 设置 class=”easyui-tabs”</li><li>对选项卡面板区域添加多个 div，每个 div 就是一个选项卡（每个面板一定设置 title）</li><li>设置面板 fit 为 true ，自适应父容器大小</li><li>设置选项卡 closable 为 true ，添加可关闭按钮</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 选项卡面板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mytabs"</span> <span class="attr">class</span>=<span class="string">"easyui-tabs"</span> <span class="attr">data-options</span>=<span class="string">"fit:true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"title:'选项卡面板一',closable:true"</span>&gt;</span>选项卡面板一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"title:'选项卡面板二'"</span>&gt;</span>选项卡面板二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="menu-菜单"><a href="#menu-菜单" class="headerlink" title="menu 菜单"></a>menu 菜单</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 菜单 初始化都是隐藏的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span> <span class="attr">class</span>=<span class="string">"easyui-menu"</span> <span class="attr">style</span>=<span class="string">"width:120px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>关闭当前窗口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>关闭其它窗口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-sep"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- 分隔线 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--菜单项添加图标 通过 iconCls 属性指定图标样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-cancel'"</span>&gt;</span>关闭全部窗口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在选项卡右键显示菜单,用onContextMenu事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对选项卡注册 右键事件</span></span><br><span class="line">$(<span class="string">"#mytabs"</span>).tabs(&#123;</span><br><span class="line">    onContextMenu: <span class="function"><span class="keyword">function</span>(<span class="params">e, title,index</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 阻止默认菜单显示</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="comment">// 显示自定义右键菜单</span></span><br><span class="line">        $(<span class="string">"#menu"</span>).menu(<span class="string">'show'</span>,&#123;</span><br><span class="line">            left : e.pageX,</span><br><span class="line">            top : e.pageY</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><ol><li><p>在页面提供超链接 ，设置 class=”easyui-menubutton”</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-menubutton"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-save'"</span>&gt;</span></span><br><span class="line">    系统菜单</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写子菜单 div 元素</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mm"</span> <span class="attr">style</span>=<span class="string">"width: 120px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu-sep"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>菜单四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置下拉菜单超链接 menu 属性，指向下拉菜单 div 的 id</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-menubutton"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-save',menu:'#mm'"</span>&gt;</span></span><br><span class="line">    系统菜单</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><table><thead><tr><th>名称</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>$.messager.show</td><td>options</td><td>显示一个消息窗口在屏幕底部。选项参数是一个配置对象:<br>showType: 定义了如何将显示消息窗口。可用值: null,slide,fade,show. 默认为slide。<br>showSpeed: 定义了时间在毫秒完成显示消息窗口。默认值为600。<br>width: 定义消息窗口的宽度。默认值为250。<br>height: 定义消息窗口的高度。默认值为100。<br>title: 标题文本显示在标题面板。<br>msg: 消息文本显示。<br>style: 定义了自定义dpecification风格为消息窗口。<br>timeout: 如果定义为0,消息窗口不会关闭,除非用户关闭它。对unzero定义,消息窗口将自动关闭当超时。默认为4秒。<br> 代码示例:<br><br><code>$.messager.show</code>({<br>  title:’My Title’,<br>  msg:’Message will be closed after 5 seconds.’,<br>  timeout:5000,<br>  showType:’slide’<br>  });<br>  <br>// 显示消息窗口顶部中心 <br><code>$.messager.show</code>({<br>  title:’My Title’,<br>  msg:’Message will be closed after 4 seconds.’,<br>  showType:’show’,<br>  style:{<br>    right:’’,<br>    top:document.body.scrollTop+document.documentElement.scrollTop,<br>    bottom:’’<br>  }<br>  });</td></tr><tr><td>$.messager.alert</td><td>title, msg, icon, fn</td><td>显示一个警告窗口。参数:<br>title: 标题文本显示在标题面板。<br>msg: 消息文本显示。<br>icon: 形象的图标将显示。可用值是:error,question,info,warning.<br>fn: 这个回调函数窗口关闭时触发。<br> 代码示例:<br><code>$.messager.alert</code>(‘My Title’,’Here is a info message!’,’info’);<br></td></tr><tr><td>$.messager.confirm</td><td>title, msg, fn</td><td>显示一个确认消息窗口,可以取消按钮。参数:<br>title: 标题文本显示在标题面板。<br>msg: 消息文本显示。<br>fn(b): 回调函数,当用户单击Ok按钮,通过true函数,否则通过false来它。<br> 代码示例:<br><br><code>$.messager.confirm</code>(‘Confirm’, ‘Are you sure to exit this system?’, function(r){if (r){ // exit action; } });<br></td></tr><tr><td>$.messager.prompt</td><td>title, msg, fn</td><td>显示一个消息窗口,可以取消按钮提示用户输入一些文本。参数:<br>title: 标题文本显示在标题面板。<br>msg: 消息文本显示。<br>fn(val): 这个回调函数值与用户输入的参数。<br>代码示例:<br><br>$.messager.prompt(‘Prompt’, ‘Please enter your name:’, function(r){if (r){ alert(‘Your name is:’ + r); }});<br></td></tr><tr><td>$.messager.progress</td><td>options or method</td><td>显示一个进度消息窗口。<br>这个选项被定义为:<br>title: 标题文本显示在标题面板,默认”。<br>msg: 消息框体文字,默认”。<br>text: 文本显示在进度条,默认未定义。<br>interval: 时间以毫秒为单位的长度之间的每一次进步都更新,默认300。<br><br>该方法被定义为:<br>bar: 得到progressbar对象。<br>close: 关闭进度窗口。<br><br>代码示例:<br><br>显示进度信息窗口。<br><br><code>$.messager.progress();</code>   现在关闭消息窗口。<br><code>$.messager.progress(&#39;close&#39;);</code><br></td></tr></tbody></table><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><blockquote><p>继承 <code>$.fn.panel.defaults</code>.重写默认方法 <code>$.fn.window.defaults</code>.<br>窗口是一个浮动和拖拽面板,可以用作应用程序窗口。默认情况下,窗口可以移动,调整大小和关闭。它的内容也可以被定义为静态html或要么通过ajax动态加载</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#openBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#mywindow"</span>).window(<span class="string">'open'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mywindow"</span> <span class="attr">class</span>=<span class="string">"easyui-window"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-options</span>=<span class="string">"title:'窗口标题',collapsible:false,modal:true,closed:true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;"</span>&gt;</span></span><br><span class="line">        窗口内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"打开"</span> <span class="attr">id</span>=<span class="string">"openBtn"</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据表格datagrid"><a href="#数据表格datagrid" class="headerlink" title="数据表格datagrid"></a>数据表格datagrid</h3><blockquote><p>继承$.fn.panel.defaults. 重写默认方法 $.fn.datagrid.defaults.<br>datagrid显示数据表格格式,提供了丰富的支持选择、分类、组织和编辑数据。datagrid被设计来减少开发时间和要求没有专业知识开发人员。它是不重要的,功能丰富。单元合并、 表头合并、冻结一列页脚只是它的一些特性。</p></blockquote><p>在页面加载后会自动向url地址发送请求传递参数page当前页码和rows每页记录的条数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 页面加载后，对datagrid 进行设置</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#grid"</span>).datagrid(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置表格一些属性</span></span></span><br><span class="line"><span class="javascript">            columns : [[ <span class="comment">// 二维数组 支持 多级表头， 每一个数组 就是表头一行</span></span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="javascript">                    field: <span class="string">"id"</span>, <span class="comment">// 用于和服务器返回json中字段对应</span></span></span><br><span class="line"><span class="javascript">                    title: <span class="string">"编号"</span>, <span class="comment">// 列标题显示内容， &lt;th&gt;</span></span></span><br><span class="line"><span class="undefined">                    width: 100</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="javascript">                    field: <span class="string">"name"</span>, <span class="comment">// 用于和服务器返回json中字段对应</span></span></span><br><span class="line"><span class="javascript">                    title: <span class="string">"商品名称"</span>, <span class="comment">// 列标题显示内容， &lt;th&gt;</span></span></span><br><span class="line"><span class="undefined">                    width: 100</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="javascript">                    field: <span class="string">"price"</span>, <span class="comment">// 用于和服务器返回json中字段对应</span></span></span><br><span class="line"><span class="javascript">                    title: <span class="string">"价格"</span>, <span class="comment">// 列标题显示内容， &lt;th&gt;</span></span></span><br><span class="line"><span class="undefined">                    width: 100</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            ]],</span></span><br><span class="line"><span class="javascript">            url : <span class="string">"product.json"</span> , <span class="comment">// 加载json数据，显示表格数据</span></span></span><br><span class="line"><span class="javascript">            pagination : <span class="literal">true</span> , <span class="comment">// 分页工具条</span></span></span><br><span class="line"><span class="javascript">            toolbar : [  <span class="comment">// 一维数组，定义按钮</span></span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="javascript">                    id : <span class="string">"saveBtn"</span>,</span></span><br><span class="line"><span class="javascript">                    text : <span class="string">"保存"</span>,</span></span><br><span class="line"><span class="javascript">                    iconCls : <span class="string">"icon-save"</span>,</span></span><br><span class="line"><span class="javascript">                    handler : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">"保存..."</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据表格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"grid"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>json数据结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"total"</span>:<span class="number">100</span>，</span><br><span class="line">    <span class="string">"rows"</span>:[</span><br><span class="line">        &#123;<span class="attr">"id"</span>:<span class="string">"001"</span>,<span class="attr">"name"</span>:<span class="string">"小米4"</span>,<span class="attr">"price"</span>:<span class="number">1288</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">"id"</span>:<span class="string">"001"</span>,<span class="attr">"name"</span>:<span class="string">"华为p9"</span>,<span class="attr">"price"</span>:<span class="number">2280</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="formatter属性"><a href="#formatter属性" class="headerlink" title="formatter属性"></a>formatter属性</h4><blockquote><p>列属性 单元格式化程序函数,取三个参数:<br>value: 字段值。<br>rowData:行记录数据。<br>rowIndex: 行索引。</p></blockquote><pre><code>columns=[{    field: &apos;deltag&apos;,    title: &apos;是否作废&apos;,    width: 80,    align: &apos;center&apos;,    formatter: function(data, row, index) {        if(data == &quot;0&quot;) {            return &quot;正常使用&quot;        } else {            return &quot;已作废&quot;;        }    }]</code></pre><h3 id="下拉列表框"><a href="#下拉列表框" class="headerlink" title="下拉列表框"></a>下拉列表框</h3><blockquote><p>组合框显示一个可编辑的文本框和下拉列表,用户选择一个或多个值。用户可以直接输入文本到顶部的列表,或选择一个或多个当前值列表。</p></blockquote><ol><li>给input输入框设置class=”easyui-combobox”</li><li>设置属性 valueField textFied url</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">创建下拉列表框从<span class="tag">&lt;<span class="name">input</span>&gt;</span>标记。</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"cc"</span> <span class="attr">class</span>=<span class="string">"easyui-combobox"</span> <span class="attr">name</span>=<span class="string">"dept"</span> <span class="attr">data-options</span>=<span class="string">"valueField:'id',textField:'text',url:'get_data.php'"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">使用javascript创建下拉列表框。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"cc"</span> <span class="attr">name</span>=<span class="string">"dept"</span> <span class="attr">value</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$('#cc').combobox(&#123;</span><br><span class="line"></span><br><span class="line">url:'combobox_data.json',</span><br><span class="line"></span><br><span class="line">valueField:'id',</span><br><span class="line"></span><br><span class="line">textField:'text'</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyUI </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Maven</title>
      <link href="/Maven/Maven/"/>
      <url>/Maven/Maven/</url>
      <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><blockquote><p>Maven是apache下的开源项目，项目管理工具，管理java项目</p></blockquote><ol><li>项目对象模型 (Project Object Model)<blockquote><p>POM对象模型，每个maven工程中都有一个pom.xml文件，定义工程所依赖的jar包、本工程的坐标、打包运行方式。。</p></blockquote></li><li>依赖管理系统（基础核心 ）<blockquote><p>maven通过坐标对项目工程所依赖的jar包统一规范管理。</p></blockquote></li><li>maven定义一套项目生命周期<blockquote><p>清理、初始化、编译、测试、报告 、打包、部署、站点生成</p></blockquote></li><li>一组标准集合<blockquote><p>强调：maven工程有自己标准的工程目录结构、定义坐标有标准。</p></blockquote></li><li>maven 管理项目生命周期过程都是基于插件完成的</li></ol><p><img src="https://20-1257099060.cos.ap-chengdu.myqcloud.com/maven/%e6%a6%82%e5%bf%b5%e6%a8%a1%e5%9e%8b.png" alt="概念模型"></p><h2 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h2><p><img src="" alt="仓库"></p><ol><li>中央仓库<blockquote><p>就是远程仓库，仓库中jar由专业团队（maven团队）统一维护。<br>中央仓库的地址：<a href="http://repo1.maven.org/maven2/" target="_blank" rel="noopener">这里</a></p></blockquote></li><li>本地仓库<blockquote><p>相当于缓存，工程第一次会从远程仓库（互联网）去下载jar 包，将jar包存在本地仓库（在程序员的电脑上）。第二次不需要从远程仓库去下载。先从本地仓库找，如果找不到才会去远程仓库找。</p></blockquote></li><li>私服<blockquote><p>在公司内部架设一台私服，其它公司架设一台仓库，对外公开。</p></blockquote></li></ol><h2 id="Maven环境搭建"><a href="#Maven环境搭建" class="headerlink" title="Maven环境搭建"></a>Maven环境搭建</h2><ol><li>下载maven<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">官网下载</a></li><li>将下载的压缩包解压</li><li>配置本地仓库<br> 打开maven的安装目录中conf/ settings.xml文件，配置本地仓库(本地仓库的目录为D:\repository)<br> <code>&lt;localRepository&gt;D:\repository&lt;/localRepository&gt;</code></li><li>eclipse 配置maven<ol><li>进入eclipse ,选择菜单windows - Preferences - Maven , 在左侧的树状导航中Installations,点击add按钮，弹出窗口后选择maven的安装目录,然后点击Apply</li><li>配置User Settings,选择左侧树形导航的User Settings  ,选择Maven目录下conf下的settings.xml 然后点击Update Settings 、Reindex 和Apply按钮</li><li>重建本地仓库索引,选择菜单 window –&gt; show View –&gt;other,选择Maven–&gt;Maven Repositories.Maven Repositories显示后点开Local Repositories在Local Repositorie右键选择 Rebuild  Index  重新创建索引</li></ol></li><li>配置私服镜像<br> 在settings.xml中的mirrors节点中添加一下信息 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><blockquote><p>eclipse下maven工程简单快速搭建学习</p></blockquote><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><pre><code>选择菜单  File -&gt;new -&gt; Other弹出New窗口选择Maven --&gt;Maven Project,点击next选中下图红框部分的复选框（跳过骨架），next</code></pre><p><img src="https://20-1257099060.cos.ap-chengdu.myqcloud.com/maven/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B1.png" alt="创建工程1"></p><pre><code>定义工程坐标maven对所有工程管理基于坐标进行管理</code></pre><p><img src="https://20-1257099060.cos.ap-chengdu.myqcloud.com/maven/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B2.png" alt="创建工程2"></p><p>坐标包括：</p><pre><code>Group Id：项目的名称，项目名称以域名的倒序，比如：cn.itcast.mavendemoArtifact Id：模块名称（子项目名称）Version：模块的版本，snapshot（快照版，没有正式发行）、release（正式发行版本）输入后，Finish 。</code></pre><p>工程目录结构说明：</p><pre><code>project    /src/main/java      主体程序 java源文件（不要放配置文件）    /src/main/resources  主体程序所需要的配置文件（不要放java文件）    /src/test/java       单元测试程序 java源文件    /src/test/resources   单元测试程序所用的配置文件    /target            编译输出目录pom.xml          Maven进行工作的主要配置文件。</code></pre><h2 id="设置编译版本"><a href="#设置编译版本" class="headerlink" title="设置编译版本"></a>设置编译版本</h2><blockquote><p>工程上右键 选择 Maven –&gt; Add Plugin 弹出窗口 输入compiler选择org.apache.maven.plugins<br>pom.xml中出现如下面信息，也可以配置信息粘贴到pom.xml中</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击工程右键  Maven -&gt;  Update Project …<br>弹出窗口后OK .操作后 ，编译版本改为 1.7</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p><img src="https://20-1257099060.cos.ap-chengdu.myqcloud.com/maven/%e6%b7%bb%e5%8a%a0%e4%be%9d%e8%b5%96.png" alt="添加依赖"></p><p>右键点击工程  Maven – &gt;  Add Dependency<br>弹出窗口后输入要依赖的jar包<br><img src="https://20-1257099060.cos.ap-chengdu.myqcloud.com/maven/%e6%b7%bb%e5%8a%a0%e4%be%9d%e8%b5%962.png" alt="添加依赖2"><br>添加后打开pom.xml，发现多了些信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再看工程目录下的Maven Dependecies 下又多了很多jar包<br>注意：项目中会多出很多jar包呢？因为hibernate的核心包本身又会依赖其它的jar包，所以导入hibernate包自动会添加hibernate所依赖的包。</p><h2 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h2><blockquote><p>Maven有三套相互独立的生命周期，分别是：clean、default、site。clean主要是清理项目、default是Maven最核心的的构建项目、site是生成项目站点。每一个大的生命周期又分为很多个阶段。后面的阶段依赖于前面的阶段，这点有点像Ant的构建依赖。生命周期本身相互独立，用户可以仅仅调用生命周期的某一个阶段，也就是说用户调用了default周期的任何阶段，并不会触发clean周期以及site周期的任何事情</p></blockquote><p><img src="https://20-1257099060.cos.ap-chengdu.myqcloud.com/maven/%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f.png" alt="生命周期"></p><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><p>maven通过命令对工程进行清理、编译、测试、打包、部署。<br>输入命令步骤：点击工程右键 ，Run As （或Debug As ） – &gt;  Maven  Build …  三个点的<br>弹出窗口输入命令</p><pre><code>常用命令如下：compile：编译clean：清理，将target下的class文件清理test： 执行单元测试类，执行src/test/java下的类package ：将java工程打成jar、war。install：安装命令，将将程的jar发布到本地仓库发布到仓库，目录按照本工程定义的坐标生成目录</code></pre><h2 id="pom文件示例"><a href="#pom文件示例" class="headerlink" title="pom文件示例"></a>pom文件示例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父项目的pom.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.znvoid.bos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bos_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>公共父项目，用于统一依赖管理<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--各个依赖jar包的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.1.7.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">struts2.version</span>&gt;</span>2.3.24<span class="tag">&lt;/<span class="name">struts2.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.0.1.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shiro.version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">shiro.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springdatajpa.version</span>&gt;</span>1.9.0.RELEASE<span class="tag">&lt;/<span class="name">springdatajpa.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet.version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">servlet.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 权限控制 框架 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring 框架 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指明是test时期的jar包，不参与编译和打包，只在test时有效--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring data jpa 数据库持久层 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springdatajpa.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- struts2 框架 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;struts2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-spring-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;struts2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Servlet、JSP --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指明不参与打包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--..省略..--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--maven插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>bos<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!--配置端口和项目路径--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--module模块申明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>bos_web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>bos_domain<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>bos_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>bos_service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>bos_utils<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--bos_dao模块的pom.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.znvoid.bos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bos_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bos_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.znvoid.bos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bos_domain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH整合</title>
      <link href="/JavaWeb/%E6%A1%86%E6%9E%B6/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
      <url>/JavaWeb/%E6%A1%86%E6%9E%B6/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
      <content type="html"><![CDATA[<h1 id="SSH三大框架整合"><a href="#SSH三大框架整合" class="headerlink" title="SSH三大框架整合"></a>SSH三大框架整合</h1><blockquote><p>Struts+Spring+Hibernate</p></blockquote><h2 id="基于xml配置方式整合"><a href="#基于xml配置方式整合" class="headerlink" title="基于xml配置方式整合"></a>基于xml配置方式整合</h2><h3 id="需要的jar包"><a href="#需要的jar包" class="headerlink" title="需要的jar包"></a>需要的jar包</h3><ol><li><p>Struts2框架的jar包<br> asm-3.3.jar<br> asm-comons-3.3jar<br> asm-3.3.jar<br> asm-commons-3.3.jar<br> asm-tree-3.3.jar<br> commons-fileupload-1.3.1.jar<br> commons-io-2.2.jar<br> commons-lang3-3.2.jar<br> freemarker-2.3.22.jar<br> javassist-3.18.1-GA.jar<br> jstl-1.2.jar<br> log4j-1.2.16.jar<br> ognl-3.0.6.jar<br> slf4j-api-1.6.1.jar<br> slf4j-log4j12-1.7.2.jar<br> struts2-core-2.3.24.jar<br> xwork-core-2.3.24.jar</p><blockquote><p>sm 是关于字节码操作<br>Commons-fileupload 关于文件上传<br>Commons-io 关于 io 流操作工具<br>Commons-lang 也是一个工具，包含了关于数据与字符串操作<br>Freemaker 标签库模板文件<br>Javassist 它也是关于字节码操作，动态代理可以使用它实现(类似于 cglib)<br>Log4j 关于日志<br>Ognl 关于 ognl 表达式<br>Struts2-core xwork-cor struts2 框架底层是使用 xwork<br>==Struts2 与 spring 整合还需要下面的jar包==</p></blockquote><p> struts2-spring-plugin-2.3.23.jar</p><blockquote><p>如果需要使用 struts2 提供的 json 处理<br>需要struts2-json-plugin-2.3.24.jar</p></blockquote></li><li><p>Hibernate框架的jar包</p><p> antlr-2.7.7.jar<br> commons-beanutils-1.8.3.jar<br> dom4j-1.6.1.jar<br> ehcache-core-2.4.3.jar<br> geronimo-jta_1.1_spec-1.1.1.jar<br> hibernate-commons-annotations-5.0.1.Final.jar<br> hibernate-core-5.0.7.Final.jar<br> hibernate-ehcache-5.0.7.Final.jar<br> hibernate-jpa-2.1-api-1.0.0.Final.jar<br> jandex-2.0.0.Final.jar<br> javassist-3.18.1-GA.jar<br> jboss-logging-3.3.0.Final.jar<br> jstl-1.2.jar<br> junit-4.9.jar<br> log4j-1.2.16.jar<br> slf4j-api-1.6.1.jar<br> slf4j-log4j12-1.7.2.jar</p><blockquote><p>Antlr 语法解析包<br>Dom4j 解析 xml<br>Geronimo-jta apache geronimo它是一个开源javaEE服务器 Geronimo-jta是这个开源项目提<br>供 jar 包，在 hibernate 中是关于 jta 事务相关<br>Hibernate-commoins-annotations<br>这个包是我们在 hibernate 下来使用 jpa 相关的注解，这样它不依赖于 hibernate<br>Hibernate-core 开发 hibernate 必须<br>Hibernate-jpa 它是关于 hibernate 对 jpa 的支持<br>Jandex 用于索引 annotation<br>Javassist 关于字节码操作(注意:strtus2 中也引入这个 jar 包了)<br>Jboss-logging 它是关于 jboss 统一日志处理<br>如果使用关于 jpa 相关操作需要导入 jpa 依赖 jar 包</p></blockquote><p> hibernate-entitymanager-5.0.7.Final.jar</p><blockquote><p>C3p0 连接池 和数据库驱动的jar包</p></blockquote><p> c3p0-0.9.2.1.jar<br> hibernate-c3p0-5.0.7.Final.jar<br> mchange-commons-jar0.2.3.4.jar</p><p> mysql-connector-java-5.1.7-bin.jar</p></li><li><p>Spring框架的jar包</p><blockquote><p>基本jar包</p></blockquote><p> commons-logging-1.2.jar<br> log4j-1.2.16.jar<br> spring-beans-4.2.4.RELEASE.jar<br> spring-context-4.2.4.RELEASE.jar<br> spring-core-4.2.4.RELEASE.jar<br> spring-expression-4.2.4.RELEASE.jar<br> spring-aop-4.2.4.RELEASE.jar</p><blockquote><p>aop基本jar包</p></blockquote><p> aopalliance-1.0.jar<br> aspectjweaver-1.8.7.jar<br> spring-aspects-4.2.4.RELEASE.jar</p><blockquote><p>事务jar包</p></blockquote><p> spring-jdbc-4.2.4.RELEASE.jar<br> spring-tx-4.2.4.RELEASE.jar<br> <code>Spring 整合 hibernate</code><br> spring-orm-4.2.4.RELEASE.jar</p><blockquote><p>web 开发jar包</p></blockquote><p> spring-web-4.2.4.RELEASE.jar</p><blockquote><p>Struts2 与 spring 整合(上面已提到)</p></blockquote><p> struts2-spring-plugin-2.3.24.jar</p><blockquote><p>junit 测试</p></blockquote><p> junit-4.9.jar<br> spring-test-4.2.4.RELEASE.jar</p></li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code>Strtsu2 框架 src/strtus.xmlHibernate 框架 src/hibernate.cfg.xml 在 domain 有 Xxx.hbm.xmlSpring 框架 src/applicationContext.xml关于日志 log4j.properties关于数据库连接 db.properties</code></pre><h3 id="Spring整合hibernate"><a href="#Spring整合hibernate" class="headerlink" title="Spring整合hibernate"></a>Spring整合hibernate</h3><blockquote><p>基本原理:就是由 spring 来管理 hibernate 的 SessionFactory</p></blockquote><ol><li><p>方式一：零障碍整合</p><blockquote><p>使用 spring 中提供的一个 LocalSessionFacotry 来加载 Hibernate 的配置文件</p></blockquote><p> 在applicationContext.xml中配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 在web.xml中配置 spring 的 ContextLoaderListener</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：spring  管理 hibernate  配置（开发中都用此种）</p><blockquote><p>不在需要 hibernate.cfg.xml 文件，所有关于 hibernate.cfg.xml 文件中的配置都在 spring 的配置文件中来配置</p></blockquote><p> applicationContext.xml中的配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--c3p0连接池的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c3p0DataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建 LocalSessionFactoryBean 来完成 spring 管理 hibernate 中的 SessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"c3p0DataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置hibernate常量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;prop key="hibernate.connection.autocommit"&gt;false&lt;/prop&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载 hbm.xml 配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingDirectoryLocations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com/znvoid/domain<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 声明式事务配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"login"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"regist"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop切面配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.znvoid.service.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"mypointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring 整合 hiberante 后，我们的 dao 只需要继承 HibernateDaoSupport 类在 </span></span><br><span class="line"><span class="comment">HibernateDaoSupport 中只需要注入 SessionFactory 就可以获得到 HibernateTemplate，</span></span><br><span class="line"><span class="comment">它是对 hibernate 操作的一个简单封装，可以让我们方便使用原来 hibernate 的操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> db.properties</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:///sshtest</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure></li></ol><h3 id="Spring-整合-struts2"><a href="#Spring-整合-struts2" class="headerlink" title="Spring  整合 struts2"></a>Spring  整合 struts2</h3><ol><li><p>方式一基于 spring 管理 action(掌握)<br>applicationContext.xml 文件中配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.web.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> struts.xm文件中的配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/User"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Class 的值就是 bean 的 id 值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user_*"</span> <span class="attr">class</span>=<span class="string">"userAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"fail"</span>&gt;</span>/fail.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"loginUI"</span> &gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"registerUI"</span>&gt;</span>/register.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><p> web.xml 文件中配置 struts2 框架的 Filter</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p> action类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6937532408327584466L</span>;</span><br><span class="line">    <span class="keyword">private</span> User user=<span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IUserService <span class="title">getUserService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(IUserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User _user = userService.login(user);</span><br><span class="line">        <span class="keyword">if</span>(_user!=<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">regist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.regist(user)?<span class="string">"success"</span>:<span class="string">"fail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"loginUI"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">registUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"registerUI"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式二 action 中自动注入 service<br> Struts.xml 文件中</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/User"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Class 的值就是 bean 的 id 值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user_*"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"fail"</span>&gt;</span>/fail.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"loginUI"</span> &gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"registerUI"</span>&gt;</span>/register.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--修改了注入的方式，根据 type 进行注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objextFactory.spring.autoWire"</span> <span class="attr">value</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="基于注解配置方式整合"><a href="#基于注解配置方式整合" class="headerlink" title="基于注解配置方式整合"></a>基于注解配置方式整合</h2><h3 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h3><blockquote><p>在原来的 xml 基础上在多导入一个 jar 包</p><blockquote><p>struts2-convention-plugin-2.3.24.jar</p></blockquote></blockquote><h3 id="xml配置文件"><a href="#xml配置文件" class="headerlink" title="xml配置文件"></a>xml配置文件</h3><blockquote><p>Spring 的配置文件 applicationContext.xml<br>Struts2 的配置文件 struts.xml</p></blockquote><h3 id="使用-JPA-注解来定义-PO"><a href="#使用-JPA-注解来定义-PO" class="headerlink" title="使用 JPA  注解来定义 PO"></a>使用 JPA  注解来定义 PO</h3><p>@Entity 定义实体类<br>@Table 定义表<br>@Id 主键<br>@GeneratedValue 生成主键策略<br>@Column 定义列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-整合-hibernate"><a href="#Spring-整合-hibernate" class="headerlink" title="Spring  整合 hibernate"></a>Spring  整合 hibernate</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    "</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.znvoid"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/ssh_demo1?useUnicode=true&amp;amp;characterEncoding=UTF8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.znvoid.domain<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Dao编写"><a href="#Dao编写" class="headerlink" title="Dao编写"></a>Dao编写</h3><p>如何在dao中得到HibernateTemplate对象，原来是在applicationContext.xml文件中通过配置方案注入了一个SessionFactory对象，UserDao的父类HibernateDaoSupport,会帮助我们根据SessionFactory来得到HibernateTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">IUserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSupperSerssionFactory</span><span class="params">(SessionFactory sessionFactory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setSessionFactory(sessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Action-编写"><a href="#Action-编写" class="headerlink" title="Action 编写"></a>Action 编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="meta">@NameSpace</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="meta">@ParentPackage</span>(<span class="string">"struts-default"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModeDriven</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user =<span class="keyword">new</span> User();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userService"</span>)</span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@Actionn</span>(value=<span class="string">"user_add"</span>,results=&#123;<span class="meta">@Result</span>(name=<span class="string">"success"</span>,location=<span class="string">"/success.jsp"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.add(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring三</title>
      <link href="/JavaWeb/Sping%E6%A1%86%E6%9E%B6/Spring%E4%B8%89/"/>
      <url>/JavaWeb/Sping%E6%A1%86%E6%9E%B6/Spring%E4%B8%89/</url>
      <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="JDBC-Template"><a href="#JDBC-Template" class="headerlink" title="JDBC Template"></a>JDBC Template</h2><blockquote><p>jdbc 模板，它类似于 dbutils 工具</p></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>导入相关的jar包<br> c3p0-0.9.2.1.jar<br> com.springsource.org.aopalliance-1.0.0.jar<br> com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar<br> commons-logging-1.2.jar<br> log4j-1.2.16.jar<br> mchange-commons-java-0.2.3.4.jar<br> mysql-connector-java-5.1.7-bin.jar<br> spring-aop-4.2.4.RELEASE.jar<br> spring-beans-4.2.4.RELEASE.jar<br> spring-context-4.2.4.RELEASE.jar<br> spring-core-4.2.4.RELEASE.jar<br> spring-expression-4.2.4.RELEASE.jar<br> spring-jdbc-4.2.4.RELEASE.jar<br> spring-test-4.2.4.RELEASE.jar<br> spring-tx-4.2.4.RELEASE.jar<br> spring-web-4.2.4.RELEASE.jar</li><li><p>创建数据库与表</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> springtest;</span><br><span class="line"><span class="keyword">USE</span> springtest;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="built_in">INT</span>,</span><br><span class="line">sex <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'tom'</span>,<span class="number">20</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'fox'</span>,<span class="number">30</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'tony'</span>,<span class="number">40</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_user;</span><br></pre></td></tr></table></figure></li><li><p>相关配置</p><blockquote><p>applictionContext.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部的properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建c3p0连接滨 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c3p0DataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"c3p0DataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>db.properties</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:///springtest</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure></blockquote></li><li><p>测试代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">"UPDATE t_user SET NAME='jack' WHERE id=1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = jdbcTemplate.query(<span class="string">"select * from t_user where id =1"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class));</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>Spring 事务管理的优点</p></blockquote><ol><li><blockquote><p>提供一致的对于不同的事务管理的 API</p></blockquote></li><li><blockquote><p>支持声明式事务管理(重点)</p></blockquote></li><li><blockquote><p>编程事务管理(在开发中应用比较少)</p></blockquote></li><li><blockquote><p>优秀的整合与 Spring 的数据访问</p></blockquote></li></ol><blockquote><p>Spring 事务管理主要提供了三个接口来完成</p></blockquote><ol><li>org.springframework.transaction.PlatformTransactionManager   这是一个事务管理器，可以来选择相关的平台(jdbc hibernate jpa…)</li><li>TransactionDefinition    它定义事务的一些相关信息 例如 隔离 传播 超时 只读</li><li>TransactionStatus    它主要描述事务具体的运行状态</li></ol><h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><p>平台事务管理器<br>在不同的持久化层解决技术它的事务代码不一样。<br>JDBC 开发<br>Connection con=……;<br>con.setAutoCommit(false);//开启事务<br>con.rollback();<br>con.commit();<br>Hibernate 开发<br>Session session=….;<br>Transaction t=session.beginTransaction();<br>t.commit();<br>t.rollback();<br>PlatformTransactionManager 接口 API<br>子类<br>DataSourceTransactionManager 主要针对于 JdbcTemplate 开发 MyBatis 开发<br>HibernateTransactionManasger 主要针对于 Hibernate 开发<br>JpaTransactionManager 主要针对于 JPA 开发</p><h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><blockquote><p>在 TransactionDefinition 中定义了大量的常量</p></blockquote><ol><li>隔离<br> 子性 一致性 隔离性 持久性。<br> 不考虑事务隔离性有什么问题？<br> 脏读，不可重复读 虚读。<br> ISOLATION_DEFUALT 它使用后端数据库的默认隔离级别(spring 中选项)<br> ISOLATION_READ_UNCOMMITTED 不能解决问题，会发生脏读 不可重复读 虚读<br> ISOLATION_READ_COMMITTED 可以解决脏读 会产生不可重复读与虚读。<br> ISOLATION_REPEATABLE_READ 可以解决脏读，不可重复读 解决不了虚读<br> ISOLATION_SERIALIZABLE 串行化，可以解决所有问题<br> 对于不现的数据库，它的底层默认事务隔离级别不一样。<br> Oracle 数据库它默认的是 read_committed<br> Mysql 数据库它默认的是 repeatable_read</li><li>超时<br> TIMEOUT_DEFAULT<br> 默认值是-1 它使用的是数据库默认的超时时间。</li><li>只读<br> 它的值有两个 true/false,如果选择 true 一般是在 select 操作时</li><li><p>传播<br> 它解决的是两个被事务管理的方法互相调用问题。它与数据库没关系，是程序内部维护的问题</p><ol><li>PROPAGATION_REQUIRED 默认值 两个操作处于同一个事务，如果之前没有事务，新建一个事务</li><li>PROPAGATION_REQUIRES_NEW两个操作处于不同的事务</li><li><p>PROPAGATION_NESTED它是一种嵌套事务，它是使用 SavePoint 来实现的。事务回滚时可以回滚到指定的savepoint,注意：它只对 DataSourceTransactionManager 有作用</p></li><li><p>PROPAGATION_SUPPORTS 支持当前事务，如果不存在，就不使用事务</p></li><li>PROPAGATION_MANDATORY 支持当前事务，如果不存在，抛出异常</li><li>PROPAGATION_NOT_SUPPORTED 以非事务运行，如果有事务存在，挂起当前事务</li><li>PROPAGATION_NEVER 以非事务运行，如果有事务存在，抛出异常</li></ol></li></ol><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><blockquote><p>它定义了事务状态信息，在事务运行过程中，得到某个时间点的状态</p></blockquote><h3 id="事务管理方式"><a href="#事务管理方式" class="headerlink" title="事务管理方式"></a>事务管理方式</h3><ol><li>编码方案 不建议使用，它具有侵入性。在原有的业务代码基础上去添加事务管理代码</li><li>声明式事务控制，基于 AOP 对目标进行代理，添加 around 环绕通知。这种方案，它不具有侵入性，不需要修改原来的业务代码</li></ol><h4 id="基于-xml-配置声明式事务管理方案"><a href="#基于-xml-配置声明式事务管理方案" class="headerlink" title="基于 xml  配置声明式事务管理方案"></a>基于 xml  配置声明式事务管理方案</h4><ol><li><p>在 applicationContext.xml 文件中添加 aop 与 tx 的名称空间</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 applicationContext.xml 文件中配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 引入外部properties文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- c3p0连接池配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c3poDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"c3poDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.jdbc.dao.AccountDAOImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"c3poDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.jdbc.service.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"c3poDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        name:必须的，对哪些方法进行事务控制</span></span><br><span class="line"><span class="comment">        isolation 可选 设置事务隔离级别 默认是DEFAULT </span></span><br><span class="line"><span class="comment">        propagation:可选 设置事务传播 默认值 REQUIRED</span></span><br><span class="line"><span class="comment">        timeout 可选 超时时间 默认值-1 </span></span><br><span class="line"><span class="comment">        read-only 可选 默认值是false 如果不是只读，它可以对insert update delete操作，如果是只读不可以。</span></span><br><span class="line"><span class="comment">        rollback-for 可选 可以设置一个异常，如果产生这个异常，触发事务回滚</span></span><br><span class="line"><span class="comment">        no-rolback-for 可选 可以设置一个异常，如果产生这个异常，不会触发事务回滚</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"account"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切面配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.znvoid.jdbc.service.AccountServiceImpl.account(..))"</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="基于-annotation-声明式事务管理方案"><a href="#基于-annotation-声明式事务管理方案" class="headerlink" title="基于 annotation  声明式事务管理方案"></a>基于 annotation  声明式事务管理方案</h4><blockquote><p>可以使用@Transaction 来在类或方法上添加声明式事务管理</p></blockquote><ol><li><p>开启注解</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在需要事务的方法上使用@Transaction注解</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转账操作的方法</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">account</span><span class="params">(String outname, String inname, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从outname转出money</span></span><br><span class="line">    accountDao.accountOut(outname, money);</span><br><span class="line">    <span class="comment">//int a = 10 / 0; // 一定会抛出异常</span></span><br><span class="line">    <span class="comment">// 向inname转入money</span></span><br><span class="line">    accountDao.accountIn(inname, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Sping框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring二</title>
      <link href="/JavaWeb/Sping%E6%A1%86%E6%9E%B6/Spring%E4%BA%8C/"/>
      <url>/JavaWeb/Sping%E6%A1%86%E6%9E%B6/Spring%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><blockquote><p>面向切面编程</p></blockquote><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。<br>AOP 是一个概念，并没有设定具体语言的实现，它能克服那些只有单继承特性语言的缺点，<br>spring2.0 之后整合 AspectJ 第三方 AOP 技术。<br>AspectJ 是一个面向切面的框架，它扩展了 Java 语言。AspectJ 定义了 AOP 语法所以它有一<br>个专门的编译器用来生成遵守 Java 字节编码规范的 Class 文件</p><h3 id="AOP-与-与-OOP-区别"><a href="#AOP-与-与-OOP-区别" class="headerlink" title="AOP 与 与 OOP  区别"></a>AOP 与 与 OOP  区别</h3><p>OOP（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获<br>得更加清晰高效的逻辑单元划分。<br>而 AOP 则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步<br>骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。这两种设计思想在目标上有<br>着本质的差异</p><h3 id="AOP-相关术语"><a href="#AOP-相关术语" class="headerlink" title="AOP  相关术语"></a>AOP  相关术语</h3><ol><li>目标对象 target<br> 指的是需要被增强的对象，由于 spring aop 是通过代理模式实现，从而这个对象永远是被代理对象。</li><li>连接点(join point)<br> 所谓连接点是指那些被拦截到的点，在 spring 中这些点指的是方法，因为 spring 只支持方法类型的连接点</li><li>切入点(pointcut)<br> 表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方简单说切入点是指我们要对哪些连接点进行拦截的定义</li><li>通知(advice)<br> 所谓通知是指拦截到连接点之后所要做的事情就是通知，通知分为前置通知，后置通知，异常通知，最终通知，环绕通知Advice 定义了在 pointcut 里面定义的程序点具体要做的操作</li><li>引介 introduction<br> 引介是一种特殊的通知，在不修改类代码的前提下，introduction 可以在运行期为类动态地添加一些方法或属性</li><li>切面 aspect<br> 是切入点和通知的结合</li><li>织入 weaving<br> 织入是一个过程，是将切面应用到目标对象从而创建出 AOP 代理对象的过程，织入可以在编译期，类装载期，运行期进行。Spring 采用动态织入，而 aspectj 采用静态织入</li><li>代理 Proxy<br> 一个类被 AOP 织入增强后，就产生一个结果代理类</li></ol><h3 id="AOP的底层实现"><a href="#AOP的底层实现" class="headerlink" title="AOP的底层实现"></a>AOP的底层实现</h3><blockquote><p>OP 分为静态 AOP 和动态 AOP。静态 AOP 是指 AspectJ 实现的 AOP，他是将切面代码直接编译到 Java 类文件中。动态 AOP 是指将切面代码进行动态织入实现的 AOP。Spring 的 AOP 为动态 AOP，实现的技术为： JDK 提供的动态代理技术 和 CGLIB(动态字节码增强技术)</p></blockquote><h4 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK  动态代理"></a>JDK  动态代理</h4><blockquote><p>在运行 ，在 JVM 内部动态生成 class 字节码对象(Class 对象).Jdk 动态代理只针对于接口操作</p></blockquote><pre><code>Proxy类static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序。第一个参数:目标类的类加载器对象第二个参数:目标类的实现接口的 Class[]第三个参数:InvocationHandler 它是一个接口，它的作用是是代理实例的调用处理程序 实现的接口，接口中定义了一个方法</code></pre><h4 id="CGLIB-动态代理"><a href="#CGLIB-动态代理" class="headerlink" title="CGLIB  动态代理"></a>CGLIB  动态代理</h4><blockquote><p>CGLIB(Code Generation Library)是一个开源项目是一个强大的，高性能，高质量的 Code 生成类库，它可以在运行期扩展 Java 类与实现 Java接口。CGLIB 包的底层是通过使用一个小而快的字节码处理框架 ASM，来转换字节码并生成新的类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标对象</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Enhance enhance =<span class="keyword">new</span> Enhance();</span><br><span class="line">    enhance.setSuperclass(target.getClass());</span><br><span class="line">    enhance.setCallback(<span class="keyword">new</span> MethodInterceptor()&#123;</span><br><span class="line">        <span class="comment">// 相当于InvocationHandler中的invoke</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methdoProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"日志操作...."</span>);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(target, args); <span class="comment">// 与jdk的proxy中操作类似</span></span><br><span class="line">            <span class="comment">// return methdoProxy.invokeSuper(proxy, args);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">   <span class="keyword">return</span> enhance.create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-AOP编程"><a href="#spring-AOP编程" class="headerlink" title="spring AOP编程"></a>spring AOP编程</h3><h4 id="传统编程"><a href="#传统编程" class="headerlink" title="传统编程"></a>传统编程</h4><blockquote><p>在传统的 spring aop 开发中它支持增强(advice)有五种</p></blockquote><ol><li>前置通知 目标方法执行前增强 org.springframework.aop.MethodBeforeAdvice</li><li>后置通知 目标方法执行后增强 org.springframework.aop.AfterReturningAdvice</li><li>环绕通知 目标方法执行前后进行增强 org.aopalliance.intercept.MethodInterceptor</li><li>异常抛出通知 目标方法抛出异常后的增强 org.springframework.aop.ThrowsAdvice</li><li>引介通知 在目标类中添加一些新的方法或属性org.springframework.aop.IntroductionInterceptor</li></ol><blockquote><p>需要的jar包</p></blockquote><ol><li>bean</li><li>core</li><li>context</li><li>expression</li><li>aop</li><li>需要 aop 联盟的依赖 jar 包<br>com.springsource.org.aopalliance-1.0.0.jar</li></ol><blockquote><p>编写目标(target)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">IOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"orderService add..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"orderService update..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通知(advice)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHelper</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span>, <span class="title">AfterReturningAdvice</span>, <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"环绕前...."</span>);</span><br><span class="line">        Object value = mi.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后...."</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>applicationContext.xml 文件配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 目标target --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderService"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.aop.OrderServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通知advice --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderServiceAdvice"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.aop.OrderHelper"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义切点 pointcut --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean id="orderServicePointCut" class="org.springframework.aop.support.NameMatchMethodPointcut"&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="mappedNames"&gt;</span></span><br><span class="line"><span class="comment">        &lt;list&gt;</span></span><br><span class="line"><span class="comment">            &lt;value&gt;add&lt;/value&gt;</span></span><br><span class="line"><span class="comment">            &lt;value&gt;update&lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/list&gt;</span></span><br><span class="line"><span class="comment">    &lt;/property&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderServicePointCut"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.JdkRegexpMethodPointcut"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">".*Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切面aspect=pointcut+advice --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderServiceAspect"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.DefaultPointcutAdvisor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span> <span class="attr">ref</span>=<span class="string">"orderServiceAdvice"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pointcut"</span> <span class="attr">ref</span>=<span class="string">"orderServicePointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代理 proxy --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderServiceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"orderService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"orderServiceAspect"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"cn.itheima.aop.IOrderService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"orderServiceProxy"</span>)</span><br><span class="line">    <span class="keyword">private</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderService.updateOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基于-aspectJ-切面传统开发"><a href="#基于-aspectJ-切面传统开发" class="headerlink" title="基于 aspectJ  切面传统开发"></a>基于 aspectJ  切面传统开发</h5><blockquote><p>1.需要在 xml 配置文件中导入 aop 声明</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 目标target --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderService"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.aop.OrderServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通知advice --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderServiceAdvice"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.aop.OrderHelper"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用aop标签来完成切面与切点声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义切点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.znvoid.aop.IOrderService.*(..))"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"orderServicePointCut"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"orderServiceAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"orderServicePointCut"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;aop:aspect&gt;&lt;/aop:aspect&gt; aspectj框架它定义切面使用的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;aop:config&gt;来声明要对 aop 进行配置</span></span><br><span class="line"><span class="comment">&lt;aop:pointcut&gt;它是用于声明切点(简单说就是对哪些方法进行拦截)</span></span><br><span class="line"><span class="comment">&lt;aop:advisor&gt; 定义传统的 aop 的切面,传统的 aop 切面它只能包含一个切点与一个增强</span></span><br><span class="line"><span class="comment">&lt;aop:aspect&gt;定义 aspectj 框架的切面.,它可以包含多个切点与多个通知</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.因为我们使用 aspectj 的切面声明方式 需要在导入 aspectj 的 jar 包<br>com.sprinngsource.org.aspect.weaver-1.6.8.RELEASE.jar</p></blockquote><h5 id="切点表达式写法"><a href="#切点表达式写法" class="headerlink" title="切点表达式写法"></a>切点表达式写法</h5><p><img src="" alt="切点表达式示意图"></p><ol><li>execution(public <em> </em>()) 所有的 public 的方法</li><li>execution(<em> com.znvoid.aop.</em>(..)) 所有的 aop 包下的所有类的方法(不包含子包)</li><li>execution(<em> com.znvoid.aop..</em>(..)) 所有的 aop 包及其子包下的所有类的方法</li><li>execution(<em> com.znvoid.aop.IOrderService.</em>(..)) IOrderService 接口中定义的所有方法</li><li>execution(<em> com.znvoid.aop.IOrderService+.</em>(..)) 匹配实现特定接口所有类的方法</li><li>execution(<em> save</em>(..)) 匹配所有的以 save 开头的方法</li></ol><h4 id="整合aspectJ框架编程"><a href="#整合aspectJ框架编程" class="headerlink" title="整合aspectJ框架编程"></a>整合aspectJ框架编程</h4><blockquote><p>在 spring2.0 以后它支持 jdk1.5 注解，而整合 aspectj 后可以使用 aspectj 语法，可以简化开发<br>AspectJ 框架它定义的通知类型有 6 种</p></blockquote><ol><li>前置通知 Before 相当于 BeforeAdvice</li><li>后置通知 AfterReturning 相当于 AfterReturningAdvice</li><li>环绕通知 Around 相当于 MethodInterceptor</li><li>抛出通知 AfterThrowing 相当于 ThrowAdvice</li><li>引介通知 DeclareParents 相当于 IntroductionInterceptor</li><li>最终通知 After 不管是否异常，该通知都会执行</li></ol><blockquote><p>通知advice</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拦截的目标类:"</span> + jp.getSignature().getDeclaringTypeName());</span><br><span class="line">        System.out.println(<span class="string">"拦截的方法名称:"</span> + jp.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp, Object val)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目标方法返回值:"</span> + val);</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前...."</span>);</span><br><span class="line">        Object value = pjp.proceed(); <span class="comment">// 执行目标行为</span></span><br><span class="line">        System.out.println(<span class="string">"环绕后...."</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常抛出通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint jp,Throwable ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发现了异常。。。。"</span>+ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">        System.out.println(jp.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 spring 的 的 xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- target --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderService"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.aop.OrderServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- advice--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderServiceAdvice"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.aop.OrderServiceHelper"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用aop:config来声明  使用aop:aspect来配置切面 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--proxy-target-class代理方案,默认是 false,它代表有接口使用 proxy 代理,true代表使用cglib代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"orderServiceAdvice"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* *.del(..))"</span> <span class="attr">id</span>=<span class="string">"delPointCut"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"delPointCut"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before1"</span> <span class="attr">pointcut-ref</span>=<span class="string">"delPointCut"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"delPointCut"</span> <span class="attr">returning</span>=<span class="string">"val"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span>  <span class="attr">pointcut-ref</span>=<span class="string">"delPointCut"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"delPointCut"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"delPointCut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于注解AOP"><a href="#基于注解AOP" class="headerlink" title="基于注解AOP"></a>基于注解AOP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"customerService  save..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(10/0);</span></span><br><span class="line">        System.out.println(<span class="string">"customerService  search..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"customerService  update..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通知</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明当前的bean就是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* *.s*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mypointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* *.update(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mypointcut1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"mypointcut()||mypointcut1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution(* *.update(..))"</span>, returning = <span class="string">"value"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp, Object value)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知,目标方法的返回是"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"mypointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前..."</span>);</span><br><span class="line">        Object value = pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常抛出通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"mypointcut()"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint jp, Throwable ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常抛出通知:"</span> + ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终通知</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"mypointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.znvoid.aspectJ"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启aspectj注解自动代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Sping框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring一</title>
      <link href="/JavaWeb/Sping%E6%A1%86%E6%9E%B6/Spring%E4%B8%80/"/>
      <url>/JavaWeb/Sping%E6%A1%86%E6%9E%B6/Spring%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p>Spring 是一个开源框架,一个分层的 JavaSE/EEfull-stack(一站式) 轻量级开源框架</p></blockquote><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p><img src="https://s1.ax1x.com/2018/07/05/PV5jun.png" alt="1"></p><blockquote><p>核心容器</p></blockquote><ol><li>Core 和 Beans 模块提供了 Spring 最基础的功能，提供 IoC 和依赖注入特性。这里的基础概念是 BeanFactory，它提供对 Factory 模式的经典实现来消除对程序性单例模式的需要，并真正地允许你从程序逻辑中分离出依赖关系和配置。</li><li>Context 模块基于 Core 和 Beans 来构建，它提供了用一种框架风格的方式来访问对象，有些像 JNDI 注册表。Context 封装包继承了 beans 包的功能，还增加了国际化（I18N）,事件传播，资源装载，以及透明创建上下文，例如通过 servlet 容器，以及对大量 JavaEE 特性的支持，如 EJB、JMX。核心接口是 ApplicationContext。</li><li>Expression Language，表达式语言模块，提供了在运行期间查询和操作对象图的强大能力。支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean，它也支持列表投影、选择和一般的列表聚合等。</li></ol><blockquote><p>数据访问/ 集成部分(Data Access/Integration)</p></blockquote><ol><li>JDBC 模块，提供对 JDBC 的抽象，它可消除冗长的 JDBC 编码和解析数据库厂商特有的错误代码。</li><li>ORM 模块，提供了常用的”对象/关系”映射 API 的集成层。 其中包括 JPA、JDO、Hibernate和 iBatis 。利用 ORM 封装包，可以混合使用所有 Spring 提供的特性进行”对象/关系”映射，如简单声明性 事务管理</li><li>OXM 模块，提供一个支持 Object 和 XML 进行映射的抽象层，其中包括 JAXB、Castor、XMLBeans、JiBX 和 XStream。</li><li>JMS 模块，提供一套”消息生产者、消费者”模板用于更加简单的使用 JMS，JMS 用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li><li>Transaction 模块，支持程序通过简单声明性 事务管理，只要是 Spring 管理对象都能得到Spring 管理事务的好处，即使是 POJO，也可以为他们提供事务</li></ol><blockquote><p>Web</p></blockquote><ol><li>Web-Socket 模块， WebSocket protocol 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，spring 支持 webSocket 通信。</li><li>Web 模块，提供了基础的 web 功能。例如多文件上传、集成 IoC 容器、远程过程访问、以及 Web Service 支持，并提供一个 RestTemplate 类来提供方便的 Restful services 访问</li><li>Web-Servlet 模块，提供了 Web 应用的 Model-View-Controller（MVC）实现。Spring MVC框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的JSP 标签，完全无缝与 Spring 其他技术协作。</li><li>Web-Portlet 模块，提供了在 Portlet 环境下的 MVC 实现</li></ol><blockquote><p>AOP</p></blockquote><ol><li>AOP 模块，提供了符合 AOP 联盟规范的面向方面的编程实现，让你可以定义如方法拦截器和切入点，从逻辑上讲，可以减弱代码的功能耦合，清晰的被分离开。而且，利用源码级的元数据功能，还可以将各种行为信息合并到你的代码中 。</li><li>Aspects 模块，提供了对 AspectJ 的集成。</li><li>Instrumentation 模块， 提供一些类级的工具支持和 ClassLoader 级的实现，可以在一些特定的应用服务器中使用</li></ol><blockquote><p>Test</p></blockquote><ol><li>Test 模块，提供对使用 JUnit 和 TestNG 来测试 Spring 组件的支持，它提供一致的ApplicationContexts 并缓存这些上下文，它还能提供一些 mock 对象，使得你可以独立的测试代码。</li></ol><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>方便解耦，简化开发<br> Spring 就是一个大工厂，可以将所有对象创建和依赖关系维护，交给 Spring 管理</li><li>AOP 编程的支持<br> Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能</li><li>声明式事务的支持<br> 只需要通过配置就可以完成对事务的管理，而无需手动编程</li><li>方便程序的测试<br> Spring 对 Junit4 支持，可以通过注解方便的测试 Spring 程序</li><li>方便集成各种优秀框架<br> Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz 等）的直接支持</li><li>降低 JavaEE API 的使用难度<br> Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些 API 应用难度大大降低</li></ol><h2 id="IOC与DI"><a href="#IOC与DI" class="headerlink" title="IOC与DI"></a>IOC与DI</h2><blockquote><p>IOC inversion of Controller 控制反转。在程序中所说的 IOC 其实简单说，就是原来由我们自己实例化的对象交给 spring 容器来实始化</p><p>DI:dependency injection 依赖注入在 spring 框架负责创建 Bean 对象时，动态将依赖对象注入到 Bean 组件</p></blockquote><h3 id="spring开发环境搭建"><a href="#spring开发环境搭建" class="headerlink" title="spring开发环境搭建"></a>spring开发环境搭建</h3><blockquote><p>在spring开发中，根据不同的情况来导入不同的 jar 包</p></blockquote><pre><code>commons-logging-1.2.jarlog4j-1.2.16.jarspring-aop-4.2.4.RELEASE.jarspring-beans-4.2.4.RELEASE.jarspring-context-4.2.4.RELEASE.jarspring-core-4.2.4.RELEASE.jarspring-expression-4.2.4.RELEASE.jarspring-test-4.2.4.RELEASE.jar</code></pre><blockquote><p>配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;bean id="userService" class="com.znvoid.domain.UserServiceImpl"&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;bean id="user" class="com.znvoid.domain.User"&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="username" value="tom"/&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="password" value="123"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/bean&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下面的配置作用是指定spring扫描的包,它包含了context:annotation-config的功能，所以在开发中一般就不需要在配置上面的 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;context:component-scan base-package="com.znvoid.domain" /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean-获取与实例化"><a href="#Bean-获取与实例化" class="headerlink" title="Bean 获取与实例化"></a>Bean 获取与实例化</h3><p><img src="https://s1.ax1x.com/2018/07/05/PVbOvF.png" alt="ApplicatinContext体系"></p><p>ApplicationContext 它是扩展 BeanFactory 接口。<br>BeanFactory 它采取延迟加载的方案，只有真正在 getBean 时才会实例化 Bean<br>在开发中我们一般使用的是 ApplicationContext,真正使用的是其实现类,<br>FileSystemXmlAppliCationContext 根据文件路径获取<br>ClassPathXmlApplicationContext 根据类路径获取<br>AppliCationContext它会在配置文件加载时，就会初始化Bean,并且ApplicationContext<br>它 提 供 不 同 的 应 用 层 的 Context 实 现 。 例 如 在 web 开 发 中 可 以 使 用<br>WebApplicationContext.</p><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><blockquote><p>在 bean 声明时它有一个 scope 属性，它是用于描述 bean 的作用域</p></blockquote><ul><li>singleton:单例 代表在 spring ioc 容器中只有一个 Bean 实例 (默认的 scope)</li><li>prototype 多例 每一次从 spring 容器中获取时，都会返回一个新的实例</li><li>request 用在 web 开发中，将 bean 对象 request.setAttribute()存储到 request 域中</li><li>session 用在 web 开发中，将 bean 对象 session.setAttribute()存储到 session 域中</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://s1.ax1x.com/2018/07/05/PVqmVA.png" alt="生命周期"></p><ol><li>instantiate bean 对象实例化</li><li>populate properties 封装属性</li><li>如果 Bean 实现 BeanNameAware 执行 setBeanName</li><li>如果 Bean 实现 BeanFactoryAwar 或 ApplicationContextAwar 设置工厂setBeanFactory 或上下文对象 setApplicationContext</li><li>如果存在类实现 BeanPostProcess(后处理 Bean),执行 postProcessBeforeInitialization</li><li>如果 Bean 实现 InitializingBean 执行 afterPropertiesSet</li><li>调用自定义的 init-method 方法</li><li>如果存在类实现 BeanPostProcessor(处理 Bean),执行 postProcessAfterInitialization</li><li>执行业务处理</li><li>如果 Bean 实现 DisposableBean 执行 destroy</li><li>调用自定义的 destroy-method</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bean类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanLifeCycle</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanLifeCycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第一步:实例化BeanLifeCycle对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第九步:自定义功能add....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第二步:属性name的注入"</span> + name);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第三步:得到bean的id或name值:"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"第四步:得到ApplicationContext对象:"</span> + applicationContext);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第六步:属性注入完成后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第七步:自定义的init方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"第十步:执行destroy方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第十一步:执行自定义的销毁方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BeanPostProcess实现，配置后对所有的bean有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcess</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第五步:beanPostProcessor的before方法"</span>);</span><br><span class="line">        System.out.println(<span class="string">"处理的bean是"</span> + bean + <span class="string">" 它的名称是"</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第八步:beanPostProcessor的after方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">    ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    BeanLifeCycle beanLife = (BeanLifeCycle) applicationContext.getBean(<span class="string">"beanLifeCycle"</span>);</span><br><span class="line">    beanLife.add();</span><br><span class="line">    applicationContext.close();</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanLifeCycle"</span> <span class="attr">class</span>=<span class="string">"com.znvoid.domain.BeanLifeCycle"</span> <span class="attr">init-method</span>=<span class="string">"myInit"</span> <span class="attr">destroy-method</span>=<span class="string">"myDestroy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"world"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.znvoid.utils.MyBeanPostProcess"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><blockquote><p>在 spring 中 bean 的属性注入有两种</p></blockquote><h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beann</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SPEL"><a href="#SPEL" class="headerlink" title="SPEL"></a>SPEL</h2><blockquote><p>在 spring3.0 以后的版本提供,格式：#{表达式}</p></blockquote><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><blockquote><p><code>&lt;context:annotation-config /&gt;</code>,它代表的是可以使用 spring 的注解<br><code>&lt;context:component-scan base-package=&quot;包名&quot;&gt;</code>指定spring扫描的包，包含了 <code>&lt;context:annotation-config /&gt;</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;context:annotation-config /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 下面的配置作用是指定spring扫描的包,它包含了context:annotation-config的功能，所以在开发中一般就不需要在配置上面的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.znvoid"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean注册"><a href="#bean注册" class="headerlink" title="bean注册"></a>bean注册</h3><blockquote><p>使用@Component在类上<br>三个衍生的注解<br>@Rpository 用于 DAO 层<br>@Service 用于 service 层<br>@Controller 用于表现层<br>注意功能相同只是便于阅读</p></blockquote><pre><code>@Component(&quot;user&quot;)public class User {}</code></pre><h3 id="属性注解注入"><a href="#属性注解注入" class="headerlink" title="属性注解注入"></a>属性注解注入</h3><ol><li><p>简单属性注解注入</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"tom"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>复杂属性的注解注入</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Iuser user;</span><br></pre></td></tr></table></figure></li></ol><p>注意可以在属性上也可以在set方法上，在属性上时不用提供set方法</p><h3 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h3><ol><li>@Scope   描述bean的作用域</li><li>@PostConstruct  自定义的初始化方法</li><li>@PreDestory  自定义销毁方法，只对scope为sigleton有效</li></ol><h2 id="spring整合Junit4测试"><a href="#spring整合Junit4测试" class="headerlink" title="spring整合Junit4测试"></a>spring整合Junit4测试</h2><ol><li>导入jar包<br> spring-test-xxx.jar</li><li>添加注释<br> @RunWith(SpringJUnit4ClassRunner.class) // spring整合junit4<br> @ContextConfiguration(locations = “classpath:applicationContext.xml”) // 指spring配置文件位置<br> public class IOCTest {</li><li>使用<br> @Autowired<br> private User user;<br> @Test<br> public void test2() {<pre><code>system.out.println(user.getUsername);</code></pre> }</li></ol><h2 id="web开发中的应用"><a href="#web开发中的应用" class="headerlink" title="web开发中的应用"></a>web开发中的应用</h2><ol><li>在 web 项目中要使用 spring 需要导入一个 jar 包<br> spring-web-xxx.jar</li><li><p>在web.xml文件中配置Listener</p><pre><code>&lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;listener&gt;</code></pre></li><li><p>我们还需要在 web.xml 文件中配置 applicationContext.xml 文件的位置默认情况下会在 WEB-INF 目录 下查找 applicationContext.xmls如果 applicationContext.xml 文件不是在默认位置，我们可以在 web.xml 文件中配置</p><pre><code>&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath:aplicatinContext.xml&lt;/param-value&gt;&lt;/context-param&gt;</code></pre></li></ol>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Sping框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hibernate二</title>
      <link href="/JavaWeb/Hibernate%E6%A1%86%E6%9E%B6/Hibernate%E4%BA%8C/"/>
      <url>/JavaWeb/Hibernate%E6%A1%86%E6%9E%B6/Hibernate%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h1><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><blockquote><p>然主键和代理主键</p><blockquote><p>自然主键：具有业务含义 字段 作为主键，比如：学号、身份证号<br>代理主键：不具有业务含义 字段作为主键（例如 自增 id），比如：mysql 自增主键，oracle 序列生成的主键、uuid()方法生成的唯一序列串<br>==<code>建议：企业开发中使用代理主键！</code>==</p></blockquote></blockquote><p>在 hbm.xml 中可以设置的主键生成策略如下</p><table><thead><tr><th>主键生成器</th><th>描述</th></tr></thead><tbody><tr><td>increment</td><td>代理主键。由 hibernate 维护一个变量，每次生成主键时自动以递增。问题：如果有多个应用访问一个数据库，由于每个应用维护自己的主键，所以此时主键可能冲突。建议不采用。</td></tr><tr><td>identity</td><td>代理主键。由底层数据库生成表识符。条件是数据库支持自动增长数据类型。比如：mysql 的自增主键，oracle 不支持主键自动生成。如果数据库支持自增建议采用</td></tr><tr><td>sequence</td><td>代理主键。Hibernate 根据底层数据库序列生成标识符。条件是数据库支持序列。比如 oracle 的序列。如果数据库支持序列建议采用。</td></tr><tr><td>native</td><td>代理主键。根据底层数据库对自动来选择 identity、sequence、hilo由于生成主键策略的控制权由 hibernate 控制，所以不建议采用。</td></tr><tr><td>uuid</td><td>代理主键。Hibernate 采用 128 位的 UUID 算法来生成标识符。该算法能够在网络环境中生成唯一的字符串标识符。此策略可以保证生成主键的唯一性，并且提供了最好的数据库插入性能和数据库平台的无关性。建议采用。</td></tr><tr><td>assigned</td><td>自然主键。由 java 程序负责生成标识符。不建议采用。</td></tr></tbody></table><h2 id="对象的状态"><a href="#对象的状态" class="headerlink" title="对象的状态"></a>对象的状态</h2><h3 id="持久化类类三种状态介绍"><a href="#持久化类类三种状态介绍" class="headerlink" title="持久化类类三种状态介绍"></a>持久化类类三种状态介绍</h3><ol><li>瞬时态：也叫做临时态或自由态，它一般指我们 new 出来的对象，它不存在 OID,与 hibernate session 无关联，在数据库中也无记录。它使用完成后，会被 jvm 直接回收掉，它只是用于信息携带。简单说：无 OID 与数据库中的信息无关联，不在 session 管理范围内。</li><li>持久态：在 hibernate session 管理范围内，它具有持久化标识 OID 它的特点，在事务未提交前一直是持久态，当它发生改变时，hibernate 是可以检测到的。简单说：有 OID 由 session 管理，在数据库中有可能有，也有可有没有。</li><li>托管态：也叫做游离态或离线态，它是指持久态对象失去了与 session 的关联，托管态对象它存在 OID,在数据库中有可能存在，也有可能不存在。对于托管态对象，它发生改变时 hibernet 不能检测到。</li></ol><h3 id="类三种状态切换"><a href="#类三种状态切换" class="headerlink" title="类三种状态切换"></a>类三种状态切换</h3><p><img src="" alt="图三"></p><ol><li>瞬时态(new 出来的)<br> 瞬时——持久 save saveOrUpdate<br> 瞬时—–脱管(游离) 手动设置 oid</li><li><p>.持久态 它是由 session 管理<br> 持久——-瞬时 delete() 被删除后持久化对象不在建议使用<br> 持久—–脱管 注意:session 它的缓存就是所说的一级缓存<br> evict(清除一级缓存 中指定的一个对象)<br> clear(清空一级缓存)<br> close(关闭，清空一级缓存)</p></li><li><p>脱管态 （它是无法直接获取）<br> 脱管—–瞬时 直接将 oid 删除<br> 脱管—-持久 update saveOrUpdate lock(过时)</p></li></ol><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><blockquote><p>Hibernate 的一级缓存就是指 session 缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> ActionQueue actionQueue;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> StatefulPersistenceContext persistenceConteext;</span><br></pre></td></tr></table></figure><p>actionQueue 它是一个行列队列，它主要记录 crud 操作的相关信息<br>persistenceContext 它是持久化上下文，它其实是真正缓存。</p><p>在 session 中定义了一系列的集合来存储数据，它们构成 session 缓存。<br>只要 session 没有关闭，它就会一直存在。</p><p>当我们通过 hibernate 中的 session 提供的一些 API 例如 save get update 等进行操作时，就会将持久化对象保存到 session 中，当下一次在去查询缓存中具有的对象(OID 值来判断)，就不会去从数据库查询，而是直接从缓存中获取。<br>Hibernate 的一级缓存存在的目的就是为了减少对数据库访问。</p><p>在 hibernate 中还有一个二级缓存，它是 SessionFactory 级别缓存。</p><h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Configuration configure = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">SessionFactory sessionFactory = configure.buildSessionFactory();</span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">session.beginTransaction();</span><br><span class="line"><span class="comment">//查询到后会将c存储到一级缓存中</span></span><br><span class="line">Customer c = session.get(Customer.class, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//会从一级缓存中查询，而不会向数据库发送sql</span></span><br><span class="line">Customer cc = session.get(Customer.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(c==cc);</span><br><span class="line">session.getTransaction().commit();</span><br><span class="line">session.close();</span><br><span class="line">sessionFactory.close();</span><br></pre></td></tr></table></figure><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><p>clear 清空一级缓存.<br>evict 清空一级缓存中指定的一个对象。<br>refresh 重新查询数据库，用数据库中信息来更新一级缓存与快照</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Configuration configure = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">    SessionFactory sessionFactory = configure.buildSessionFactory();</span><br><span class="line">    Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; list =session.createQuery(<span class="string">"form Customer"</span>);</span><br><span class="line">    session.clear();<span class="comment">//清空一级缓存</span></span><br><span class="line">    <span class="comment">//会先从session一级缓存中获取，如果不存在才会从数据库中获取</span></span><br><span class="line">    Customer c =session.get(Customer.class,<span class="number">1</span>);</span><br><span class="line">    session.evict(c);<span class="comment">//从一级缓存中删除一个指定的对象</span></span><br><span class="line">    Customer cc =session.get(Customer.class,<span class="number">1</span>);</span><br><span class="line">    cc.setName(<span class="string">"kkk"</span>)</span><br><span class="line">    session.refresh(cc);<span class="comment">//重新查询数据库，用数据库中的信息更新一级缓存与快照</span></span><br><span class="line"></span><br><span class="line">    session.getTransaction().commit();</span><br><span class="line">    session.close();</span><br><span class="line">    sessionFactory.close();</span><br></pre></td></tr></table></figure><h2 id="持久化对象自动更新数据库"><a href="#持久化对象自动更新数据库" class="headerlink" title="持久化对象自动更新数据库"></a>持久化对象自动更新数据库</h2><blockquote><p>当事务提交，session关闭，向数据库发送请求时，会判断一级缓存中的数据是否与快照区的一致，如果不一致，就会发送sql语句。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Configuration configure = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">    SessionFactory sessionFactory = configure.buildSessionFactory();</span><br><span class="line">    Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer c = session.get(Customer.class, <span class="number">1</span>);</span><br><span class="line">    c.setName(<span class="string">"tom"</span>);<span class="comment">//修改持久化对象修改属性</span></span><br><span class="line"></span><br><span class="line">    session.getTransaction().commit();</span><br><span class="line">    session.close();</span><br><span class="line">    sessionFactory.close();</span><br></pre></td></tr></table></figure><h2 id="Hibernate映射关系"><a href="#Hibernate映射关系" class="headerlink" title="Hibernate映射关系"></a>Hibernate映射关系</h2><blockquote><p>Hibernate框架基于ORM设计思想，它将关系型数据库中的表与我们java中的类进行映射，一个对象就对应着表中的一条记录，而表中的字段对应着类中的属性</p></blockquote><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><ol><li>唯一外键对应:在任意一方添加外键来描述对应关系</li><li>主键对应：一方的主键作为另一方的主键</li></ol><h3 id="一对多-多对一"><a href="#一对多-多对一" class="headerlink" title="一对多(多对一)"></a>一对多(多对一)</h3><blockquote><p>在多的一方添加外键来描述关联关系</p></blockquote><ol><li><p>实体类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//订单---多的一方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Double total;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//描述订单属于某个客户</span></span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户-----一的一方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//客户可以有多个订单</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Order.hbm.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.xx.domain.Customer"</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Customer.hbm.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.xx.domain.Order"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setName(<span class="string">"tom"</span>);</span><br><span class="line"></span><br><span class="line">Order o1= <span class="keyword">new</span> Order();</span><br><span class="line">Order o2= <span class="keyword">new</span> Order();</span><br><span class="line">o1.setTotal(<span class="number">100</span>d);</span><br><span class="line">o2.setTotal(<span class="number">200</span>d);</span><br><span class="line"></span><br><span class="line">o1.setAddress(<span class="string">"北京"</span>);</span><br><span class="line">o2.setAddress(<span class="string">"上海"</span>);</span><br><span class="line"></span><br><span class="line">o1.setCustomer(customer);</span><br><span class="line">o2.setCustomer(customer);</span><br><span class="line">customer.getOrders().add(o1);</span><br><span class="line">customer.getOrders().add(o2);</span><br><span class="line"></span><br><span class="line">session.save(customer);</span><br><span class="line">session.save(o1);</span><br><span class="line">session.save(o2);</span><br></pre></td></tr></table></figure></li></ol><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><blockquote><p>通过一张中间表来描述其对应关系</p></blockquote><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><blockquote><p>保存订单时保存客户，需要在订单的hbm配置文件中修改<br>设置cascade=save-update 那么在保存订单时就可以自动将客户保存</p></blockquote><h3 id="双向关联维护"><a href="#双向关联维护" class="headerlink" title="双向关联维护"></a>双向关联维护</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inverse属性来设置，双向关联时由哪一方来维护表与表之间的关系</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>nverse它的值如果为true代表，由对方来维护外键。<br>Inverse它的值如果为false代表，由本方来维护外键。<br>关于inverse的取值:<br>    外键在哪一个表中，我们就让哪一方来维护外键。</p>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Hibernate框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hibernate一</title>
      <link href="/JavaWeb/Hibernate%E6%A1%86%E6%9E%B6/Hibernate%E4%B8%80/"/>
      <url>/JavaWeb/Hibernate%E6%A1%86%E6%9E%B6/Hibernate%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h1><blockquote><p>ORM框架，对jdbc的封装完成对数据库的操作</p></blockquote><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>基本配置</li><li>常用AP</li><li>关联映射</li><li>检索方式</li><li>优化方式</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>Hibernate对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码</li><li>Hibernate是一个基于jdbc的主流持久化框架，是一个优秀的orm实现，它很大程度的简化了dao层编码工作</li><li>Hibernate是企业级开发中主流框架。映射的灵活性很出色。它支持很多关系型数据库</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><blockquote><p>下载hibernate的jar包</p></blockquote><ol><li>导入相关的jar包</li><li>数据库连接的jar包</li><li>日志jar包及日志配置文件</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="映射配置文件"><a href="#映射配置文件" class="headerlink" title="映射配置文件"></a>映射配置文件</h4><blockquote><p>用于描述实体类与数据表之间的映射关系。<br>位置:要与实体类在同一个包下<br>名称:类名.hbm.xml<br>约束:hibernate 核心 jar 包下的 org.hibernate 包下 hibernate-mapping-3.0.dtd 文件中查找</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC  "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- packgae 包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.xx.domain"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 packgae未设置时name属性它是实体类的全名 table 表的名称 catalog 数据库名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Customer"</span> <span class="attr">table</span>=<span class="string">"t_customer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">catalog</span>=<span class="string">"hibernateTest"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id它是用于描述主键 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span>  <span class="comment">&lt;!-- java数据类型 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 主键生成策略 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用property来描述属性与字段的对应关系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"c_name"</span> <span class="attr">length</span>=<span class="string">"20"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- hibernate数据类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"c_address"</span> <span class="attr">length</span>=<span class="string">"50"</span> <span class="attr">sql-type</span>=<span class="string">"varchar(50)"</span>&gt;</span><span class="tag">&lt;/<span class="name">column</span>&gt;</span> <span class="comment">&lt;!-- sql数据类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置关系属性：一个客户关联多个订单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"c_customer_id"</span> /&gt;</span><span class="comment">&lt;!-- 指定查询order的外键，与 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.xxx.domain.Order"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h4><blockquote><p>包含了连接数据库相关信息，hibernate 相关配置<br>等。<br>位置:在 src 下创建一个 hibernate.cfg.xml<br>约束:hiberante 核心 jar 包下的 org.hibernate 包下  hibernate-configuration-3.0.dtd</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置关于数据库连接的四个项 driverClass url username password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernateTest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置连接提供者 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.max_size"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 最大连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.min_size"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 最小连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.timeout"</span>&gt;</span>120<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 超时 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 空闲连接 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 用于设置事务提交方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 可以将向数据库发送的sql显示出来 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式化sql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- hibernate的方言 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动创建表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置hibernate的映射文件所在位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/xxx/domain/Customer.hbm.xml"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/xxx/domain/Order.hbm.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pojo 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> Demo&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Configuration configure = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        SessionFactory sessionFactory = configure.buildSessionFactory();</span><br><span class="line">        Session session = sessionFactory.openSession();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        session.beginTransaction();</span><br><span class="line">        <span class="comment">//业务操作</span></span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">        c.setName(<span class="string">"tom"</span>);</span><br><span class="line">        c.setAddress(<span class="string">"北京"</span>);</span><br><span class="line">        session.save(c);</span><br><span class="line">        <span class="comment">//提交</span></span><br><span class="line">        session.getTransaction().commit();</span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工作原理及步骤"><a href="#工作原理及步骤" class="headerlink" title="工作原理及步骤"></a>工作原理及步骤</h2><ol><li>加载 hibernate 的配置文件，读取配置文件的参数(jdbc 连接参数，数据 库方言，hbm 表与对象关系映射文件)</li><li>创建 SessionFactory 会话工厂(内部有连接池)</li><li>打开 session 获取连接，构造 session 对象(一次会话维持一个数据连接， 也是一级缓存)</li><li>开启事务</li><li>进行操作</li><li>提交事务</li><li>关闭 session(会话)将连接释放</li><li>关闭连接池</li></ol><p><img src="" alt="图2"></p><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><h3 id="核心配置文件配置"><a href="#核心配置文件配置" class="headerlink" title="核心配置文件配置"></a>核心配置文件配置</h3><blockquote><p>对于hibernate的核心配置文件有两种方式</p></blockquote><pre><code>1. hibernate.cfg.xml2. hibernate.properties</code></pre><blockquote><p>开发中使用比较多的是 hibernate.cfg.xml 这种方式，原因它的配置能力更强，易于修改</p></blockquote><ol><li><p>加载数据库相关的信息（必要的）</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--url--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernateTest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>hibernate 相关配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于设置事务提交方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以将向数据库发送的sql显示出来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 格式化sql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--必要的 hibernate的方言,指定连接的数据库是MySQL或是Oracle等 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动创建表</span></span><br><span class="line"><span class="comment">Create-drop 每次都会创建一个新的表，执行完成后删除。一般在测试中使用</span></span><br><span class="line"><span class="comment">Create 每次都会创建一个新的表,一般是在测试中使用</span></span><br><span class="line"><span class="comment">update 如果数据库中有表，不创建，没有表创建，如果映射不匹配，会自动更新表结</span></span><br><span class="line"><span class="comment">构(只能添加)</span></span><br><span class="line"><span class="comment">validate 只会使用存在的表，并且会对映射关系进行校验</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加载映射配置文件（必要）</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置hibernate的映射文件所在位置 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/xxx/domain/Customer.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/xxx/domain/Order.hbm.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>连接池</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置连接提供者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- c3p0连接池的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.max_size"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 最大连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.min_size"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 最小连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.timeout"</span>&gt;</span>120<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 超时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 空闲连接 --&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ol><h3 id="映射文件配置"><a href="#映射文件配置" class="headerlink" title="映射文件配置"></a>映射文件配置</h3><blockquote><p>映射配置文件它的名称是类名.hbm.xml，它一般放置在实体类所在的包下</p></blockquote><ol><li><p>统一声明包名，这样在<code>&lt;clss&gt;</code>中就不需要写累的全名了<br> <code>&lt;hibernate-mapping package=&quot;com.itheima.domain&quot;&gt;</code></p></li><li><p>关于<code>&lt;class&gt;</code>标签的配置</p><pre><code>name 属性:类的全名称table 表的名称,可以省略，这时表的名称就与类名一致catalog 属性:数据库名称 可以省略.如果省略，参考核心配置文件中 url 路径中的库名称</code></pre></li><li><p>关于<code>&lt;id&gt;</code>标签</p><pre><code>首先它必须存在。&lt;id&gt;是用于建立类中的属性与表中的主键映射。name 类中的属性名称column 表中的主键名称 column 它也可以省略，这时列名就与类中属性名称一致length 字段长度type 属性 指定类型&lt;generator&gt;它主要是描述主键生成策略.</code></pre></li><li><p>关于<code>&lt;property&gt;</code>标签</p></li></ol><blockquote><p>它是描述类中属性与表中非主键的映射关系</p></blockquote><h2 id="Hibernate-常用-API"><a href="#Hibernate-常用-API" class="headerlink" title="Hibernate  常用 API"></a>Hibernate  常用 API</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><blockquote><p>加载 hibernate 配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要加载 src 下的 hibernate.cfg.xml</span></span><br><span class="line">Configuration config=<span class="keyword">new</span> Configuration().config();</span><br><span class="line"><span class="comment">//主要加载的 src 下的 hibernate.properties</span></span><br><span class="line">Configuration config=<span class="keyword">new</span> Configuration();</span><br><span class="line"><span class="comment">//加载指定的名称的配置文件</span></span><br><span class="line">Configuration config=<span class="keyword">new</span> Configuration().config(核心配置文件名称);</span><br></pre></td></tr></table></figure><h3 id="sessionFactory"><a href="#sessionFactory" class="headerlink" title="sessionFactory"></a>sessionFactory</h3><blockquote><p>接口，负责初始化 Hibernate。它充当数据存储源的代理，并负责创建 Session<br>对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过 Configuration 得到SessionFactory</span></span><br><span class="line">SessionFactory sessionFactory = configure.buildSessionFactory();</span><br></pre></td></tr></table></figure><blockquote><p>注意的是 SessionFactory 并不是轻量级的，因为一般情况下，一个项目通常只需要一个 SessionFactory 就够，当需要操作多个数据库时，可以为每个数据库指定一个 SessionFactory</p></blockquote><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><blockquote><p>责执行被持久化对象的 CRUD 操作,Session 对象是非线程安全的</p></blockquote><ol><li><p>获取</p><pre><code>SessionFactory.openSession() ; 相当于直接通过 SessionFactory 创建一个新的 Session,使用完成后要手动调用 close 来关闭。SessionFactory.getCurrentSession(); 获取一个与线程绑定的 Session,当我们提交或事务回滚后会自动关闭。</code></pre></li><li><p>常用的方法:</p><ul><li>save 保存对象</li><li>update 修改操作</li><li>delete 删除</li><li>get/load 根据 id 进行查询</li><li>savenOrUpdate 执行 save 或 update 操作</li><li>createQuery()获取一个 Query 对象</li><li>CreateSQLQUery()获取一个可以操作 sql 的 SQLQuery 对象</li><li>createCriteria() 获取一个 Criteria 它可以完成条件查询</li></ul></li><li><p>示例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取session</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">session.beginTransaction();</span><br><span class="line"><span class="comment">//CRDU</span></span><br><span class="line">session.save(c);</span><br><span class="line"><span class="comment">//事务提交</span></span><br><span class="line">session.getTransaction().commit();</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure></li></ol><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><blockquote><p>管理事务，它是 hibernate 的事务接口，对底层的事务进行了封装</p></blockquote><ol><li>获取<br> <code>session.beginTransaction();</code></li><li>事务操作<pre><code>commit 事务提交rollback 事务回滚</code></pre></li><li><p>默认情况下事务是不会自动提交的,可在在核心配置文件中开启配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于设置事务提交方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><blockquote><p>Query 接口让你方便地对数据库及持久对象进行查询，它可以有两种表达方式：HQL 语言或本地数据库的 SQL 语句</p></blockquote><h4 id="HQL"><a href="#HQL" class="headerlink" title="HQL"></a>HQL</h4><h5 id="查询所有操作"><a href="#查询所有操作" class="headerlink" title="查询所有操作"></a>查询所有操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer"</span>);<span class="comment">//from后面是类名</span></span><br><span class="line">List list = query.list();</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Query query = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line"><span class="comment">//设置起始的查询位置</span></span><br><span class="line">query.setFirstResult(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//设置一页的数量</span></span><br><span class="line">query.setMaxResults(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//上面的两句相当于limit 10,10</span></span><br><span class="line">List list = query.list();</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h5 id="查询指定列信息"><a href="#查询指定列信息" class="headerlink" title="查询指定列信息"></a>查询指定列信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Query query = session.createQuery("select name,address from Customer"); //这时我们得到的不在是Customer对象，而是Object[]</span></span><br><span class="line"><span class="comment">// List&lt;Object[]&gt; list = query.list();</span></span><br><span class="line">Query query = session.createQuery(<span class="string">"select new Customer(name,address) from Customer"</span>);</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"><span class="comment">// 我们可不可以得到List&lt;Customer&gt;,我们要想得到这个结果，可以使用hibernate中投影查询。我们只需要在Customer类中提供name与address做为参数的构造方法</span></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><blockquote><p>可以使用 where 关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询name=姓名0的信息</span></span><br><span class="line"><span class="comment">// Query query = session.createQuery("from Customer where name=?");</span></span><br><span class="line"><span class="comment">// //无名称参数</span></span><br><span class="line"><span class="comment">// 要对参数进行赋值</span></span><br><span class="line"><span class="comment">// query.setParameter(0, "姓名0");</span></span><br><span class="line"></span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer where name=:myname"</span>); <span class="comment">// 有名称参数</span></span><br><span class="line"><span class="comment">// 对有名称参数进行赋值</span></span><br><span class="line">query.setParameter(<span class="string">"myname"</span>, <span class="string">"姓名0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// List&lt;Customer&gt; list = query.list();</span></span><br><span class="line"><span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果能保证结果就是唯一的，那么可以使用</span></span><br><span class="line">Customer c = (Customer) query.uniqueResult();</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure><h4 id="SQLQuery"><a href="#SQLQuery" class="headerlink" title="SQLQuery"></a>SQLQuery</h4><p>要想执行本地 sql<br>SQLQuery sqlQuery=session.createSqlQuery(String sql);<br>使用 addEntity 方法来将结果封装到指定的对象中，如果不封装，得到的是 List<object><br>如果 sql 中有参数，我们使用 setParameter 方法完成参数传递。<br>如果结果就是一个可以使用 uniqueResult()来得到一个单独对象。</object></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行select * from t_customer;</span></span><br><span class="line">SQLQuery sqlQuery = session.createSQLQuery(<span class="string">"select * from t_customer"</span>);</span><br><span class="line"><span class="comment">// List&lt;Object[]&gt; list = sqlQuery.list();</span></span><br><span class="line"><span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要将结果封装到Customer对象中</span></span><br><span class="line">sqlQuery.addEntity(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = sqlQuery.list();</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h4 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h4><blockquote><p>Criteria 接口与 Query 接口非常类似，允许创建并执行面向对象的标准化查询。值得注意的是 Criteria 接口也是轻量级的，它不能在 Session 之外使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到Criteria</span></span><br><span class="line">Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="comment">// List&lt;Customer&gt; list = criteria.list();</span></span><br><span class="line"><span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line"><span class="comment">// criteria.setFirstResult(firstResult)</span></span><br><span class="line"><span class="comment">// criteria.setMaxResults(maxResults)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多条件查询</span></span><br><span class="line"><span class="comment">// 1.查询name='姓名1'</span></span><br><span class="line"><span class="comment">//criteria.add(Restrictions.eq("name", "姓名1")); // where name='姓名1';</span></span><br><span class="line"><span class="comment">// 2.查询address='上海'</span></span><br><span class="line"><span class="comment">//criteria.add(Restrictions.eq("address", "上海"));</span></span><br><span class="line"><span class="comment">//Customer c = (Customer) criteria.uniqueResult();</span></span><br><span class="line"><span class="comment">//System.out.println(c);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询name='姓名1' 或者   address='上海'</span></span><br><span class="line">criteria.add(Restrictions.or(Restrictions.eq(<span class="string">"name"</span>, <span class="string">"姓名1"</span>),Restrictions.eq(<span class="string">"address"</span>,<span class="string">"上海"</span>)));</span><br><span class="line">List&lt;Customer&gt; list = criteria.list();</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Hibernate框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2三</title>
      <link href="/JavaWeb/Struts%E6%A1%86%E6%9E%B6/Struts2%E4%B8%89/"/>
      <url>/JavaWeb/Struts%E6%A1%86%E6%9E%B6/Struts2%E4%B8%89/</url>
      <content type="html"><![CDATA[<h1 id="Struts2三"><a href="#Struts2三" class="headerlink" title="Struts2三"></a>Struts2三</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li>struts2文件上传</li><li>struts2AJax开发</li><li>注解开发</li></ol><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote><p>struts2框架支持文件上传,使用一个fileUpload的interceptor来完成</p></blockquote><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>文件上传的jsp页面</p><ul><li>form表单提交方式为post</li><li>有input标签type属性值为file</li><li>form表单有enctype=’multipart/form-data’<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/fileUpload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建action类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadAction</span> </span>&#123;</span><br><span class="line">    <span class="comment">//要与页面type='file'的input标签的name属性值一致</span></span><br><span class="line">    <span class="keyword">private</span> File upload;</span><br><span class="line">    <span class="keyword">private</span> String uploadContentType; <span class="comment">// 上传文件的mimeType类型</span></span><br><span class="line">    <span class="keyword">private</span> String uploadFileName; <span class="comment">// 上传文件的名称</span></span><br><span class="line">    <span class="comment">//...set /get 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String path = ServletActionContext.getServletContext().getRealPath(<span class="string">"/upload"</span>); <span class="comment">// 得到upload目录在tomcat的绝对磁盘路径</span></span><br><span class="line">        <span class="comment">// 创建一个服务器端文件</span></span><br><span class="line">        File dest = <span class="keyword">new</span> File(path, uploadFileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 完成文件上传操作</span></span><br><span class="line">            FileUtils.copyFile(upload, dest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>文件大小控制 在default.properties中 struts.multipart.maxSize=2097152  (2m)。它是描述文件上传时允许的最大值，只需要在struts.xml文件中<br> <code>&lt;constant name =&#39;struts.multipart.maxSize&#39; value=&quot;20971520&quot;&gt;</code></p></li><li><p>针对某一个action上传的文件大小限制,类型限制，在action中配置拦截器</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"fileUpload"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;param name="maximumSize"&gt;&lt;/param&gt; --&gt;</span> <span class="comment">&lt;!-- 设置每一个action允许的上传文件大小 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;param name="allowedTypes"&gt;&lt;/param&gt; --&gt;</span> <span class="comment">&lt;!-- 设置上传允许的文件的mimeType类型，多个使用逗号分开  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowedExtensions"</span>&gt;</span>bmp,txt<span class="tag">&lt;/<span class="name">param</span>&gt;</span> <span class="comment">&lt;!-- 设置上传文件允许的后缀名，多个使用逗号分开 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多文件上传，在action类中使用数组或list成员属性</p></li></ol><h2 id="AJax开发"><a href="#AJax开发" class="headerlink" title="AJax开发"></a>AJax开发</h2><h3 id="用HttpServletResponse响应数据"><a href="#用HttpServletResponse响应数据" class="headerlink" title="用HttpServletResponse响应数据"></a>用HttpServletResponse响应数据</h3><blockquote><p>在struts2框架中可以获取HttpServletResponse对象，就可以通过response来完成将数据(json)响应到浏览器过程</p></blockquote><h3 id="struts2框架的json插件"><a href="#struts2框架的json插件" class="headerlink" title="struts2框架的json插件"></a>struts2框架的json插件</h3><ol><li>将我们自己配置文件中的<code>&lt;package extends=”json-default”&gt;</code></li><li>Action的返回视图<code>&lt;result name=”” type=”json”&gt;</code></li><li>因为我们配置了上面两步，那么struts2框架就会将valueStack中的栈顶元素转换成json响应到浏览器</li></ol><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><blockquote><p>需要导入struts2-convention-plugin-2.3.24.jar</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Namespace</span>(<span class="string">"/"</span>)  <span class="comment">// 相当于  &lt;package  namespace="/"&gt;</span></span><br><span class="line"><span class="meta">@ParentPackage</span>(<span class="string">"struts-default"</span>) <span class="comment">// &lt;package extends="struts-default"&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;action name="hello" class=""  method=""&gt;</span></span><br><span class="line">    <span class="comment">//&lt;result name="" type=""&gt;/success.jsp&lt;/result&gt;</span></span><br><span class="line">    <span class="meta">@Action</span>(value=<span class="string">"hello"</span>,results=&#123;<span class="meta">@Result</span>(name=<span class="string">"success"</span>,location=<span class="string">"/success.jsp"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>们在action类中定义了注解，strtus2框架怎样识别它们?<br>原因:我们必须查看插件包中的配置<br>    <code>&lt;constant name=&quot;struts.convention.package.loctor&quot; value=&quot;action,actions,struts,struts2&quot;&gt;</code><br>是在action,actions,struts,struts2这样的包下扫描注解</p>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Struts框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2二</title>
      <link href="/JavaWeb/Struts%E6%A1%86%E6%9E%B6/Struts2%E4%BA%8C/"/>
      <url>/JavaWeb/Struts%E6%A1%86%E6%9E%B6/Struts2%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="Struts2知识学习二"><a href="#Struts2知识学习二" class="headerlink" title="Struts2知识学习二"></a>Struts2知识学习二</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>servlet API</li><li>ognl</li><li>valueStack</li><li>Inteceptor</li></ol><h2 id="获取Servlet-API"><a href="#获取Servlet-API" class="headerlink" title="获取Servlet API"></a>获取Servlet API</h2><blockquote><p>在Struts2 中如何获取Servlet的API?</p></blockquote><h3 id="ServletActionContext获取"><a href="#ServletActionContext获取" class="headerlink" title="ServletActionContext获取"></a>ServletActionContext获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">HttpServletResponse response = ServletActionContext.getResponse();</span><br><span class="line">ServletContext servletContext =ServletActionContext.getServletContext();</span><br></pre></td></tr></table></figure><h3 id="采用注入方式-action类实现接口"><a href="#采用注入方式-action类实现接口" class="headerlink" title="采用注入方式-action类实现接口"></a>采用注入方式-action类实现接口</h3><p>Struts2框架在运行时，请求会被StrutsPrepareAndExecuteFilter拦截，会根据请求，去strtus.xml文件中查找到匹配的action，在action执行前，会走一些interceptor</p><p>默认执行的拦截器是struts-default.xml文件中定义的。<br>在默认执行的拦截器中有一个</p><pre><code>&lt;interceptor-ref name=&quot;servletConfig&quot;&gt;&lt;interceptor name=&quot;servletConfig&quot; class=&quot;org.apche.struts2.interceptor.ServletConfigInterceptor&quot;&gt;</code></pre><p>通过看源码可知：<br>ServletRequestAware, 实现这个接口可以获取HttpServletRequest<br>ServletResponseAware ,实现这个接口可以获取HttpServletResponse<br>ServletContextAware实现这个接口可以获取ServletContext<br>…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span>, <span class="title">ServletResponseAware</span>, <span class="title">ServletContextAware</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse response;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletResponse</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletContext</span><span class="params">(ServletContext arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ognl表达式"><a href="#ognl表达式" class="headerlink" title="ognl表达式"></a>ognl表达式</h2><blockquote><p>Object-Graph Navigation Language(对象图导航语言)</p></blockquote><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ol><li>表达式Ognl</li><li>Context上下文</li><li>Root 根</li></ol><blockquote><p>在struts2框架中，OGNLContext的实现者为ActionContext(Stack Context)，而 OGNLContext中的Root Object是Value Stack，并且 Application、Session、Request等我们经常访问的对象(Map表示)都被放到了ActionContext中</p></blockquote><h3 id="支持对象的操作"><a href="#支持对象的操作" class="headerlink" title="支持对象的操作"></a>支持对象的操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String s="hello";</span></span><br><span class="line"><span class="comment">// int length = s.length();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.获取上下文对象OgnlContext</span></span><br><span class="line">OgnlContext context = <span class="keyword">new</span> OgnlContext(); <span class="comment">// 它就是一个java.util.Map</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.操作</span></span><br><span class="line">Object root = context.getRoot();</span><br><span class="line">Object value = Ognl.getValue(<span class="string">"'hello'.length()"</span>, context, root);</span><br><span class="line">System.out.println(value);</span><br></pre></td></tr></table></figure><h3 id="支持静态成员访问"><a href="#支持静态成员访问" class="headerlink" title="支持静态成员访问"></a>支持静态成员访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line">Object value = Ognl.getValue(<span class="string">"@java.lang.Math@random()"</span>, context, context.getRoot());</span><br><span class="line">Object value2 = Ognl.getValue(<span class="string">"@java.lang.Math@PI"</span>, context, context.getRoot());</span><br></pre></td></tr></table></figure><h3 id="ognl上下文"><a href="#ognl上下文" class="headerlink" title="ognl上下文"></a>ognl上下文</h3><blockquote><p>如果从根中获取数据，不需要添加#号，如果不是从根中获取，需要#</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">OgnlContext context = <span class="keyword">new</span> OgnlContext(); <span class="comment">// 它就是一个java.util.Map</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上下文中存储数据</span></span><br><span class="line">context.put(<span class="string">"username"</span>, <span class="string">"tom"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">Object value = Ognl.getValue(<span class="string">"#username"</span>, context, context.getRoot());</span><br><span class="line">System.out.println(value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储Map数据</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"fox"</span>);</span><br><span class="line"><span class="comment">// 将map存储到context的根中</span></span><br><span class="line">context.setRoot(map);</span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">Object value = Ognl.getValue(<span class="string">"username"</span>, context, context.getRoot());</span><br></pre></td></tr></table></figure><h3 id="操作集合"><a href="#操作集合" class="headerlink" title="操作集合"></a>操作集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object value = Ognl.getValue(<span class="string">"&#123;'hello','ognl','word'&#125;"</span>, context,context.getRoot()); <span class="comment">//相录于创建了一个List集合</span></span><br><span class="line"><span class="comment">//Object value = Ognl.getValue("#&#123;'username':'tom','password':'123'&#125;", context,context.getRoot()); //相录于创建了一个Map集合</span></span><br><span class="line">context.setRoot(value);</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"[0]"</span>,context, context.getRoot()));</span><br></pre></td></tr></table></figure><h2 id="Struts2框架中如何使用ognl"><a href="#Struts2框架中如何使用ognl" class="headerlink" title="Struts2框架中如何使用ognl"></a>Struts2框架中如何使用ognl</h2><h2 id="valueStack"><a href="#valueStack" class="headerlink" title="valueStack"></a>valueStack</h2><blockquote><p>将action中产生的数据携带到页面上,它是个容器</p></blockquote><p>一个valueStack对应一个action，valueStack贯穿整个action的生命周期。<br>rquest——-&gt;Action——&gt;ValueStack<br>struts2框架将valueStack保存在request中。</p><h3 id="valueStack内部结构"><a href="#valueStack内部结构" class="headerlink" title="valueStack内部结构"></a>valueStack内部结构</h3><blockquote><p>主要由两部分组成</p><ul><li>CompoundRoot:它就是一个ArrayList<br>它主要存储的是action的相关数据，ognl不加#</li><li>Map&lt;String,Object&gt; context:就是一个Map<br>Context中主要存储了一些引用，这个引用主要是关于web开发中相关信息，ognl加#</li></ul></blockquote><h3 id="获取valueStack"><a href="#获取valueStack" class="headerlink" title="获取valueStack"></a>获取valueStack</h3><ol><li><p>直接从request域中获取</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">ValueStack stack = (ValueStack)request.getAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY);</span><br></pre></td></tr></table></figure></li><li><p>通过ActionContext对象获取</p><p> ValueStack stack = ActionContext.getContext().getValueStack();</p></li></ol><h3 id="ActionContext"><a href="#ActionContext" class="headerlink" title="ActionContext"></a>ActionContext</h3><blockquote><p>action上下文，strtus2框架它使用actionContext来保存Action在执行过程中所需要的一些对象，例如 session, application…</p></blockquote><p>ActionContext的获取是通过它的静态方法getContext()得到。<br>Struts2会根据每一次的http请求来创建对应的ActionContext,它是与当前线程绑定的。<br>每一次请求，就是一个线程，对应着一个request,每一次请求，会创建一个Action,每一个action对应一个ActionContext.每一次请求也对应着一个valueStack.<br>request—ActionContext—-Action—–ValueStaci它们都对应着一次请求(一个线程).<br>valueStack与ActionContext本质上是可以获取</p><h3 id="valueStack操作"><a href="#valueStack操作" class="headerlink" title="valueStack操作"></a>valueStack操作</h3><blockquote><p>valueStack来存储数据时，主要是向root中存储</p></blockquote><h4 id="手动存储"><a href="#手动存储" class="headerlink" title="手动存储"></a>手动存储</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stack.put(<span class="string">"hello"</span>);<span class="comment">//向root中存储</span></span><br><span class="line">stack.set(<span class="string">"name"</span>,<span class="string">"value"</span>);<span class="comment">//底层会创建一个HashMap，保存数据，在将hashMap存储到root中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">user =new User();</span></span><br><span class="line"><span class="comment">user.setUsername("tom");</span></span><br><span class="line"><span class="comment">user.setPassword("123")</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="自动存储"><a href="#自动存储" class="headerlink" title="自动存储"></a>自动存储</h4><blockquote><p>每次请求，访问action，这个对象会存储到valueStack中<br>如果action实现了ModeDriver接口 会将mode对象存入valueStack中</p></blockquote><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span>%&gt;</span><br><span class="line">    &lt;!--手动存储后的取值示例--&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">"name"</span>&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">"[1].top"</span>&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">"model.username"</span>&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    $&#123;name&#125;</span><br><span class="line">    $&#123;model.username&#125;--&gt;</span><br></pre></td></tr></table></figure><blockquote><p>EL表达式能获取是因为Struts2框架对request进行了增强，重写了getAttribute方法，如果在request域中查找不到数据，就会在valueStack中获取。</p></blockquote><h2 id="Intercepter"><a href="#Intercepter" class="headerlink" title="Intercepter"></a>Intercepter</h2><blockquote><p>Struts2中的interceptor它是基于spring aop思想，而aop思想它本质上是通过动态代理来实现。strtus2的拦截器它主要是拦截Action的操作，在action的执行前或执行后进行一些其它的功能操作</p></blockquote><h3 id="执行的过程"><a href="#执行的过程" class="headerlink" title="执行的过程"></a>执行的过程</h3><blockquote><ol><li>当我们发送请求访问Action时，会被StrutsPrepareAndExecuteFilter拦截<br>在其doFilter方法内执行了 execute.executeAction(request, response, mapping);这个代码执行后dispatcher.serviceAction(request, response, mapping);</li><li>serviceAction方法执行<br>在这个方法执行过程中会创建Action代理对象ActionProxy proxy = getContainer().getInstance(ActionProxyFactory.class).createActionProxy(namespace, name, method, extraContext, true, false);<br>通过proxy去执行了proxy.execute();</li><li>在execute方法内<br>return invocation.invoke();<br>invocation它是ActionInvocation一个对象</li><li>在invoke方法内<br>会去加载我们的配置文件，将配置文件中所有的interceptor得到进行遍历</li></ol></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (interceptors.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">final</span> InterceptorMapping interceptor = interceptors.next();</span><br><span class="line">    String interceptorMsg = <span class="string">"interceptor: "</span> + interceptor.getName();</span><br><span class="line">    UtilTimerStack.push(interceptorMsg);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        resultCode = interceptor.getInterceptor().intercept(DefaultActionInvocation.<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        UtilTimerStack.pop(interceptorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resultCode = invokeActionOnly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>在每一个拦截器的interceptor方法内，又调用了DefaultActionInvocation的invoke方法，其实就是递归调用</li></ol></blockquote><h3 id="自定义Intercepter"><a href="#自定义Intercepter" class="headerlink" title="自定义Intercepter"></a>自定义Intercepter</h3><ol><li>创建一个类实现Intercept接口</li><li><p>在Struts.xml配置文件中配置intercept</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"MyInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在action中引入intercept</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Struts框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2一</title>
      <link href="/JavaWeb/Struts%E6%A1%86%E6%9E%B6/Struts2%E4%B8%80/"/>
      <url>/JavaWeb/Struts%E6%A1%86%E6%9E%B6/Struts2%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="Struts2一"><a href="#Struts2一" class="headerlink" title="Struts2一"></a>Struts2一</h1><h2 id="框架的概述"><a href="#框架的概述" class="headerlink" title="框架的概述"></a>框架的概述</h2><blockquote><p>用于解决或处理复杂的问题。</p><blockquote><p>优点：减少开发成本，缩短开发周期，有一定的标准，后期维护方便</p></blockquote></blockquote><h2 id="常用的框架"><a href="#常用的框架" class="headerlink" title="常用的框架"></a>常用的框架</h2><ul><li>SSH<br>  struts2 spring hibernate</li><li>SSM<br>  springmvc spring mybatis</li></ul><h2 id="服务器的三层结构"><a href="#服务器的三层结构" class="headerlink" title="服务器的三层结构"></a>服务器的三层结构</h2><ul><li><p>web层     跟页面交互</p></li><li><p>service层 处理业务逻辑</p></li><li><p>Dao层  数据库交互</p></li></ul><h2 id="Struts框架"><a href="#Struts框架" class="headerlink" title="Struts框架"></a>Struts框架</h2><blockquote><p>基于MVC设计模式的web应用框架，作为控制器来建立模型与视图的数据交互<br>Struts2=struts1 + webwork</p></blockquote><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ul><li>拦截器</li><li>action</li><li>ognl表达式 与valueStack</li></ul><p><img src="https://s1.ax1x.com/2018/07/05/PVvjKK.png" alt="Struts2结构"></p><h3 id="简单入门使用"><a href="#简单入门使用" class="headerlink" title="简单入门使用"></a>简单入门使用</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>导入相关的jar文件</p></li><li><p>在web.xml中配置一个Filter</p></li><li><p>struts.xml配置</p></li><li><p>创建action类完成逻辑</p></li></ol><h4 id="相关的jar包"><a href="#相关的jar包" class="headerlink" title="相关的jar包"></a>相关的jar包</h4><blockquote><p>13个jar包<br><img src="" alt="Struts的jar包图"></p></blockquote><h4 id="Filter配置"><a href="#Filter配置" class="headerlink" title="Filter配置"></a>Filter配置</h4><blockquote><p>在web.xml文件中配置StrutsPrepareAndExecuteFilter</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以声明struts2框架常量值，不推荐</span></span><br><span class="line"><span class="comment">    &lt;init-param&gt;</span></span><br><span class="line"><span class="comment">        &lt;param-name&gt;struts.i18n.encoding&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment">        &lt;param-value&gt;GBK&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment">    &lt;/init-param&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="struts-xml文件"><a href="#struts-xml文件" class="headerlink" title="struts.xml文件"></a>struts.xml文件</h4><blockquote><p>scr目录下,文件名是struts.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN" "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明常量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span> <span class="comment">&lt;!-- 可以帮助我们解决post请求乱码问题 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;constant name="struts.action.extension" value="action"&gt;&lt;/constant&gt; --&gt;</span><span class="comment">&lt;!-- 指定访问strtsu2框架路径的扩展名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置这项后，它会提供更加详细报错信息，以及在struts.xml文件修改后不在需要重启服务器 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        开启动态方法调用，调用action标签中为申明的方法，访问路径用!+方法名 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--全局result--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"url路径"</span> <span class="attr">clss</span>=<span class="string">"action类的全类名"</span> <span class="attr">method</span>=<span class="string">"要执行action类中的方法名"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"方法的返回值1"</span> <span class="attr">type</span>=<span class="string">"跳转的类型（重定向redirect或转发dispatcher）"</span>&gt;</span>跳转的路径<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"方法的返回值2"</span>&gt;</span>跳转的路径<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">actin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--具体示例 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;action name="login" class="web.action.LoginAction" method="login"&gt;</span></span><br><span class="line"><span class="comment">            &lt;result name="success" type="redirect"&gt;/success.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">            &lt;result name="fail"&gt;/fail.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">        &lt;/action&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- &lt;action name="bookadd" class="web.action.BookAction" method="addBook"&gt;&lt;/action&gt; </span></span><br><span class="line"><span class="comment">        &lt;action name="bookupdate" class="web.action.BookAction" method="updateBook"&gt;&lt;/action&gt; </span></span><br><span class="line"><span class="comment">        &lt;action name="bookdel" class="web.action.BookAction" method="delBook"&gt;&lt;/action&gt; </span></span><br><span class="line"><span class="comment">        &lt;action name="bookfind" class="web.action.BookAction" method="findBook"&gt;&lt;/action&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- action类继承ActionSupport，以上操作可以简化，使用*通配置来操作 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;action name="*_*" class="web.action.&#123;1&#125;Action" method="&#123;2&#125;"&gt;&lt;/action&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="package标签"><a href="#package标签" class="headerlink" title="package标签"></a>package标签</h5><blockquote><p>name 属性 定义包名，必须唯一<br>namespace 属性 和action标签的name属性联合使用来确定一个action的访问路径<br>extens 属性 指定继承那个包，一般值是struts-default<br>Abstuct属性   代表当前包是个抽象的</p></blockquote><h5 id="action标签"><a href="#action标签" class="headerlink" title="action标签"></a>action标签</h5><blockquote><p>name 属性 与package标签的namespace属性联合使用来确定action的访问路径<br>class 属性 action类的全类名<br>method属性 指示当前的action类中的哪个方法执行</p></blockquote><h5 id="result标签"><a href="#result标签" class="headerlink" title="result标签"></a>result标签</h5><blockquote><p>指示结果视图<br>name属性   与action类method方法的返回值对应<br>type属性   指定跳转方式，默认dispatcher</p></blockquote><h5 id="关于action配置中的class与method的默认值以及result中的name的默认值"><a href="#关于action配置中的class与method的默认值以及result中的name的默认值" class="headerlink" title="关于action配置中的class与method的默认值以及result中的name的默认值"></a>关于action配置中的class与method的默认值以及result中的name的默认值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以这样配置，--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在strtus-default.xml文件中配置<br><code>&lt;default-clss-ref class=&quot;com.opensymphony.xwork2.ActionSupport&quot;/&gt;</code><br>查找不到指定的class及对应的method就会执行ActionSupport类中的execute方法。<br>在这个类的execute方法中默认返回的是”success”。<br>也就是说，result的name属性默认值是success,默认的跳转方式是请求转发 dispatcher</p><h4 id="Action类"><a href="#Action类" class="headerlink" title="Action类"></a>Action类</h4><blockquote><p>三种方式</p><ul><li>pojo类<br>普通的java类 ，已在Struts.xml文件中配置，无耦合但所有功能都有自己完成<br>获取请求参数<blockquote><p>在类中设置成员变量(名字与请求参数名一致),提供set和get方法</p></blockquote></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span></span>&#123;</span><br><span class="line">    <span class="comment">//根据struts.xml文件中的配置，路径url为package标签的namespace+对应的action标签的name。当请求URL路径为/login 执行</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//业务逻辑处理</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="comment">/*处理结果*/</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"fail"</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个类实现Action接口</li></ul><blockquote><p>Action接口定义了五个常量和一个execute方法</p><blockquote><p>ERROR : 错误视图<br>INPUT: 它是struts2框架中interceptor中发现问题后会访问的一个视图<br>LOGIN:它是一个登录视图，可以在权限操作中使用<br>NONE:它代表的是null,什么都不做（也不会做跳转操作）<br>SUCCESS:这是一个成功视图</p></blockquote></blockquote><ul><li>创建一个类继承ActionSupport类</li></ul><blockquote><p>ActionSupport类也实现了Action接口<br>具有丰富的功能，如表单校验。。但耦合度高</p></blockquote><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ol><li><p>核心拦截器</p></li><li><p>struts.xml 匹配action</p></li><li><p>执行action类的方法中的业务逻辑</p></li><li>根据Action中方法的执行结果来选择来跳转页面Resutl视图</li></ol><h3 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h3><ol><li>default.properties 文件，声明了框架的常量</li><li>一批配置文件<ul><li>struts-default.xml    声明 intercept result bean</li><li>struts_plugin.xml     插件的配置声明</li><li>struts.xml            工程使用框架的配置</li></ul></li><li>自定义的struts.properties    定制常量</li><li>自定义配置提供</li><li>加载web.xml配置文件，框架在web.xml文件的相关配置</li><li>bean的相关配置</li></ol><h3 id="常量配置"><a href="#常量配置" class="headerlink" title="常量配置"></a>常量配置</h3><ol><li>在scr下的创建一个struts.properties文件</li><li>在web.xml配置</li><li>在struts.xml声明 推荐<br> <code>&lt;!-- 声明常量 --&gt;</code><br> <code>&lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt;</code></li></ol><h3 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h3><blockquote><p>两种方式</p></blockquote><ol><li><p>属性驱动</p><ul><li>直接在action类中提供与请求参数匹配属性，提供get/set方法</li><li><p>在action类中创始一个javaBean,对其提供get/set ，在请求时页面上要进行修改，例如user.usernameuser.password ,要使用ognl表达式</p><p>  <code>username:&lt;input type=&quot;text&quot; name=&quot;user.username&quot;&gt;&lt;br&gt;</code><br>  <code>password:&lt;input type=&quot;password&quot; name=&quot;user.password&quot;&gt;&lt;br&gt;</code></p><p>以上两种方式的优缺点:<br>第一种比较简单，在实际操作我们需要将action的属性在赋值给模型(javaBean)去操作<br>第二种:不需要在直接将值给javaBean过程，因为直接将数据封装到了javaBean中。它要求在页面上必须使用ognl表达式，就存在页面不通用问题。</p></li></ul></li><li>模型驱动<br> 1.让Action类要实现一个指定接口ModelDriven<br> 2.实例化模型对象(就是要new出来javaBean)<br> 3.重写getModel方法将实例化的模型返回。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//登录逻辑</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Struts框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaWeb Servlet过滤器Filter</title>
      <link href="/JavaWeb/JavaWeb-Filter/"/>
      <url>/JavaWeb/JavaWeb-Filter/</url>
      <content type="html"><![CDATA[<h1 id="JavaWeb-Servlet过滤器Filter"><a href="#JavaWeb-Servlet过滤器Filter" class="headerlink" title="JavaWeb Servlet过滤器Filter"></a>JavaWeb Servlet过滤器Filter</h1><h2 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h2><blockquote><p>Filter 可以过滤客户端向服务器发送的请求</p></blockquote><ul><li>编写一个类实现Filter接口</li><li>web.xml 配置过滤器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter类的全名<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>拦截的路径<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="过滤器生命周期"><a href="#过滤器生命周期" class="headerlink" title="过滤器生命周期"></a>过滤器生命周期</h2><ol><li>创建：服务器启动时</li></ol><blockquote><p>web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作，filter对象只会创建一次，init方法也只会执行一次。通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</p></blockquote><ol><li>销毁：服务器关闭时</li></ol><blockquote><p>Web容器调用destroy方法销毁Filter。destroy方法在Filter的生命周期中仅执行一次。在destroy方法中，可以释放过滤器使用的资源。</p></blockquote><h2 id="FilterConfig类"><a href="#FilterConfig类" class="headerlink" title="FilterConfig类"></a>FilterConfig类</h2><p>在过滤器初始化时传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">// 获得当前的Filter的名称:</span></span><br><span class="line">    String filterName = filterConfig.getFilterName();</span><br><span class="line">    System.out.println(filterName);</span><br><span class="line">    <span class="comment">// 获得初始化参数:</span></span><br><span class="line">    String username = filterConfig.getInitParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = filterConfig.getInitParameter(<span class="string">"password"</span>);</span><br><span class="line">    System.out.println(username+<span class="string">"   "</span>+password);</span><br><span class="line">    <span class="comment">// 获得所有的初始化参数的名称:</span></span><br><span class="line">    Enumeration&lt;String&gt; en = filterConfig.getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span>(en.hasMoreElements())&#123;</span><br><span class="line">        String name = en.nextElement();</span><br><span class="line">        String value = filterConfig.getInitParameter(name);</span><br><span class="line">        System.out.println(name+<span class="string">"    "</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题：配置Servlet服务器启动初始化，filter与Servlet的初始化顺序<br>Listener &gt; Filter &gt; Servlet，Listener的初始化最早，Filter次之。他俩的初始化都是在容器启动完成之前初始化的。Servlet没有初始化，原因是没有匹配的请求进来。如果想要servlet自动初始化，需要在指定的servlet中配置<code>&lt;load-on-startup&gt;</code>参数，没有此标签，默认启动时servlet不进行初始化。</p></blockquote><blockquote><p>初始化的顺序跟Listener、Filter、Servlet在web.xml中的顺序无关，而多个Filter或多个Servlet的时候，谁的mapping在前面，谁先初始化。当请求资源匹配多个 filter-mapping 时，filter 拦截资源是按照 filter-mapping 配置节出现的顺序来依次调用 doFilter() 方法的。</p></blockquote><blockquote><p>如果web.xml中配置了<code>&lt;context-param&gt;</code>，初始化顺序：context-param &gt; Listener &gt; Filter &gt; Servlet</p></blockquote><h2 id="FilterChain-过滤器链"><a href="#FilterChain-过滤器链" class="headerlink" title="FilterChain 过滤器链"></a>FilterChain 过滤器链</h2><blockquote><p>过滤器链中的过滤器的执行的顺序与<code>&lt;filter-mapping&gt;</code>的配置顺序有关.</p></blockquote><p><img src="http://os4z8t7lb.bkt.clouddn.com/201803110738_240.png" alt=""></p><blockquote><p>在一个web应用中，可以开发编写多个Filter，这些Filter组合起来称之为一个Filter链。<br>web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter，当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。</p></blockquote><h2 id="过滤器的相关配置"><a href="#过滤器的相关配置" class="headerlink" title="过滤器的相关配置"></a>过滤器的相关配置</h2><h3 id="配置"><a href="#配置" class="headerlink" title=" 配置"></a><url-pattern> 配置</url-pattern></h3><ul><li>完全路径匹配   以/开头 /demo.jsp</li><li>目录匹配      以/开头以*结束</li><li>扩展名匹配    不能以/开头，以<em>开始 如：</em>.jsp</li></ul><h3 id="配置-1"><a href="#配置-1" class="headerlink" title=" 配置"></a><dispatcher> 配置</dispatcher></h3><ul><li>REQUEST   :默认值  &nbsp;&nbsp;&nbsp;&nbsp;如果目标资源是通过<code>RequestDispatcher</code>的<code>include()</code>或<code>forward()</code>方法访问时，那么该过滤器就不会被调用。</li><li>FORWARD   ：转发 &nbsp;&nbsp;&nbsp;&nbsp;如果目标资源是通过<code>RequestDispatcher的include()</code>方法访问时，那么该过滤器将被调用</li><li>INCLUDE   ：包含 &nbsp;&nbsp;&nbsp;&nbsp;如果目标资源是通过<code>RequestDispatcher</code>的<code>forward()</code>方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。</li><li>ERROR     ：错误 &nbsp;&nbsp;&nbsp;&nbsp; 如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用</li></ul><h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><pre><code>登录时的分析：    登录成功后利用Cookie记住用户名和密码    用户名和密码拼接过滤器的分析：    判断session中是否有用户的信息:    session中如果有:放行.    session中没有:    从Cookie中获取:    Cookie中没有:放行.    Cookie中有:        获取Cookie中存的用户名和密码到数据库查询.        没有查询到:放行.        查询到:将用户信息存入到session . 放行.</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>登录部分代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录成功</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动登录</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"true"</span>.equals(request.getParameter(<span class="string">"autologin"</span>))) &#123;<span class="comment">//自动登录选择框被选择</span></span><br><span class="line">        Encrypt encrypt = <span class="keyword">new</span> Encrypt();<span class="comment">//字符串编码工具类</span></span><br><span class="line">        String autologin = encrypt.encrypt(account) + <span class="string">"-"</span> + encrypt.encrypt(password);</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"autologin"</span>, autologin);</span><br><span class="line">        cookie.setPath(request.getContextPath());</span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">    request.getSession().setAttribute(<span class="string">"user"</span>, existUser);</span><br></pre></td></tr></table></figure><blockquote><p>过滤器代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    HttpServletRequest req =(HttpServletRequest) request;</span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    User user =(User) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    <span class="keyword">if</span>(user==<span class="keyword">null</span>) &#123;<span class="comment">//判断是否已经登录成功</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        Cookie cookie = CookieUtil.findCookie(cookies, <span class="string">"autologin"</span>);</span><br><span class="line">        <span class="keyword">if</span>(cookie!=<span class="keyword">null</span>) &#123;<span class="comment">//从cookie中获取保存的账户和密码</span></span><br><span class="line">            String str =cookie.getValue();</span><br><span class="line">            <span class="keyword">boolean</span> mFlag = str.matches(<span class="string">"([A-Z]+)-([A-Z]+)"</span>);</span><br><span class="line">            <span class="keyword">if</span>(mFlag) &#123;</span><br><span class="line">                String[] strs = str.split(<span class="string">"-"</span>);</span><br><span class="line">                Encrypt encrypt = <span class="keyword">new</span> Encrypt();</span><br><span class="line">                <span class="keyword">try</span> &#123;<span class="comment">//解码出账户和密码</span></span><br><span class="line">                    String username = encrypt.dencrypt(strs[<span class="number">0</span>]);</span><br><span class="line">                    String password = encrypt.dencrypt(strs[<span class="number">1</span>]);</span><br><span class="line">                    user = <span class="keyword">new</span> User();</span><br><span class="line">                    user.setUsername(username);</span><br><span class="line">                    user.setPassword(password);</span><br><span class="line">                    <span class="comment">//从数据库匹配用户名和密码</span></span><br><span class="line">                    User existUser = <span class="keyword">new</span> UserServiceImpl().login(user);</span><br><span class="line">                    <span class="keyword">if</span>(existUser!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                        session.setAttribute(<span class="string">"user"</span>, existUser);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">chain.doFilter(req, response);</span><br></pre></td></tr></table></figure><h2 id="通用网站的字符集编码过滤器：代码实现"><a href="#通用网站的字符集编码过滤器：代码实现" class="headerlink" title="通用网站的字符集编码过滤器：代码实现"></a>通用网站的字符集编码过滤器：代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据请求方式不同,去处理:</span></span><br><span class="line">        <span class="comment">// 获得请求方式:</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"get"</span>.equalsIgnoreCase(method))&#123;</span><br><span class="line">            String value = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                value = <span class="keyword">new</span> String(request.getParameter(name).getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"post"</span>.equalsIgnoreCase(method))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器使用装饰后的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">    MyHttpServletRequestWrapper myReq = <span class="keyword">new</span> MyHttpServletRequestWrapper(req);</span><br><span class="line">    chain.doFilter(myReq, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ajax</title>
      <link href="/JavaWeb/JavaWeb-Ajax/"/>
      <url>/JavaWeb/JavaWeb-Ajax/</url>
      <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><blockquote><p>异步的 javaScript and XML—-异步加载、局部刷新</p></blockquote><h2 id="XMLHttp"><a href="#XMLHttp" class="headerlink" title="XMLHttp"></a>XMLHttp</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>readyState         XMLHttp状态</li><li>onreadystatechange  当XMLHttp状态改变时触发一个函数</li><li>status              响应状态码 200/404…</li><li>responseText         响应文本</li><li>responseXML          响应xml的数据</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>open(请求方式,请求路径,是否异步) 创建一个新的http请求，并指定此请求的方法、URL以及验证信息</li><li>send(请求参数) 发送请求到http服务器并接收回应</li><li>setRequestHeader(头信息,头的值) 单独指定请求的某个http头,处理POSt请求方式中文问题</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax_get</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建异步对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = createXMLHttp();</span><br><span class="line">    <span class="comment">// 2.设置状态改变的监听 回调函数.</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123; <span class="comment">// 请求发送成功</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123; <span class="comment">// 响应也成功</span></span><br><span class="line">            <span class="comment">// 获得响应的数据:</span></span><br><span class="line">            <span class="keyword">var</span> data = xhr.responseText;</span><br><span class="line">            <span class="comment">// 将数据写入到DIV中:</span></span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>).innerHTML = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Get方式：</span><br><span class="line"><span class="comment">// 3.设置请求路径</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"/ServletDemo?name=aaa&amp;pass=123"</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 4.发送请求</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">POST方式:</span><br><span class="line"><span class="comment">// 3.设置请求路径</span></span><br><span class="line">xhr.open(<span class="string">"POST"</span>,<span class="string">"/ServletDemo"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="comment">// 发送请求:</span></span><br><span class="line">xhr.send(<span class="string">"name=张三&amp;pass=123"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXMLHttp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> xmlHttp;</span><br><span class="line">    <span class="keyword">try</span>&#123; <span class="comment">// Firefox, Opera 8.0+, Safari</span></span><br><span class="line">        xmlHttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;<span class="comment">// Internet Explorer</span></span><br><span class="line">                xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xmlHttp; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jquery中的AJax"><a href="#Jquery中的AJax" class="headerlink" title="Jquery中的AJax"></a>Jquery中的AJax</h2><blockquote><p>Jquery封装了Ajax操作</p></blockquote><ul><li>Jq的对象.load(路径,参数,回调函数);</li><li>$.get(路径,参数,回调函数,数据类型);</li><li>$.post(路径,参数,回调函数,数据类型);</li><li>$.ajax();</li><li>serialize(); – JQ的AJAX传递参数的时候需要使用的方法.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Data就是Servlet中response.getWriter().println(1);输出的内容</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#username"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 获得文本框的值:</span></span><br><span class="line">        <span class="keyword">var</span> username = $(<span class="keyword">this</span>).val();</span><br><span class="line">        <span class="comment">// 演示load方法:</span></span><br><span class="line">        <span class="comment">// $("#s1").load("/day15/ServletDemo3",&#123;"username":username&#125;);</span></span><br><span class="line">        <span class="comment">// 演示get/post方法:</span></span><br><span class="line">        $.get(<span class="string">"/ServletDemo"</span>,&#123;<span class="string">"username"</span>:username&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data == <span class="number">1</span>)&#123;</span><br><span class="line">                $(<span class="string">"#s1"</span>).html(<span class="string">"&lt;font color='green'&gt;用户名可以使用&lt;/font&gt;"</span>);</span><br><span class="line">                $(<span class="string">"#regBut"</span>).attr(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data == <span class="number">2</span>)&#123;</span><br><span class="line">                $(<span class="string">"#s1"</span>).html(<span class="string">"&lt;font color='red'&gt;用户名已经存在&lt;/font&gt;"</span>);</span><br><span class="line">                $(<span class="string">"#regBut"</span>).attr(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Ajax </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jsp&amp;EL&amp;JSTL</title>
      <link href="/JavaWeb/JavaWeb-jsp&amp;El&amp;JSTL/"/>
      <url>/JavaWeb/JavaWeb-jsp&amp;El&amp;JSTL/</url>
      <content type="html"><![CDATA[<h1 id="jsp-amp-EL-amp-JSTL"><a href="#jsp-amp-EL-amp-JSTL" class="headerlink" title="jsp&amp;EL&amp;JSTL"></a>jsp&amp;EL&amp;JSTL</h1><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><h3 id="Jsp概述"><a href="#Jsp概述" class="headerlink" title="Jsp概述"></a>Jsp概述</h3><blockquote><p>Jsp(Java server  Pages,Java服务器端页面)，动态网页技术</p><p>Jsp运行过程：转换成一个servlet类，编译之后才能运行</p></blockquote><h3 id="JSP嵌入Java代码-JSP的脚本元素"><a href="#JSP嵌入Java代码-JSP的脚本元素" class="headerlink" title="JSP嵌入Java代码:JSP的脚本元素"></a>JSP嵌入Java代码:JSP的脚本元素</h3><ul><li><code>&lt;%!    %&gt;</code>:翻译成类中的成员部分. 定义变量,定义方法,定义类.Servlet是线程不安全的,尽量少在类中定义成员属性！！</li><li><code>&lt;%     %&gt;</code>:翻译成类的service方法内部的内容. 定义变量,定义类,直接写代码块.</li><li><code>&lt;%=    %&gt;</code>:翻译成service方法内部的out.print();</li></ul><h3 id="JSP的注释"><a href="#JSP的注释" class="headerlink" title="JSP的注释"></a>JSP的注释</h3><p>JSP的注释: <code>&lt;%-- JSP的注释 --%&gt;</code><br>HTML注释：只能注释HTML标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   </span></span><br><span class="line"><span class="comment">    &lt;c:for start=”1” end =”10”  &gt; </span></span><br><span class="line"><span class="comment">&lt;h1&gt;aaaaa&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">    &lt;/c:for&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>java注释 只能注释java代码</p><h3 id="JSP中有三个指令"><a href="#JSP中有三个指令" class="headerlink" title="JSP中有三个指令"></a>JSP中有三个指令</h3><blockquote><p>JSP中有三个指令:page指令, include指令, taglib指令.</p><blockquote><p>JSP的page指令</p></blockquote></blockquote><ul><li><code>contentType</code>: 设置浏览器打开这个JSP的时候采用的默认的字符集的编码. </li><li><code>pageEncoding</code>: 设置文件保存到本地硬盘,以及生成Servlet后,Servlet保存到硬盘上的编码.</li><li><code>import</code>: 在JSP中引入类对象.但是import可以出现多次.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>JSP的include指令:   指示JSP包含其他的页面</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"logo.jsp"</span> %&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"menu.jsp"</span> %&gt;</span><br><span class="line">&lt;h1&gt;BODY部分&lt;/h1&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"footer.jsp"</span> %&gt;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>JSP中的taglib指令:指示JSP引入标签库.</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&lt;%@ taglib uri=<span class="string">"标签的URI的路径"</span> prefix=<span class="string">"标签的别名"</span> %&gt;`</span><br></pre></td></tr></table></figure><h3 id="JSP中有9大内置对象"><a href="#JSP中有9大内置对象" class="headerlink" title="JSP中有9大内置对象"></a>JSP中有9大内置对象</h3><ul><li>request</li><li>response</li><li>session</li><li>application   ServletContext</li><li>page  当前页面</li><li>pageContext</li><li>config</li><li>out    JspWriter</li><li>exception</li></ul><h3 id="JSP的四个域范围"><a href="#JSP的四个域范围" class="headerlink" title="JSP的四个域范围"></a>JSP的四个域范围</h3><ul><li>PageScope: 当前页面中有效.</li></ul><blockquote><p><code>pageContext---------&gt; PageContext</code></p></blockquote><ul><li>RequestScope: 一次请求范围.</li></ul><blockquote><p><code>request---------&gt; HttpServletRequest</code></p></blockquote><ul><li>SessionScope: 一次会话范围.</li></ul><blockquote><p><code>session---------&gt; HttpSession</code></p></blockquote><ul><li>ApplicationScope: 整个应用范围</li></ul><blockquote><p><code>application---------&gt; ServletContext</code></p></blockquote><h2 id="EL-表达式语言"><a href="#EL-表达式语言" class="headerlink" title="EL 表达式语言"></a>EL 表达式语言</h2><blockquote><p>EL的概述:Excepress Language,表达式语言</p><p>作用：以最简单的方式操作JSP</p><p>使用EL表达式语法:${ EL表达式 }</p></blockquote><p>概括: EL 是从 JavaScript 脚本语言得到启发的一种表达式语言，它借鉴了 JavaScript 多类型转换无关性的特点。在使用 EL 从 scope 中得到参数时可以自动转换类型，因此对于类型的限制更加宽松。 Web 服务器对于 request 请求参数通常会以 String 类型来发送，在得到时使用的 Java 语言脚本就应该是<code>request.getParameter(“XXX”)</code> ，这样的话，对于实际应用还必须进行强制类型转换。而 EL 就将用户从这种类型转换的繁琐工作脱离出来，允许用户直接使用EL 表达式取得的值，而不用关心它是什么类型</p><h3 id="获取数据-JSP的四个域"><a href="#获取数据-JSP的四个域" class="headerlink" title="获取数据:(JSP的四个域)"></a>获取数据:(JSP的四个域)</h3><pre><code>获取域对象 `${ applicationScope.name }`访问数组元素 `${ arrs[下标] }`访问集合 `${ list[下标] }` `${ map.key的值 }`获取对象的属性 `${ user.id }`获取对象的集合的数据 `${ userList[0].id }`==`.`和`[]`的区别==`[]`用于有下标的数据(数组,list集合) `.`用于有属性的数据(map,对象)如果属性名中包含有特殊的字符.必须使用`[]`如果EL表达式从四个域对象中没有取到值会返回`&quot;&quot;`, 而不是`null`, 但属性名写错会报错，如 `${user.naaa}`在书写表达式时，如果没有指定搜索范围，那么系统会依次调用`pageContext`、`request`、`session`、`application`的`getAttribute()`方法。这样不限定查找范围的代码不利于排错，所以这种取值的操作可以先定对象的查找范围。如：`${sessionScope.user.name}`一旦指定了对象所在的范围，那么只会在范围内查找绑定对象，不会在找不到的时候再去其他区域中查找了。</code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算:"></a>运算:</h3><ol><li>EL执行算数运算 <code>${ n1 + n2 }</code></li><li>EL执行比较运算 <code>${ n1 eq n2 }</code></li><li>EL执行关系运算 <code>and  or    not</code></li><li>EL执行三元运算 <code>${ n1 &lt; n2 ? &quot;正确&quot;:&quot;错误&quot; }</code></li><li>判断null <code>${ empty user }`</code>${ not empty user }`<br>空运算主要用于判断字符串，集合是否为空，是空或为null及找不到值时都会输出true</li></ol><h3 id="操作WEB开发的常用的对象"><a href="#操作WEB开发的常用的对象" class="headerlink" title="操作WEB开发的常用的对象"></a>操作WEB开发的常用的对象</h3><pre><code>`pageScope,requestScope,sessionScope,applicationScope` - 获取JSP中域中的数据`param,paramValues` - 接收参数.`header,headerValues` - 获取请求头信息`initParam` - 获取全局初始化参数`cookie` - WEB开发中cookie`pageContext` - WEB开发中的pageContext.</code></pre><ol><li><code>${ param.id }===request.getPamameter(“id&quot;)</code></li><li>获取Cookie中的值<code>${ cookie.history.value }</code></li><li>调用API：<code>${ pageContext.request.remoteAddr }</code> <code>${ pageContext.request.contextPath }</code></li></ol><h2 id="JSTL-概述"><a href="#JSTL-概述" class="headerlink" title="JSTL 概述"></a>JSTL 概述</h2><p>JSTL概述：Jsp  Standard  Tag  library,Sun 公司 Java 规范标准的 JSTL 由 apache组织负责维护。作为开源的标准技术，它一直在不断地完善。<br>JSTL 的发布包有两个版本： Standard-1.0 Taglib 、 Standard-1.1 Taglib ，它们在使用时是不同的。</p><h3 id="使用JSTL"><a href="#使用JSTL" class="headerlink" title="使用JSTL"></a>使用JSTL</h3><ol><li>引入JSTL的相关的jar包.</li><li>在页面中引入标签库.<code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</code></li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &lt;c:<span class="keyword">if</span>  test=<span class="string">"$&#123;&#125;"</span>&gt;</span><br><span class="line">   ....</span><br><span class="line"> &lt;/c:if&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setName(<span class="string">"胡萝卜"</span>);</span><br><span class="line">  user.setGender(<span class="string">"f"</span>);</span><br><span class="line">  request.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">%&gt;</span><br><span class="line">姓名:$&#123;user.name&#125;&lt;br/&gt;</span><br><span class="line">性别:</span><br><span class="line">&lt;c:if test="$&#123;user.gender =='m'&#125;" var="rs" scope="request"&gt;男&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;!rs&#125;"&gt;女&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h4 id="JSTL的forEach标签"><a href="#JSTL的forEach标签" class="headerlink" title="JSTL的forEach标签"></a>JSTL的forEach标签</h4><blockquote><p>加强<code>For: var=&quot;i&quot;   items = “{被遍历的对象}&quot;</code></p><p>普通<code>for: var =&quot;i&quot;  begin=&quot;开始数据&quot; end=&quot;结束数据&quot;  step=&quot;步数&quot; varstatus=&quot;&quot;</code> 统计循环的个数</p></blockquote><p>举例:<br>其中items属性为要遍历的集合，var属性为每次取出来的一个对象，varStatus指定当前迭代的状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;序号&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;users&#125;"</span> var=<span class="string">"u"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.age&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> jsp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javaweb会话技术</title>
      <link href="/JavaWeb/JavaWeb-Cookie&amp;Session/"/>
      <url>/JavaWeb/JavaWeb-Cookie&amp;Session/</url>
      <content type="html"><![CDATA[<h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><blockquote><p>会话: 用户打开一个浏览器访问页面,访问网站的很多页面,访问完成后将浏览器关闭的过程称为是一次会话.</p></blockquote><p>常见的会话技术:</p><ul><li>Cookie  :将数据保存到客户端浏览器.</li><li>Session :将数据保存到服务器端.</li><li>URL重写</li><li>隐藏表单域 hidden</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote><p>向浏览器保存数据:</p><blockquote><p>HttpServletResponse有一个方法:<code>void addCookie(Cookie cookie);</code><br>获得浏览器带过来的Cookie:<br>HttpServletRequest有一个方法:<code>Cookie[] getCookies();</code><br>创建一个Cookie对象:<code>Cookie(String name,String value);</code></p></blockquote></blockquote><h3 id="Cookie常用API"><a href="#Cookie常用API" class="headerlink" title="Cookie常用API"></a>Cookie常用API</h3><ul><li>getName();  –获取Cookie的名称</li><li>getValue();   –获取Cookie的值</li><li>setDomain(String domain); – 设置Cookie的有效域名.</li><li>setPath(String path); – 设置Cookie的有效路径.</li><li><p>setMaxAge(int maxAge); – 设置Cookie的有效时间.</p><p>  setMaxAge如果咱们不手动设置值它的默认值是-1,即为临时Cookie<br>  如果想删除一个cookie的话就给它设置为0<br>  如果给它设置为一个正数值,代表就是它的存活时间 <code>60 * 60 * 24 * 7</code><br>  如果是相同path和相同domain下相同的cookie name会覆盖</p></li></ul><h3 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a>Cookie的分类</h3><ul><li>会话级别的Cookie:默认的Cookie.关闭浏览器Cookie就会销毁.</li><li>持久级别的Cookie:可以设置Cookie的有效时间.那么关闭浏览器Cookie还会存在. 手动销毁持久性<code>Cookie.setMaxAge(0)</code>(前提是有效路径必须一致)</li></ul><h3 id="示例-显示商品浏览记录"><a href="#示例-显示商品浏览记录" class="headerlink" title="示例:显示商品浏览记录"></a>示例:显示商品浏览记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收id:</span></span><br><span class="line">        String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        <span class="comment">// 获得所有的Cookie的信息:</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="comment">// 判断是否是第一次:</span></span><br><span class="line">        Cookie cookie = CookieUtils.findCookie(cookies, <span class="string">"history"</span>);</span><br><span class="line">        <span class="keyword">if</span>(cookie == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 第一次浏览商品</span></span><br><span class="line">            Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"history"</span>,id);</span><br><span class="line">            c.setPath(<span class="string">"/xxx"</span>);</span><br><span class="line">            c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line">            response.addCookie(c);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 不是第一次浏览</span></span><br><span class="line">            <span class="comment">// 判断选择的商品是否已经在浏览记录中 2-1</span></span><br><span class="line">            String value = cookie.getValue();</span><br><span class="line">            String[] ids = value.split(<span class="string">"-"</span>);</span><br><span class="line">            <span class="comment">// 将数组变为集合：</span></span><br><span class="line">            LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;(Arrays.asList(ids));</span><br><span class="line">            <span class="keyword">if</span>(list.contains(id))&#123;</span><br><span class="line">                <span class="comment">// 之前浏览过该商品</span></span><br><span class="line">                list.remove(id); <span class="comment">// 1-2-3</span></span><br><span class="line">                list.addFirst(id);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 没有浏览过该商品.</span></span><br><span class="line">                <span class="keyword">if</span>(list.size() &gt;=<span class="number">3</span> )&#123;</span><br><span class="line">                    <span class="comment">// 超过3个</span></span><br><span class="line">                    list.removeLast();</span><br><span class="line">                    list.addFirst(id);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 没到3个.</span></span><br><span class="line">                    list.addFirst(id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将list中的元素取出,使用-连接上保存到Cookie,写回浏览器.</span></span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">for</span>(String s:list)&#123;</span><br><span class="line">                sb.append(s).append(<span class="string">"-"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String sValue = sb.toString().substring(<span class="number">0</span>,sb.length()-<span class="number">1</span>);</span><br><span class="line">            System.out.println(sValue);</span><br><span class="line">            <span class="comment">// 存入到Cookie中</span></span><br><span class="line">            Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"history"</span>,sValue);</span><br><span class="line">            c.setPath(<span class="string">"/xxx"</span>);</span><br><span class="line">            c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line">            response.addCookie(c);</span><br><span class="line">        &#125;</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/xxx/product_info.htm"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><blockquote><p>基于Cookie的JSESSIONID</p><p>获得Session:<code>request.getSession();/request.getSession(boolean)</code></p></blockquote><h3 id="Cookie与Session的区别"><a href="#Cookie与Session的区别" class="headerlink" title="Cookie与Session的区别"></a>Cookie与Session的区别</h3><p>Cookie本身是有大小和个数的限制.大小一般不超过4KB, 个数的不超过20个,Session没有限制.Cookie的数据保存在客户端,Session数据保存在服务器端.Cookie被禁止了，默认session也不能使用</p><h4 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h4><pre><code>Cookie存储在浏览器客户端Session存储在服务器内存中Cookie有大小限制Session是没有大小限制Cookie只能存储StringSession可以存储object获取Cookie  newCookie(String String)获取Session req.getSession()Session是域对象Cookie不是域对象Session是依赖于Cookie</code></pre><h3 id="session作为域对象存取数据"><a href="#session作为域对象存取数据" class="headerlink" title="session作为域对象存取数据"></a>session作为域对象存取数据</h3><h4 id="session的创建和销毁"><a href="#session的创建和销毁" class="headerlink" title="session的创建和销毁"></a>session的创建和销毁</h4><ol><li>创建:<blockquote><p>服务器端第一次调用getSession()创建session.，以后调用getSession获得同一个</p></blockquote></li><li>销毁:三种情况销毁session:<blockquote><ol><li>session过期. 默认过期时间为30分钟.<blockquote><p>在Tomcat设置：所有的项目的session</p><p>在某个项目中的web.xml设置：当前工程的所有session<br>给某个session对象设置：对应的session对象<br><code>setMaxInactiveInterval(int interval)</code></p></blockquote></li><li>非正常关闭服务器.如果正常关闭session序列化到硬盘.</li><li>手动调用session.invalidate();</li></ol></blockquote></li></ol><ul><li><p>作用范围:多次请求.(一次会话)</p><pre><code>==Servlet中的域对象：request,session,ServletContext==request:范围一次请求，转发时能够共享数据,一个请求对应一个session:一次会话（包含多次请求与响应），转发与重定向都能共享,一个用户对应一个ServletContext:一个项目都有效，包含多个会话共同的特点：存储数据`setAttribute()/getAttribute()/removeAttribute()``Cookie, new Cookie(String,String)``session,  setAttribute(String,Object)`</code></pre></li></ul><h3 id="Session总结"><a href="#Session总结" class="headerlink" title="Session总结"></a>Session总结</h3><pre><code>作用：域对象存储数据`setAttribute()/getAttribute()`创建：在第一次访问`(request.getSession())session`销毁：三种方式设置session生存时间，默认在tomcat中有配置  web.xml:</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30min<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">配置当前工程web.xml：</span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>配置单个session：`setMaxInActiveInterval(s)`范围：session：一次会话有效（多次请求响应）</code></pre>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>servlet 二</title>
      <link href="/JavaWeb/JavaWeb-Servlet%E4%BA%8C/"/>
      <url>/JavaWeb/JavaWeb-Servlet%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>#Servlet 一</p><h2 id="读取WEB工程下的文件"><a href="#读取WEB工程下的文件" class="headerlink" title="读取WEB工程下的文件"></a>读取WEB工程下的文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式,不适用web工程</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"src/db.properties"</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.load(is);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用类的加载器来读取文件.</span></span><br><span class="line"><span class="comment">// 类的加载器用来加载class文件,将class文件加载到内存.</span></span><br><span class="line">InputStream is = ReadFileUtils.class.getClassLoader().getResourceAsStream(<span class="string">"db.properties"</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.load(is);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//web方式</span></span><br><span class="line"></span><br><span class="line">`ServletContext. getResourceAsStream(<span class="string">"/WEB-INF/classes/db.properties"</span>);`</span><br><span class="line"></span><br><span class="line">通过相对路径获得绝对路径</span><br><span class="line">`String realPath = context.getRealPath(<span class="string">"/WEB-INF/classes/db.properties"</span>);`</span><br><span class="line"><span class="comment">// 获得该文件的磁盘绝对路径.</span></span><br><span class="line">`InputStream is = <span class="keyword">new</span> FileInputStream(realPath);`</span><br></pre></td></tr></table></figure><h2 id="ServletContext功能概述"><a href="#ServletContext功能概述" class="headerlink" title="ServletContext功能概述"></a>ServletContext功能概述</h2><ol><li>读取全局初始化参数</li></ol><blockquote><p>  <code>ServletContext.getInitParameter()</code>  读取web.xml中的参数</p></blockquote><blockquote><p>  <code>ServletConfig.getInitParameter()</code>  读取servlet标签中配置的参数</p></blockquote><ol><li>获得文件的MIME的类型</li></ol><blockquote><p>  MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开文件下载，设置mime类型，浏览器自动使用指定应用程序来打开</p></blockquote><blockquote><p>  <code>ServletContext.getMimeType(“xxxxx.jpg”);</code></p><ol><li>作为域对象存取数据<br><code>setAttribute(key,Object)/getAttribute(key)</code></li></ol></blockquote><blockquote><p>  ServletContext对象<br>   创建时间：服务器启动的时候创建，一个项目有且仅有一个ServletContext对象<br>   销毁时间：服务器关闭或者项目移除</p></blockquote><ol><li>读取web项目下的文件<blockquote><p>  默认读取项目根路径下的文件<br><code>ServletContext.getResourceAsStream(“路径”)</code><br>  通过相对路径动态获得根盘符的绝对路径<br><code>ServletContext.getRealPath(“路径”)</code></p></blockquote></li></ol><h2 id="文件下载功能"><a href="#文件下载功能" class="headerlink" title="文件下载功能"></a>文件下载功能</h2><pre><code>输出中文字符：`response.setContentType(“text/html;charset=UTF-8”);`字符流: `response.getWriter()`字节流：`response.getOutputStream()` (做文件下载)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1设置Content-Type头</span></span><br><span class="line">String type = <span class="keyword">this</span>.getServletContext().getMimeType(filename);</span><br><span class="line">response.setHeader(<span class="string">"Content-Type"</span>, type);</span><br><span class="line"><span class="comment">// 2.2设置Content-Disposition头</span></span><br><span class="line">response.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line"><span class="comment">// 2.3设置文件的InputStream.</span></span><br><span class="line"><span class="comment">//realPath = this.getServletContext().getRealPath("/download/"+filename);</span></span><br><span class="line"><span class="comment">//InputStream is = new FileInputStream(realPath);</span></span><br><span class="line">InputStream is = <span class="keyword">this</span>.getServletContext.getResourceAsStream(<span class="string">"/download/"</span>+filename)</span><br><span class="line"><span class="comment">// 获得response的输出流:</span></span><br><span class="line">OutputStream os = response.getOutputStream();</span><br></pre></td></tr></table></figure><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><blockquote><p>Request对象的功能</p></blockquote><pre><code>1.获得客户端的信息`String getRequestURI()``StringBuffer getRequestURL()`2.获得请求参数`getParameter(key)`3.域对象，存储数据`setAttribute(key,Object)``getAttribute()`4.转发 `request.getRequestDispatcher(&quot;/demo1-download/login.jsp&quot;).forward(request, response);`</code></pre><h2 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h2><ul><li>重定向<code>response.sendRedirect(路径)</code></li><li>输出字符串<code>response.getWriter().println(字符串)</code></li><li>设置各种响应头的信息<code>response.setContentType(“text/html;charset=utf-8”)</code><br>下载设置文件的显示方式 <code>response.setHeader(“Content-disposition”,”attachement;filename=xxx.xx”)</code></li></ul><p>##转发与重定向的区别</p><ul><li>重定向的地址栏会发生变化,转发的地址栏不变</li><li>重定向两次请求两次响应,转发一次请求一次响应.</li><li>重定向路径需要加工程名,转发的路径不需要加工程名.</li><li>重定向可以跳转到任意网站,转发只能在服务器内部进行转发.</li><li>重定向不能使用request域存储数据，转发可以使用request存储数据</li></ul><h2 id="中文乱码的解决"><a href="#中文乱码的解决" class="headerlink" title="中文乱码的解决"></a>中文乱码的解决</h2><pre><code>接收中文乱码get方式  `new String(String.getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);`post方式 `request.setCharacterEncoding(“UTF-8”)`输出中文乱码字符流设置`response.setContentType(&quot;text/html;charset=UTF-8&quot;);`字节流`response.setHeader(&quot;Content-Type&quot;, &quot;text/html;charset=UTF-8&quot;);` // 设置浏览器默认打开的时候采用的字符集编码`response.getOutputStream().write(&quot;中文&quot;.getBytes(&quot;UTF-8&quot;));`    // 设置中文转成字节数组的时候取出的编码</code></pre>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>servlet 一</title>
      <link href="/JavaWeb/JavaWeb-Servlet/"/>
      <url>/JavaWeb/JavaWeb-Servlet/</url>
      <content type="html"><![CDATA[<p>#Servlet 一</p><h2 id="主要点"><a href="#主要点" class="headerlink" title="主要点"></a>主要点</h2><ol><li><code>servlet的生命周期</code></li><li>url-pattern的配置</li><li>路径问题</li><li>ServletContext对象</li></ol><h2 id="Servlet-实现类"><a href="#Servlet-实现类" class="headerlink" title="Servlet 实现类"></a>Servlet 实现类</h2><blockquote><p>Servlet :接口</p><blockquote><p>GenericServlet :通用的Servlet</p><blockquote><p>HttpServlet     :处理http协议的Servlet</p></blockquote></blockquote></blockquote><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><blockquote><p>对象从创建到销毁的过程</p><p>Servlet生命周期: Servlet从创建到销毁的过程.</p></blockquote><p>何时创建:用户第一次访问Servlet创建Servlet的实例, 只会被创建一次, 所以是单例<br>何时销毁:当项目从服务器中移除的时候，或者关闭服务器的时候.</p><p>==用户第一次访问Servlet的时候,服务器会创建一个Servlet的实例,那么Servlet中init方法就会执行.任何一次请求服务器都会创建一个新的线程访问Servlet中的service的方法.在service方法内部根据请求的方式的不同调用doXXX的方法.(get请求调用doGet,post请求调用doPost).当Servlet中服务器中移除掉,或者关闭服务器,Servlet的实例就会被销毁,那么destroy方法就会执行.==</p><ol><li>Servlet生命周期分为三个阶段，初始化阶段，运行阶段，销毁阶段</li><li>初始化阶段默认在Servlet第一次被访问的时候执行，调用init方法执行一些初始化准备工作。浏览器每次发起请求则执行运行阶段调用service方法，执行具体业务流程。当服务器关闭或者项目被移除执行销毁阶段，调用destory方法，可以在destory方法中执行资源回收，连接关闭等工作。</li><li>初始化阶段和销毁阶段在整个生命周期过程中只执行一次，运行阶段可以执行多次</li></ol><h2 id="Servlet的配置"><a href="#Servlet的配置" class="headerlink" title="Servlet的配置"></a>Servlet的配置</h2><p>Servlet默认是在第一次访问的时候创建的.现在让Servlet在服务器启动的时候创建好.进行对Servlet的配置:<br>在web.xml中在<code>&lt;servlet&gt;&lt;/servlet&gt;</code>标签中配置:<code>&lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</code> 传入正整数,整数越小,被创建的优先级就越高.</p><p>url-pattern配置方式共有三种:</p><ol><li>完全路径匹配 ：以 / 开始<code>&lt;url-pattern&gt;/ServletDemo1&lt;/url-pattern&gt;</code></li><li>目录匹配 ：以 / 开始需要以 <em> 结束.`<url-pattern>/aaa/</url-pattern></em>` </li><li>扩展名匹配 ：不能以 / 开始 以 <em> 开始的. `<url-pattern></url-pattern></em>.action` </li></ol><p>==错误的写法 ：<code>/*.do</code>==</p><blockquote><p>structs2默认的是以.action为后缀，springmvc是以.do为后缀</p></blockquote><h2 id="Servlet路径编写"><a href="#Servlet路径编写" class="headerlink" title="Servlet路径编写"></a>Servlet路径编写</h2><ul><li><p>相对路径:都是需要找位置相对关系.不能以 / 开始的 <code>./ 当前路径  ../上一级目录</code><br>使用相对路径访问:</p></li><li><p>绝对路径:不需要找位置相对关系. 以 / 开始的.<br>绝对路径中分为客户端路径和服务器端路径:</p><ul><li>客户端路径一定要加工程名.</li><li>服务器端路径不需要加工程名.</li></ul></li></ul><h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><p>ServletContext对象存取数据,存的数据都是有一定的作用的范围的.这种对象称为是域对象.<br>所有的Servlet都在ServletContext环境下(每一个项目有且只有一个ServletContext对象)<br>ServletContext存取数据:<br>存入数据:<code>setAttribute(key,value)</code><br>获取数据:<code>Object getAttribute(key)</code><br>移除数据:<code>removeAttribute(key)</code></p><h3 id="ServletContext的作用"><a href="#ServletContext的作用" class="headerlink" title="ServletContext的作用:"></a>ServletContext的作用:</h3><ul><li>用来获得全局初始化参数.</li><li>用来获得文件的MIME的类型.</li><li>作为域对象存取数据.(ServletContext是一个域对象)<ul><li>作用范围:整个web工程.</li><li>创建:服务器启动的时候,tomcat服务器为每个web项目创建一个单独ServletContext对象.</li><li>销毁:服务器关闭的时候,或者项目从服务器中移除的时候.</li></ul></li><li>用来读取web项目下的文件.</li></ul><h2 id="ServletConfig-对象"><a href="#ServletConfig-对象" class="headerlink" title="ServletConfig 对象"></a>ServletConfig 对象</h2>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig servletConfig = <span class="keyword">this</span>.getServletConfig();</span><br><span class="line">String servletName = servletConfig.getServletName();</span><br><span class="line">System.out.println(servletName);</span><br><span class="line"></span><br><span class="line">String username = servletConfig.getInitParameter(<span class="string">"username"</span>);</span><br><span class="line">String password = servletConfig.getInitParameter(<span class="string">"password"</span>);</span><br><span class="line">System.out.println(username+<span class="string">"    "</span>+password);</span><br></pre></td></tr></table></figure><pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo7<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.itheima.a_servlet.ServletDemo7<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql</title>
      <link href="/JavaWeb/Mysql/"/>
      <url>/JavaWeb/Mysql/</url>
      <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><pre><code>是一个文件系统,存储数据,通过标准的SQLy语句获取数据</code></pre><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><pre><code>关系型数据库存放的是实体之间的关系  常见关系型如:mysql orcale db2</code></pre><p><img src="D:/soft/Youdao/noteImg/ER模型.bmp" alt="image"></p><h3 id="mysql-安装"><a href="#mysql-安装" class="headerlink" title="mysql 安装"></a>mysql 安装</h3><pre><code>注意路径不能有空格 中文等</code></pre><h3 id="数据存储方式"><a href="#数据存储方式" class="headerlink" title="数据存储方式"></a>数据存储方式</h3><pre><code>数据库服务器 --&gt;数据库 ---&gt;表(为每个实体创建一个表)--&gt;字段一台数据库服务器中会创建很多数据库（一个项目，会创建一个数据库）。在数据库中会创建很多张表（一个实体会创建一个表）。在表中会有很多记录（一个对象的实例会添加一条新的记录）。graph TB数据库服务器--&gt;数据库1数据库服务器--&gt;数据库2数据库1--&gt;表1数据库1--&gt;表2数据库2--&gt;表3数据库2--&gt;表4</code></pre><p>eg:表结构(table)<br>id | name   |age<br>—|—|—<br>1  | 张三    |13<br>2  | 李四    |15</p><pre><code>netstat -ano    端口查看tasklist /svc   任务列表ipconfig /flushdns  ip刷新</code></pre><h2 id="sql-结构化查询语言"><a href="#sql-结构化查询语言" class="headerlink" title="sql 结构化查询语言"></a>sql 结构化查询语言</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类:"></a><strong>分类:</strong></h3><pre><code>DDL 数据定义语言    数据库/表的操作    create drop altetDCL 数据控制语言    grant ifDML 数据操作语言        对数据进行操作    insert updata deleteDQL 数据查询语言    select</code></pre><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a><strong>数据库操作</strong></h3><pre><code>创建数据库CREATE DATABASE 数据库名称 CHARACTER SET 字符集 COLLATE 字符集校对规则    eg:       CREATE DATABASE; //字符集和校对规则可省略查看数据库 SHOW  DATABASES;查看某个数据库的定义信息： SHOW CREATE DATABASE 数据库名称;修改数据库    修改数据库字符集        ALTER 数据库名 CHARACTER SET 字符集;    删除数据库        DROP DATABASE 数据库名;切换使用的数据库    use 数据库名;查看正在使用的数据库    select database();</code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h3><pre><code>表中字段类型Java中的类型    MySQL中的类型    byte/short/int/long     tinyint/smallint/int/bigint    float   float    double  double    boolean bit    char/String char和varchar类型   //需要指定长度    Date    date/time/datetime/timestamp    File                                blob/text   //很少用注意:在mysql中</code></pre><ul><li>char代表是固定长度的字符或字符串   eg:char(8) 存入长度不够8用空格不齐</li><li>varchar代表的是可变长度的字符串 eg: varchar(8)    长度不够8不会不齐</li><li>datetime就是既有日期又有时间的日期类型,如果没有向这个字段中存值，数据库使用null存入到数据库中</li><li>timestamp也是既有日期又有时间的日期类型，如果没有向这个字段中存值，数据库使用当前的系统时间存入到数据库中</li></ul><h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a><strong>表的操作</strong></h3><blockquote><p>创建表<br>CREATE TABLE 表名(字段名称 字段类型(长度) 约束,字段名称 字段类型(长度) 约束…);</p></blockquote><pre><code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person&#123;</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    age <span class="built_in">INT</span></span><br><span class="line">&#125;;</span><br><span class="line">注意:</span><br><span class="line">    创建表之前要有数据库并使用数据库</span><br><span class="line">    约束可省略</span><br><span class="line">约束</span><br><span class="line">    主键    PRIMARY KEY 默认非空唯一</span><br><span class="line">    非空    NOT NULL</span><br><span class="line">    唯一    UNIQUE</span><br><span class="line"></span><br><span class="line">查看所有表</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line">查看某个表的结构信息</span><br><span class="line">    DESC 表名;</span><br><span class="line">查看表创建信息</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br><span class="line">删除表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>修改表</p></blockquote><p>1）添加列<br>ALTER TABLE 表名称 ADD 列名 类型(长度) 约束;</p><pre><code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_address <span class="keyword">ADD</span> phone <span class="built_in">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></code></pre><p>2)修改列的类型、长度、约束<br>    ALTER TABLE 表名称 MODIFY  类型(长度) 约束;</p><pre><code>eg：    ALTER TABLE t_address MODIFY phone VARCHAR(30) NOT NULL;</code></pre><p>3)修改列名<br>    ALTER TABLE 表名称 CHANGE 旧列名 新列名 类型(长度) 约束;</p><pre><code>eg：    ALTER TABLE t_address CHANGE phone tel VARCHAR(30) NOT NULL;</code></pre><p>4)删除列<br>    ALTER TABLE 表名称 DROP 列名;</p><pre><code>eg:    ALTER TABLE t_address DROP tel;</code></pre><p>5)修改表名<br>RENAME TABLE 表名 TO 新表名;</p><ul><li><p>插入数据</p><pre><code>1)INSERT INTO 表名(列名1,列名2,...,列名N) VALUES(值1,值2,...,值N);2)INSERT INTO 表名(列名1,列名2,...,列名N) VALUES(值1,值2,...,值N),(值1,值2,...,值N),...,(值1,值2,...,值N);3)INSERT INTO 表名 VALUES(值1,值2,...,值N);</code></pre></li><li><p>更新数据</p><pre><code>UPDATE 表名 SET 列名1=值1,列名2=值2,...,列名n=值n WHERE 条件;</code></pre></li><li><p>删除数据</p><p>  1)删除部分数据</p><pre><code>DELETE FROM 表名 WHERE 条件;2)删除表内所有数据    --DELETE是一条条删除，不会清空AUTO_INCREMENT    DELETE FROM 表名;   --属于DML,事务可以作用在DML上    --直接将表删除，重建，AUTO_INCREMENT重置为0TRUNCATE TABLE 表名;    --属于DDL</code></pre></li><li><p>查询数据</p><pre><code>基本查询     SELECT * FROM 表名 ;    --查询所有     SELECT 列名1,列名2... FROM 表名 ;     --查询指定列数据     SELECT DISTINCT 列名1... FROM 表名  ;    --去重查询,参数所有列完全相同时去重     SELECT 列名1 AS 列名1别名,列名2 AS 列名2别名 FROM 表名 ;    --别名查询,AS可以省略 条件查询     基本查询+WHERE 条件;     SELECT * FROM 表名 WHERE 条件;     条件:         &gt;, &lt; ,&gt;=, &lt;= ,&lt;&gt;, =         like 模糊查询,使用_或%作为站位符,_代表一个字符,%代表任意个字符         in      范围查询 匹配内容         between .. and         and ,or  ,not     eg:     SELECT * FROM headset WHERE name LIKE &apos;李_&apos;;     SELECT * FROM headset WHERE age IN(21,22,23);     SELECT * FROM headset WHERE money BETWEEN 1000 AND 1800;</code></pre><p><img src="D:/soft/Youdao/noteImg/where.jpg" alt="img"></p></li><li><p>排序查询</p><pre><code>    order by 字段名 asc(升序默认可省略)/desc(降序);    eg:        select * from exam order by score;        select * from exam order by score desc;        select * from exam order by score desc,age asc;分页查询 sql语句最后    limit 起始index,数目聚合函数    count    max/min    sum    avgeg:    SELECT sum(english) from exam where name like &apos;李%&apos;;ifnull(字段,默认值)     --当字段为空时以默认值计算分组查询    SELECT 字段 ,COUNT(*) FROM 表名 GROUP BY 字段;   聚合函数通常和分组配合,  where 后不能跟聚合函数 需要用having    SELECT 字段 ,SUM(字段1) FROM 表名 GROUP BY 字段 HAVING 条件;</code></pre></li><li><p>总结<br>  S(select)… F(from)…W(where)…G(group by)…H(having)…O(order by);</p></li></ul><h2 id="多表"><a href="#多表" class="headerlink" title="多表"></a>多表</h2><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><pre><code>外键约束:保证数据的完整性alter table 表 add foreign key(字段) references 表a(字段a)外键一般连接的都是主键</code></pre><h4 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h4><pre><code>一对一    一的其中一方创建外键指向另一方的主键    主键绑定主键</code></pre><p><img src="D:/soft/Youdao/noteImg/一对一.jpg" alt="img"><br>        一对多<br>            多的一方创建外键指向一的主键<br><img src="D:/soft/Youdao/noteImg/一对多.jpg" alt="img"><br>        多对多<br>            需要创建第三张表(中间表),在中间表中能够至少有两个字段作为外键分别指向多对多双方主键<br><img src="D:/soft/Youdao/noteImg/多对多.jpg" alt="img"></p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><pre><code>交叉连接(了解)    两个表的笛卡尔积    select * from 表1 cross join 表2;    select * from 表1 , 表2;内连接    显示内连接  inner join  (inner 可省略)         select * from 表1 inner join 表2 on 关联条件;    隐士内连接         select * from 表1,表2 where 关联条件;外连接  outer join (outer 可省略)    左外连接        select * from 表1 left outer join 表2 on 关联条件    右外连接        select * from 表1 right outer join 表2 on 关联条件</code></pre><p><img src="D:/soft/Youdao/noteImg/内外连接的区别.jpg" alt="img"></p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><pre><code>一个查询语句需要依赖另一个查询语句的结果    查询中嵌套查询inany    任意一个all     所有exists      select * from clsses where exists(selct cno from student where birthday&gt;&apos;1991-01-01&apos;)</code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote><p>特性  </p></blockquote><pre><code>原子性    事务不可分割一致性    事务执行的前后,数据的完整性保持一致隔离性    一个事务的执行不应该受到其他事务的干扰持久性    事务一旦提交结束 就因该保存到数据库中</code></pre><blockquote><p>开启事务</p></blockquote><pre><code>    start transaction提交事务    commit回滚事务    rollback</code></pre><blockquote><p>隔离级别</p></blockquote><pre><code>基于隔离性出现的问题    脏读        一个事务查询到另外一个事务未提交的数据,导致查询结果不一致    不可重复读        一个事务读到了到另外一个事务已提交的update数据,导致多次查询结果不一致    虚读/幻读     一个事务读到了到另外一个事务已提交的insert数据,导致多次查询结果不一致级别    read uncommitted    read committed    repeatable    serializable</code></pre><hr><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><pre><code>java数据连接  一组Java语言的类和接口  规范驱动:两设备(应用)之间的通信桥梁</code></pre><p>步骤</p><ol><li>注册驱动<br> Class.forName(“com.mysql.jdbc.Driver”);</li><li>获取连接对象<br> Connection con=DriverManager.getConnection(“jdbc:mysql://ip地址:端口/数据库名称”,数据库用户名,数据库密码);</li><li>获得一个操作sql对象<br> Statement sm=  con.createStatement;</li><li><p>执行sql语句 获取结果<br> String sql =”sql语句”;</p><pre><code>ResultSet set=sm.executeQuery(sql); 查询int row =sm.executeUpdate(sql);     增删改</code></pre></li><li><p>处理结果</p></li><li><p>释放资源</p><pre><code>set.close();  sm.close();  con.close()</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rs.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123; <span class="comment">// ignore &#125;</span></span><br><span class="line"></span><br><span class="line">    rs = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stmt.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123; <span class="comment">// ignore &#125;</span></span><br><span class="line"></span><br><span class="line">    stmt = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDBC-的sql-注入漏洞"><a href="#JDBC-的sql-注入漏洞" class="headerlink" title="JDBC 的sql 注入漏洞"></a>JDBC 的sql 注入漏洞</h3><pre><code>把用户输入得参数当作sql关键字被解释执行 </code></pre><h3 id="jdbc事务"><a href="#jdbc事务" class="headerlink" title="jdbc事务"></a>jdbc事务</h3><ol><li><p>环境准备</p><pre><code>数据库及表create database web_test;use web_test;create table account(    id int primary key auto_increment,    userName varchar(20),    password varchar(20),    money double);insert into account values(null,zhangsan,12345);</code></pre></li><li><p>开启事务</p><pre><code>conn.setAutoCOmmit(false);//关闭自动提交</code></pre></li><li>提交事务<pre><code>conn.commit();</code></pre></li><li>事务回滚<pre><code>conn.rollback();</code></pre></li></ol><figure class="highlight java"><figcaption><span>代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><pre><code>创建和管理一个连接的缓存池的技术连接的创建和销毁需要时间,在服务器初级化时就初始化一些连接放入连接池中,使用时可从内存中获取,在内存中效率高</code></pre><ol><li><p>自定义连接池<br> 装饰着模式</p></li><li><p>Druid连接池</p><p> DuridDataSource ds =new DuridDataSource();<br> //手动<br> ds.setDriverClassName(“”);<br> ds.setUrl(“”);<br> ds.setPassword(“”);<br> //配置文件方式<br> /*</p><pre><code>DriverClassName=url=username=password=</code></pre><p> */<br> Properties prop= new Properties()<br> prop.load(InputStream)<br> DruidDataSourceFaxtory.createDataSource(prop)</p><p> //获得连接<br> ds.getConnection();</p></li><li><p>c3p0连接池</p><p> ComboPooledDataSource ds =new ComboPooledDataSource();<br> ds,setDriverClass(“”);<br> ds.setJdbcUrl(“”);<br> ds.setUser(“”);<br> ds.setPassword(“”);</p><p> //获得连接<br>  ds.getConnection();</p></li><li><p>DBUtils</p><p> 对jdbc简单的封装而没有影响性能</p></li></ol>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML</title>
      <link href="/JavaWeb/JavaWeb%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
      <url>/JavaWeb/JavaWeb%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>Hyper Text Markup Language  超文本标记语言</p><blockquote><p>标记语言：指的是通过一组标签的形式描述事物的一门语言<br>用于制作页面（静态）</p></blockquote></blockquote><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><blockquote><p>一个HTML文件后缀名为.html 或 htm</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头标签 基于当前页面的一些配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html 标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置字符集 seo优化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 体标签 展示内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">html body</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h2><ol><li>按标签写法<blockquote><ul><li>双边  <code>&lt;body&gt;&lt;/body&gt;</code></li><li>单边  <code>&lt;br /&gt;</code></li></ul></blockquote></li><li>按状态<blockquote><ul><li>行内 <code>&lt;span&gt;</code></li><li>块级 <code>&lt;div&gt;</code></li></ul></blockquote></li></ol><h3 id="HTML-字体排版标签"><a href="#HTML-字体排版标签" class="headerlink" title="HTML 字体排版标签"></a>HTML 字体排版标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span> 字体便签</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">size</span>=<span class="string">"12"</span> <span class="attr">face</span>=<span class="string">"宋体"</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">属性 color 字体颜色</span><br><span class="line">英文单词 red black..</span><br><span class="line">使用16进制  #FFFFFF , #FFFF</span><br><span class="line">属性 size  字体大小</span><br><span class="line">从1 到 7</span><br><span class="line">属性 face 字体</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> 换行标签</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> &gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> 标题标签 ... <span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> 段落标签</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span> <span class="tag">&lt;/<span class="name">b</span>&gt;</span> 字体加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 斜体标签</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span> 下划线标签</span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span> <span class="tag">&lt;/<span class="name">center</span>&gt;</span>内容居中</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">hr</span>&gt;</span> 分隔线</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span> 预定义标签 将字符串原封不动的显示出来</span><br></pre></td></tr></table></figure><h3 id="HTML-图片标签"><a href="#HTML-图片标签" class="headerlink" title="HTML 图片标签"></a>HTML 图片标签</h3><blockquote><p><code>&lt;img&gt; 图片标签</code></p></blockquote><pre><code>属性src     ：   图片来源width  :    图片的宽度.height: 图片的高度.alt    :   图片找不到显示的内容.</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"a.png"</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">100%</span> <span class="attr">alt</span>=<span class="string">"img"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-列表标签"><a href="#HTML-列表标签" class="headerlink" title="HTML 列表标签"></a>HTML 列表标签</h3><ul><li>无序<blockquote><p> ul li</p><p>  属性</p><pre><code>type    类型circle 空心点disc  实心点 默认square 方块</code></pre></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>有序<blockquote><p>ol li</p></blockquote>  属性<pre><code>type    类型1  数字型a 英文型i 罗马字符型start 从哪个开始</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="超链接标签-lt-a-gt"><a href="#超链接标签-lt-a-gt" class="headerlink" title="超链接标签 &lt;a&gt;"></a>超链接标签 <code>&lt;a&gt;</code></h3><blockquote><p>属性<br>   href   :链接的路径<br>   target :打开的方式<br>               _self   :在自身页面打开<br>              _blank  :新打开一个页面</p></blockquote><h3 id="table标签"><a href="#table标签" class="headerlink" title="table标签"></a>table标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;&lt;!--行--&gt;</span><br><span class="line">&lt;td&gt;&lt;/td&gt; 列</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>属性<br>width ； 表格宽度<br>height：表格高度<br>border ： 边框<br>Align: 水平位置<br>left<br>right<br>center</p><p><td> 属性<br>合并单元格<br>colspan=”列数”<br>rowspan=”行数”</td></p><h3 id="表单标签-lt-form-gt"><a href="#表单标签-lt-form-gt" class="headerlink" title="表单标签 &lt;form&gt;"></a>表单标签 <code>&lt;form&gt;</code></h3><blockquote><p>action 提交的路径，默认当前页面</p></blockquote><blockquote><p>method 请求方式，GET 和POST 默认为GET</p></blockquote><h4 id="表单中的元素"><a href="#表单中的元素" class="headerlink" title="表单中的元素"></a>表单中的元素</h4><h5 id="lt-input-gt-文本框"><a href="#lt-input-gt-文本框" class="headerlink" title="&lt;input&gt; 文本框"></a><code>&lt;input&gt;</code> 文本框</h5><blockquote><p> <code>&lt;input type=&quot;text&quot;/&gt;</code>  文本框</p><pre><code>属性  type：      类型  text        文本框  password    密码框  radio       单选按钮  checkbox    复选按钮  button      普通按钮  submit      提交按钮  reset       重置按钮  file        文件上传的表单项  hidden      隐藏字段  image       图片按钮  name:       表单元素名称 必须有  value:      文本框默认值  size:       文本框长度  maxlength:  最大输入长度  readonly:   只读  checked:    单选/复选按钮默认选中</code></pre></blockquote><h5 id="lt-select-gt-下拉列表"><a href="#lt-select-gt-下拉列表" class="headerlink" title="&lt;select&gt;    下拉列表"></a><code>&lt;select&gt;</code>    下拉列表</h5><blockquote><p>name 属性</p></blockquote><h5 id="lt-option-gt"><a href="#lt-option-gt" class="headerlink" title="&lt;option&gt;"></a><code>&lt;option&gt;</code></h5><blockquote><p>value 属性</p></blockquote><p>#####<code>&lt;textarea&gt;</code> 文本域</p><blockquote><p>cols</p></blockquote><blockquote><p>rows</p></blockquote><h4 id="框架标签-frameset"><a href="#框架标签-frameset" class="headerlink" title="框架标签 frameset"></a>框架标签 frameset</h4><blockquote><p>注意 与body 标签冲突</p></blockquote><blockquote><p>属性<br>    rows<br>    cols<br>    两者只能出现其一</p></blockquote><blockquote><p>使用<code>&lt;frame&gt;</code> 标签 frame代表分切的每个部分</p><blockquote><p>属性</p></blockquote></blockquote><pre><code>src 网页的连接name 指定名称  可以通过a标签跳转onresize 让frame边框不能拖动</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;frameset rows=2&gt;</span><br><span class="line">&lt;frame&gt;&lt;/frame&gt;</span><br><span class="line">&lt;frameset cols=2&gt;</span><br><span class="line">&lt;frame&gt;&lt;/frame&gt;</span><br><span class="line">&lt;frame&gt;&lt;/frame&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br></pre></td></tr></table></figure><h1 id="css-层叠样式"><a href="#css-层叠样式" class="headerlink" title="css 层叠样式"></a>css 层叠样式</h1><blockquote><p>div +css 页面布局</p></blockquote><blockquote><p> 对页面进行美化</p></blockquote><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><p><code>&lt;div&gt;&lt;/div&gt;</code> ： 默认一个独占一行</p><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><p><code>&lt;span&gt;&lt;/span&gt;</code>  : 默认不换行</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>####行内式</p><blockquote><p>直接标签内使用style 属性<br><code>&lt; h1 style=&quot;color:red;&quot;&gt;&lt;/h1&gt;</code></p></blockquote><p>####内联式</p><blockquote><p>使用style标签,一般放在head 标签内</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">h1&#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>####外联式</p><blockquote><p>单独定义.css文件在HTML中link标签中引入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.css文件中</span><br><span class="line">h1&#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">html中 使用link 标签</span><br><span class="line">&lt;link href=&quot;.css文件路径&quot; type=&quot;text/css&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="声明-属性-值"><a href="#声明-属性-值" class="headerlink" title="声明      属性:值"></a>声明      属性:值</h4><blockquote><p>选择器{属性:值;属性:值…}</p></blockquote><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><blockquote><p>根据标签名称<br>    div{}</p></blockquote><p>####id选择器   </p><blockquote><p>根据标签id属性值 _id</p></blockquote><pre><code>#_id{}</code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><blockquote><p>根据标签class属性值 _class<br>    ._class{}</p></blockquote><h4 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h4><h5 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h5><pre><code>eq: input[type=&quot;text&quot;]{}</code></pre><h5 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h5><pre><code>div span{} 查找所有div 中的所有span标签</code></pre><p>#####子元素选择器<br>    div &gt; span{} 查找所有div 中的第一层是span标签</p><h5 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h5><pre><code>div + span{}</code></pre><h5 id="并列选择器"><a href="#并列选择器" class="headerlink" title="并列选择器"></a>并列选择器</h5><pre><code>选择器1,选择器2{}</code></pre><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><pre><code>CSS float 属性值 描述left 元素向左浮动。right 元素向右浮动。none 默认值。元素不浮动，并会显示在其在文本中出现的位置。inherit 规定应该从父元素继承 float 属性的值。清除浮动 使用clear 属性</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:'left'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear :'none'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><pre><code>position绝对定位 absolute相对定位 relative盒子模型内边距 pedJSKSJding边框 border外边距 margin</code></pre><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><blockquote><p>脚本语言</p></blockquote><p>##组成<br>    ECMAScript: 基本语法<br>    DOM document object model 文档对象模型<br>    BOM browser object model    浏览器对象模型</p><p>##语法<br>区分大小写</p><p>###弱变量类型语言(与java不同)<br>    变量命名<br>    var i =3;//整数型<br>    var i =”3”;//字符串类型</p><p>###数据类型<br>    undefined 未定义<br>    boolean<br>    number<br>    string<br>    object</p><p>###运算符 与Java中基本一致<br>    js中=== 全等 类型和值都一致才为true</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><pre><code>与Java语句一致</code></pre><p>##开发步骤<br>    通常由一个事件触发<br>    事件触发后引用函数<br>    调用函数</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><pre><code>function 函数名(){函数体}</code></pre><h3 id="匿名函数-window-onload-function"><a href="#匿名函数-window-onload-function" class="headerlink" title="匿名函数 window.onload=function(){}"></a>匿名函数 window.onload=function(){}</h3><pre><code>常用事件onclick     点击事件 onsubmit   提交onchange    select选中onfocus         获得焦点onblur      失去焦点onload      页面加载</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">var br=doucment.getElementById(&quot;id&quot;);</span><br><span class="line">br.onclik(function()&#123;</span><br><span class="line">//...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="js引入方式"><a href="#js引入方式" class="headerlink" title="js引入方式"></a>js引入方式</h2><h3 id="使用script-标签"><a href="#使用script-标签" class="headerlink" title="使用script 标签"></a>使用script 标签</h3><pre><code>&lt;script&gt;js内容&lt;/script&gt;</code></pre><h3 id="引入-js-文件"><a href="#引入-js-文件" class="headerlink" title="引入.js 文件"></a>引入.js 文件</h3><pre><code>&lt;script src=&quot;js文件&quot;&gt;&lt;/script&gt;</code></pre><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><pre><code>&quot;&quot;.match(/正则表达式/)/正则表达式/.test(&quot;&quot;)</code></pre><p>##获得页面元素<br>    document.getElementById(“id”);</p><pre><code>window中setTimeout(一定时间后执行) setInterval(每隔一定时间执行)eg:setInterval(function(){},1000);setTimeout(function(){},1000);</code></pre><h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><blockquote><p>一个js 的框架(类库)</p></blockquote><p>##引入<br>    <script src="jq文件"></script><br>    $(function(){               //$相当于JQuery 对象<br>    //等页面的Dom树绘制完成后执行<br>    });</p><h2 id="js-jq对象转换"><a href="#js-jq对象转换" class="headerlink" title="js/jq对象转换"></a>js/jq对象转换</h2><p>###js对象转jq对象<br>    $(js对象)</p><p>###jq对象转js对象<br>    var $d1=$(“#id”);//jq对象 $d1 变量名可起其他名    #id 为 #+标签id    eq: var a =$(#id);<br>    $d1[0];或    $d1.get(0);//转为js对象</p><p>##显示与隐藏<br>    $(选择器).show();<br>    $(选择器).hide();<br>    $(选择器).toggle(); 当标签隐藏时显示,显示时隐藏<br>    用于绑定两个或多个事件处理器函数，以响应被选元素的轮流的 click 事件。<br>    如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。</p><p>###基本<br>    show([speed,[easing],[fn]])<br>    hide([speed,[easing],[fn]])<br>    toggle([speed],[easing],[fn])</p><p>###滑动<br>    slideDown([spe],[eas],[fn])<br>    slideUp([speed,[easing],[fn]])<br>    slideToggle([speed],[easing],[fn])<br>    注意要设置标签的宽度</p><p>###淡入淡出<br>    fadeIn([speed],[eas],[fn])<br>    fadeOut([speed],[eas],[fn])<br>    fadeTo([[spe],opa,[eas],[fn]])<br>    fadeToggle([speed,[eas],[fn]])</p><p>##选择器</p><blockquote><p>$(选择器)</p></blockquote><p>###基本</p><pre><code>#id             id选择器.class          类选择器元素名         元素选择器*               通配选择器选择器1,选择器2   并列选择器</code></pre><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><pre><code>ancestor descendant     后代选择器       使用空格        eg: $(body div) body 下的所有的div标签parent &gt; child          子元素选择器      使用&gt;     eg:$(body&gt;div)  body下的第一层div标签prev + next             下一个元素       使用+     eg:$(#id+div)       id标签的下一个标签prev ~ siblings         兄弟元素            使用~     eg:$(#id~div)       id标签的所有兄弟标签</code></pre><h3 id="基本过滤"><a href="#基本过滤" class="headerlink" title="基本过滤"></a>基本过滤</h3><pre><code>:first          第一个元素:last           最后一个元素:odd            奇数元素:even       偶数元素:eq(index)      下标为index 元素内容过滤:contains(text)     内容为text的元素</code></pre><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre><code>[attribute]                         [attribute=value]           匹配给定的属性是某个特定值的元素[attribute!=value]          匹配所有不含有指定的属性，或者属性不等于特定值的元素[attribute^=value]          匹配给定的属性是以某些值开始的元素[attribute$=value] [attribute*=value] [attrSel1][attrSel2][attrSelN] </code></pre><h3 id="表单选择器和表单属性选择器"><a href="#表单选择器和表单属性选择器" class="headerlink" title="表单选择器和表单属性选择器"></a>表单选择器和表单属性选择器</h3><pre><code>:input  所有的表单标签checked     checkbox 或  radio 被选中selected    select被选中</code></pre><h3 id="添加和移除样式"><a href="#添加和移除样式" class="headerlink" title="添加和移除样式"></a>添加和移除样式</h3><pre><code>* 如果样式没有事先定义,可以使用css方法为奇数行或者偶数行设置背景颜色.css(&quot;属性&quot;,&quot;值&quot;)css(&quot;属性1:值1&quot;,&quot;属性2:值2&quot;)* 如果已经在css文件中事先将样式定义完成了,不能使用css方法了.使用JQ中的CSS类中的方法：    * addClass();    * removeClass();eg:$(&quot;tr&quot;).addClass(&quot;&quot;);</code></pre><h2 id="标签属性操作"><a href="#标签属性操作" class="headerlink" title="标签属性操作"></a>标签属性操作</h2><pre><code>attr(); 高版本会失效prop(); 获取设置属性  prop(&quot;属性&quot;)  prop(&quot;属性&quot;,&quot;值&quot;)removeProp()    移除属性操作文档对象append()        添加appendTo()  添加到html()      替换内容</code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre><code>$().each(function(i,n){ // i代表index ,n代表当前元素})$.each(数组,function(i,n){})</code></pre><h3 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h3><pre><code>toggle();用于绑定两个或多个事件处理器函数，以响应被选元素的轮流的 click 事件。如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。eg:对表格切换显示/隐藏$(&apos;td).toggle();对表格的切换一个类$(&quot;td&quot;).toggle(  function () {    $(this).addClass(&quot;selected&quot;);  },  function () {    $(this).removeClass(&quot;selected&quot;);  });</code></pre><h3 id="trigger和triggerHandler的区别"><a href="#trigger和triggerHandler的区别" class="headerlink" title="trigger和triggerHandler的区别"></a>trigger和triggerHandler的区别</h3><pre><code>1.trigger和triggerHandler都会触发自己实现的逻辑2.trigger会导致系统的事件和自己定义的逻辑都被触发3.triggerHandler只会触发自己实现的逻辑,不会触发系统的事件4.trigger会对所有匹配到的元素都执行相关逻辑5.triggerHandler他只会对匹配到的元素的第一个执行自己的逻辑,并且不会执行系统的事件6.trigger会导致事件冒泡.triggerHanlder不会导致事件冒泡</code></pre><h1 id="BootStrap-前端响应式框架"><a href="#BootStrap-前端响应式框架" class="headerlink" title="BootStrap  前端响应式框架"></a>BootStrap  前端响应式框架</h1><blockquote><p>引入bootstrap文件</p></blockquote><blockquote><p>注意先引入jquery在引入bootstrap.js</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap-theme.min.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>添加<code>&lt;meta&gt;标签</code><br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p></blockquote></blockquote><h2 id="全局css"><a href="#全局css" class="headerlink" title="全局css"></a>全局css</h2><h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><pre><code>.container.container-flue</code></pre><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><pre><code>12列.row 行.col-lg-n       .col-md-n       .col-sm-n       .col-xs-n   四种列样式,n是数字1-12代表占行的份额,行的总份额为12</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="javaScript插件"><a href="#javaScript插件" class="headerlink" title="javaScript插件"></a>javaScript插件</h3><h4 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h4>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Http</title>
      <link href="/JavaWeb/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/JavaWeb/HTTP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><blockquote><p>超文本传输协议,用来规定浏览器和服务器之间要遵守的协议</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><p>基于请求和响应的模型</p><blockquote><p>必须现有请求后有响应</p></blockquote><blockquote><p>请求和响应成对出现</p></blockquote></blockquote><h3 id="协议详解"><a href="#协议详解" class="headerlink" title="协议详解"></a>协议详解</h3><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，定义了主机如何连入因特网及数据如何再它们之间传输的标准，从字面意思来看TCP/IP是TCP和IP协议的合称，但实际上TCP/IP协议是指因特网整个TCP/IP协议族。不同于OSI模型的七个分层，TCP/IP协议参考模型把所有的TCP/IP系列协议归类到四个抽象层中<br>应用层：TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet 等等<br>传输层：TCP，UDP<br>网络层：IP，ICMP，OSPF，EIGRP，IGMP<br>数据链路层：SLIP，CSLIP，PPP，MTU<br>每一抽象层建立在低一层提供的服务上，并且为高一层提供服务，看起来大概是这样子的<br><img src="http://os4z8t7lb.bkt.clouddn.com/201710121244_542.png" alt=""><br>建立TCP连接的三次握手<br><img src="http://os4z8t7lb.bkt.clouddn.com/201710121247_95.png" alt=""><br><img src="http://os4z8t7lb.bkt.clouddn.com/201712240822_837.png" alt=""></p><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><p>套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：<br>连接使用的协议， 本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。<br>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个 TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP/IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。<br>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。<br>socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。<br><img src="http://os4z8t7lb.bkt.clouddn.com/201710121245_575.png" alt=""></p><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p>Http协议是建立在TCP协议基础之上的，当浏览器需要从服务器获取网页数据的时候，会发出一次Http请求。Http会通过TCP建立起一个到服务器的连接通道，当本次请求需要的数据完毕后，Http会立即将TCP连接断开，这个过程是很短的。<br>在HTTP 1.0中客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。<br>从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。虽然这里使用TCP连接保持了一段时间，但是这个时间是有限范围的，到了时间点依然是会关闭的，所以我们还把其看做是每次连接完成后就会关闭。<br>Http连接是一种短连接，是一种无状态的连接。所谓的无状态，是指浏览器每次向服务器发起请求的时候，不是通过一个连接，而是每次都建立一个新的连接。如果是一个连接的话，服务器进程中就能保持住这个连接并且在内存中记住一些信息状态。而每次请求结束后，连接就关闭，相关的内容就释放了，所以记不住任何状态，称为无状态连接。<br>如果要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的做法是即使不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。<br>通过Session, Cookie等相关技术，也能保持一些用户的状态。但是还是每次都使用一个连接，依然是无状态连接。<br>Http协议指定的端口是 80，所以一般计算机上不会限制这个端口，所以Http协议能够顺利通过所有机器上的防火墙。</p><h4 id="HTTP，socket，TCP-IP："><a href="#HTTP，socket，TCP-IP：" class="headerlink" title="HTTP，socket，TCP/IP："></a>HTTP，socket，TCP/IP：</h4><p>网络由下往上分为：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。<br>IP协议对应于网络层，TCP协议对应于传输层，而HTTP协议对应于应用层，三者从本质上来说没有可比性<br>socket则是对TCP/IP协议的封装和应用(程序员层面上)。<br>TPC/IP协议是传输层协议，主要解决数据如何在网络中传输<br>HTTP是应用层协议，主要解决如何包装数据。<br>关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：“我们在传输数据时，可以只使用(传输层)TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容。如果想要使传输的数据有意义，则必须使用到应用层协议。应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”<br>socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口(API)。<br>通过Socket，我们才能使用TCP/IP协议。实际上，Socket跟TCP/IP协议没有必然的联系。Socket的出现只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、listen、connect、accept、send、read和write等等。<br>关于socket和TCP/IP协议关系的说法比较容易理解：“TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。这个就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。”<br>有个比较形象的描述：HTTP是轿车，提供了封装或者显示数据的具体形式;Socket是发动机，提供了网络通信的能力。</p><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><ul><li>200 ：成功</li><li>302 ：重定向</li><li>304 ：查找本地缓存</li><li>404 ：资源不存在</li><li>500 ：服务器内部错误<br><a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">更多状态码</a></li></ul>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat</title>
      <link href="/JavaWeb/WEB%E5%B7%A5%E7%A8%8B-Tomcat/"/>
      <url>/JavaWeb/WEB%E5%B7%A5%E7%A8%8B-Tomcat/</url>
      <content type="html"><![CDATA[<h1 id="Tomcat发布一个WEB工程"><a href="#Tomcat发布一个WEB工程" class="headerlink" title="Tomcat发布一个WEB工程"></a>Tomcat发布一个WEB工程</h1><p>##常见WEB服务器</p><ol><li>Apache :发布PHP的. LAMP:Linux Apache MySQL PHP.</li><li>IIS :发布ASP的.</li><li>WebSphere、WebLogic、Jboss</li><li>Nginx ， Tomcat</li></ol><blockquote><p>Apache组织研发,免费的小型的服务器软件,支持Servlet/JSP的开发规范</p></blockquote><h2 id="Tomcat安装及目录结构"><a href="#Tomcat安装及目录结构" class="headerlink" title="Tomcat安装及目录结构"></a>Tomcat安装及目录结构</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p><a href="http://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">官网下载</a> 解压即可</p></blockquote><blockquote><p>注意:路径不能有中文</p></blockquote><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><blockquote><p>配置JAVA_HOME环境变量 指向JDK 安装目录</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="http://os4z8t7lb.bkt.clouddn.com/201710112316_298.png" alt=""></p><ul><li>bin       <blockquote><p>tomcat的执行的文件.</p></blockquote></li><li>conf      <blockquote><p>tomcat的配置文件.</p></blockquote></li><li>lib       <blockquote><p>tomcat运行的需要的jar包.</p></blockquote></li><li>logs      <blockquote><p>tomcat的运行的日志文件.</p></blockquote></li><li>temp      <blockquote><p>tomcat产生临时文件存放的路径.</p></blockquote></li><li>webapps   <blockquote><p> tomcat发布的web项目的路径.</p></blockquote></li><li>work      <blockquote><p> tomcat运行JSP的时候,JSP翻译成Servlet的代码存放的路径.</p></blockquote></li></ul><h2 id="发布一个WEB工程到Tomcat中"><a href="#发布一个WEB工程到Tomcat中" class="headerlink" title="发布一个WEB工程到Tomcat中"></a>发布一个WEB工程到Tomcat中</h2><blockquote><p>共有三种方式:</p></blockquote><ul><li>1.直接将工程copy到tomcat/webapps下.<blockquote><p> 将工程复制到webapps即可.</p></blockquote></li><li>2.配置tomcat虚拟路径-不推荐：<blockquote><p>在tomcat/conf/server.xml文件中进行配置:</p><blockquote><p>在<host>标签下配置:</host></p><blockquote><pre><code>&lt;Context path=&quot;/itheima&quot; docBase=&quot;C:/website&quot;/&gt;</code></pre></blockquote></blockquote></blockquote></li><li><code>3.配置tomcat虚拟路径-推荐：</code><blockquote><p>在tomcat/conf/Catalina/localhost/xxx.xml</p><blockquote><pre><code>配置&lt;Context docBase=&quot;C:/website&quot;/&gt;xxx作为虚拟路径的名称.</code></pre></blockquote></blockquote></li></ul><h2 id="eclipse开发web项目server配置"><a href="#eclipse开发web项目server配置" class="headerlink" title="eclipse开发web项目server配置"></a>eclipse开发web项目server配置</h2><blockquote><p>选择window下的Perferences弹出窗口</p></blockquote><blockquote><blockquote><p>左侧找到Server下的Runtime Enviroment 点击Add按钮</p></blockquote></blockquote><blockquote><blockquote><p>然后选择apchae Tomcat v7.0(也可以是其他版本) 单击Next</p></blockquote></blockquote><blockquote><blockquote><p>填写Tomcat istallation directory 安装目录 然后 Finish</p></blockquote></blockquote>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaSE加强</title>
      <link href="/java/JavaSE%E5%8A%A0%E5%BC%BA/"/>
      <url>/java/JavaSE%E5%8A%A0%E5%BC%BA/</url>
      <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><blockquote><p>修饰成员变量和方法 内部类</p></blockquote><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>被类的所有对象共享</li><li>可以被类名调用</li><li>优缺点<ul><li>优点:<ul><li>对象共享数据，节省空间</li><li>被类名直接调用</li></ul></li><li>缺点:<ul><li>访问有局限性</li></ul></li></ul></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><blockquote><p>在java中，使用{}括起来的代码被称为代码块</p></blockquote><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h5><blockquote><p>在方法中出现，控制变量生命周期，及早释放，提高内存利用率</p></blockquote><h5 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h5><blockquote><p>在类中方法外出现，抽取构造方法中的共性，每次创建对象都会执行，并且在构造方法前执行</p></blockquote><h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><blockquote><p>在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。<br>一般用于加载驱动</p></blockquote><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>多个类有共同的成员变量和方法，抽取到另一个类中（父类）在让多个类继承父类</p></blockquote><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><pre><code>class 子类 extends 父类 {}</code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>在Java中，类只支持单继承，不允许多继承，也就是说一个类只能有一个直接父类,但多个类可以继承一个父类</li><li>在Java中，多层继承是可以的，即一个类的父类可以再去继承另外的父类</li><li>在Java中，子类和父类是一种相对概念，也就是说一个类是某个类父类的同时，也可以是另一个类的子类</li></ul><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><blockquote><p>子类只能获取父类的非私有成员<br>super 可以获取父类的成员变量和成员方法，用法与 this 相似</p></blockquote><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><blockquote><p>当父类方法不能完成满足子类使用<br>用注解 @Override：方法重写，说明下面的方法是重写父类的方法</p></blockquote><pre><code>注意事项：     不能继承父类私有成员     权限修饰符必须大于等于</code></pre><h3 id="继承中构造方法的执行顺序"><a href="#继承中构造方法的执行顺序" class="headerlink" title="继承中构造方法的执行顺序"></a>继承中构造方法的执行顺序</h3><pre><code>A:super(实参列表);语句 在子类的构造方法中使用,用来调用父类中的构造方法(具体哪一个由传递的参数决定),并且只能在构造方法第一行使用B:this(实参列表); 语句  在类的构造方法中使用,用来调用本类中的其它构造方法(具体哪一个由传递的参数决定),并且只能在构造方法的第一行使用</code></pre><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><pre><code>没有变量引用的对象当方法只调用一次时使用</code></pre><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><pre><code>final： 修饰符，可以用于修饰类、成员方法和成员变量   final所修饰的类：不能被继承，不能有子类   final所修饰的方法:不能被重写   final所修饰的变量：是不可以修改的，是常量</code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><pre><code>abstract 修饰符 用于方法和类有抽象方法的类必须是抽象类抽象类的特点：    抽象方法只能在抽象类里面    抽象类和抽象方法必须被abstract修饰    抽象类不能创建对象（不能实例化）    抽象类中可以有非抽象的方法    抽象类和类的关系也是继承    一个类继承了抽象类要么重写所有的抽象方法，要么他自己是抽象类static 修饰的方法不会被继承</code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><pre><code>处理单一继承的局限性比抽象类还抽象的类，接口里所有的方法都是抽象方法，接口和类的关系是实现 implements</code></pre><h4 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h4><pre><code>public interface 接口名 {    抽象方法1;    抽象方法2;}</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre><code>class 类 implements 接口 {    重写接口中方法}</code></pre><h4 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h4><pre><code>只能有抽象方法方法只能使用pulic abstract 修饰符 默认使用 可省略只能有常量常量只能使用pulic static fianl 修饰符 默认使用 可省略</code></pre><h4 id="类与接口关系"><a href="#类与接口关系" class="headerlink" title="类与接口关系"></a>类与接口关系</h4><pre><code>类与类之间:继承关系,一个类只能直接继承一个父类,但是支持多重继承类与接口之间:只有实现关系,一个类可以实现多个接口接口与接口之间:只有继承关系,可以多重继承</code></pre><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><pre><code>打破继承的局限性对外提供规则降低了程序的耦合性</code></pre><h5 id="接口和抽象区别"><a href="#接口和抽象区别" class="headerlink" title="接口和抽象区别"></a>接口和抽象区别</h5><pre><code>1.共性：不断的进行抽取，抽取出抽象的，没有具体实现的方法,都不能实例化（不能创建对象）2.区别与类的关系    类与接口是实现关系，而且是多实现，一个类可以实现多个接口，类与抽象类是继承关系，Java中的继承是单一继承，多层继承，一个类只能继承一个父类，但是可以有爷爷类    成员    a.成员变量        抽象类可以有成员变量，也可以有常量        接口只能有常量，默认修饰符public static final    b.成员方法            抽象类可以有抽象方法，也可以有非抽象方法            接口只能有抽象方法，默认修饰符 public abstract    c.构造方法            抽象类有构造方法，为子类提供            接口没有构造方法</code></pre><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>多态是继封装、继承之后，面向对象的第三大特性</p></blockquote><pre><code>前提    子父类    方法重写    父类引用指向子类对象动态绑定    运行期方法调用是根据其具体类优点 可维护性 可扩展性</code></pre><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><pre><code>多层结构不同包下文件名可相同 必须在第一行声明类的全名    包名.类名使用import 类的全名  将类导入</code></pre><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table><thead><tr><th>权限修饰符</th><th>public</th><th>protected</th><th>default</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中(子类与无关类)</td><td>√</td><td>√</td><td>√</td></tr><tr><td>不同包的子类</td><td>√</td><td>√</td></tr><tr><td>不同包中的无关类</td><td>√</td></tr></tbody></table><table><thead><tr><th>修饰符</th><th>类</th><th>成员变量</th><th>成员方法</th><th>构造方法</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>default</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td></td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>private</td><td>　</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>abstract</td><td>Y</td><td></td><td>Y</td><td></td></tr><tr><td>static</td><td>　</td><td>Y</td><td>Y</td><td></td></tr><tr><td>final</td><td>Y</td><td>Y</td><td>Y</td><td></td></tr></tbody></table><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><blockquote><p>将类写在其他类的内部，可以写在其他类的成员位置和局部位置，这时写在其他类内部的类就称为内部类。其他类也称为外部类。</p></blockquote><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><pre><code>在类的成员位置可以访问外部类的成员包括私有成员外部类.内部类 对象名 = new 外部类().new 内部类();</code></pre><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><blockquote><p>在方法内，出了方法就无法使用</p></blockquote><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><pre><code>可以看做没有名字的局部内部类格式    new 类/接口 (){        有抽象方法就必须实现具体方法体    };原理：    创建了这个类（接口）的子类对象</code></pre><hr><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><blockquote><p>类层次结构的根类</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toString()</span><br><span class="line">equals(Object obj)</span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><blockquote><p>不能被实例化 包含一些有用的字段和方法</p></blockquote><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arraycopy(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span><br><span class="line">从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。</span><br><span class="line"></span><br><span class="line">currentTimeMillis()</span><br><span class="line">          返回以毫秒为单位的当前时间</span><br><span class="line"></span><br><span class="line">exit(<span class="keyword">int</span> status)</span><br><span class="line">          终止当前正在运行的 Java 虚拟机</span><br></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><blockquote><p>表示特定的瞬间，精确到毫秒</p></blockquote><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><pre><code>Date()  创建当前系统时间的Date对象Date(long date) 创建指定时间的Date对象</code></pre><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><pre><code>    setTime(long time)    long getTime()大部分方法已过时 Calendar类代替</code></pre><h3 id="DateFormat"><a href="#DateFormat" class="headerlink" title="DateFormat"></a>DateFormat</h3><blockquote><p>抽象类 已知实现子类SimpleDateFormat</p></blockquote><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><pre><code>SimpleDateFormat() 默认模式创建对象SimpleDateFormat(String pattern)指定模式创建对象</code></pre><h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><pre><code>Date parse(String text)解析字符串的文本，生成 Date。String format(Date date) 将给定的 Date 格式化为日期/时间字符串。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    SimpleDateFormatsdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日HH:mm:ss"</span>);</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    String s = sdf.format(date)</span><br><span class="line">    -----------------</span><br><span class="line">    String now = <span class="string">"2000-01-01"</span>；</span><br><span class="line">    SimpleDateFormatsdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    Date d2 = sdf.parse(now);</span><br></pre></td></tr></table></figure><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><pre><code>抽象类 已知实现子类GregorianCalendarCalendar c = Calendar.getInstance();c.get(Calendar.DAY_OF_MONTH )</code></pre><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><pre><code>由于基本数据类型只能做一些简单的操作和运算，所以java为我们封装了基本类型。自动装箱和拆箱    从JDK1.5 开始</code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre><code>一套规则可以用于比配字符串PatternMatcher字符x 字符 x\\ 反斜线字符字符类[abc] a、b 或 c（简单类）[^abc] 任何字符，除了 a、b 或 c（否定）[a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围）预定义字符类. 任何字符（与行结束符可能匹配也可能不匹配）\d 数字：[0-9]\D 非数字： [^0-9]\s 空白字符：[ \t\n\x0B\f\r]\S 非空白字符：[^\s]\w 单词字符：[a-zA-Z_0-9]\W 非单词字符：[^\w]数量词X? X，一次或一次也没有X* X，零次或多次X+ X，一次或多次X{n} X，恰好 n 次X{n,} X，至少 n 次X{n,m} X，至少 n 次，但是不超过 m 次</code></pre><hr><h1 id="集合Collection"><a href="#集合Collection" class="headerlink" title="集合Collection"></a>集合Collection</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="接口Collection-lt-E-gt-层次结构的根"><a href="#接口Collection-lt-E-gt-层次结构的根" class="headerlink" title="接口Collection&lt;E&gt; 层次结构的根"></a>接口<code>Collection&lt;E&gt;</code> 层次结构的根</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><pre><code>1、toArray() 把集合变成数组，然后遍历数组2、iterator() 迭代器对象，通过迭代器对象迭代集合    Iterator 类      Object next() 下一个元素      boolean  hasNext() 判断是否有下一个元素</code></pre><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><pre><code>for(元素类型 元素变量：集合或数组对象){    可以直接使用元素变量}在增强for循环中不能修改集合，否则会发生并发异常</code></pre><h3 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h3><pre><code>在使用迭代器是不允许集合有修改（增加、删除），否则会抛出异常解决办法    使用迭代器自身去修改集合</code></pre><p>##泛型</p><ol><li><p>是一种广泛的类型，把明确数据类型的工作提前到了编译时期，借鉴了数组的特点</p><blockquote><pre><code>特别注意：泛型只能写引用数据类型。</code></pre></blockquote></li><li><p>泛型的好处</p><ul><li>避免了类型转换的问题</li><li>可以减少黄色警告线</li><li>可以简化我们代码的书写</li></ul></li></ol><h3 id="类名上的泛型"><a href="#类名上的泛型" class="headerlink" title="类名上的泛型"></a>类名上的泛型</h3><pre><code>class Box&lt;E&gt;{}</code></pre><h3 id="方法上的泛型"><a href="#方法上的泛型" class="headerlink" title="方法上的泛型"></a>方法上的泛型</h3><pre><code>public &lt;T&gt; T method(T t){    return t;}</code></pre><h3 id="泛型上下限"><a href="#泛型上下限" class="headerlink" title="泛型上下限"></a>泛型上下限</h3><pre><code>? extends 类名1           泛型上限 ？ super  类名2           泛型下限</code></pre><h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><blockquote><p>长度一旦定义就不能改变<br>有整数索引<br>只能存储同一种类型的元素<br>即可以存储基本数据类型也可以存储引用数据类型<br>查找快 增删慢</p></blockquote><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>由链子连接起来的一堆节点<br>特点:查询慢 增删快</p></blockquote><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>先进后出</p></blockquote><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>先进先出</p></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><pre><code>有序 存储顺序有序索引允许重复子类    ArrayList        底层是数组结构 查询快 增删慢    LinkedList        底层是链表结构 查询慢 增删快        方法            addFirst(E e)            getFirst()            removeFirst()            addLast(E e)            getLast()            removeLast()</code></pre><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><pre><code>List的子类无序（存储和读取的顺序）元素唯一</code></pre><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><blockquote><p>集合工具类</p></blockquote><h4 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List list,T key)</span>   <span class="comment">//二分查找指定元素的下标,注意list必须排序完毕</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(List&lt;? <span class="keyword">super</span> T&gt; dest, List&lt;? extends T&gt; src)</span>  <span class="comment">//  把源列表数据覆盖到目标列表，注意目标列表的长度至少必须等于源列表</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fill</span><span class="params">(List&lt;? <span class="keyword">super</span> T&gt; list, T obj)</span>  <span class="comment">//使用指定元素替换指定列表中的所有元素</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">shuffle</span><span class="params">(List&lt;?&gt; list)</span>    <span class="comment">//使用默认随机源对指定列表进行置换。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">sort</span><span class="params">(List&lt;T&gt; list)</span>      <span class="comment">//根据元素的自然顺序 对指定列表按升序进行排序。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">swap</span><span class="params">(List&lt;?&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>     <span class="comment">//在指定列表的指定位置处交换元素。</span></span></span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><blockquote><p>将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值。</p></blockquote><h2 id="与Collextion的区别"><a href="#与Collextion的区别" class="headerlink" title="与Collextion的区别"></a>与Collextion的区别</h2><blockquote><p>Map : 双列集合 通常处理有对应关系的数据 key是不可重复的<br>Collection: 单列集合，有不同子类体系</p></blockquote><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><ol><li>增</li></ol><blockquote><p>put(key ,value)</p></blockquote><ol start="2"><li>删</li></ol><blockquote><p>clear()     清除所有<br>remove(Object e) 移除</p></blockquote><ol start="3"><li>查</li></ol><blockquote><p>get(Object key)</p></blockquote><hr><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><blockquote><p>包含错误的类型、原因、位置</p></blockquote><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">Throwable--&gt;Error</span><br><span class="line">Throwable--&gt;Exception</span><br></pre></td></tr></table></figure><h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><ol><li>出现异常未处理 jvm帮我们处理 控制台打印异常信息并终止程序</li><li><p>捕获处理</p><blockquote><pre><code>try ... catch try{      可能出现问题的代码 }catch(异常类 异常){ }</code></pre></blockquote></li><li><p>抛出去</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   方法（） <span class="keyword">throws</span> 异常类 &#123;&#125;</span><br><span class="line">新</span><br><span class="line">    <span class="keyword">try</span>(FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"a.txt"</span>))&#123;<span class="comment">//自动关流</span></span><br><span class="line">        fw.write(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="异常种类"><a href="#异常种类" class="headerlink" title="异常种类"></a>异常种类</h2><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><blockquote><p>RuntimeException 的子类，在运行时期的异常</p></blockquote><h3 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h3><blockquote><p>Exception子类RuntimeException子类非编译时期必须处理</p></blockquote><hr><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File(File parent,String child)</span><br><span class="line">File(String path)</span><br><span class="line">File(String parent,String child)</span><br></pre></td></tr></table></figure><h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">creatNewFile() <span class="comment">//创建文件</span></span><br><span class="line">mkdir()     <span class="comment">//创建文件夹</span></span><br><span class="line">mkdirs()</span><br><span class="line">delete() <span class="comment">//删除文件，</span></span><br><span class="line">isAbsolute() 路径是否是绝对路径</span><br></pre></td></tr></table></figure><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><blockquote><p>System.in<br>System.out</p></blockquote><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><blockquote><p>把字节流转换为字符流</p></blockquote><pre><code>outputStreamWriterinputStreamReader</code></pre><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><blockquote><p>打印流添加输出数据的功能，使它们能够方便地打印各种数据值表示形式.</p></blockquote><pre><code>字符打印流  PrintWritervoid print(String str): 输出任意类型的数据，void println(String str): 输出任意类型的数据，自动写入换行操作</code></pre><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><blockquote><p>用于从流中读取对象的</p></blockquote><pre><code>ObjectInputStream称为 反序列化流,利用输入流从文件中读取对象ObjectOutputStream 称为 序列化流,利用输出流向文件中写入对象特点：用于操作对象。可以将对象写入到文件中，也可以从文件中读取对象。</code></pre><hr><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="进程：一个应用程序在内存中执行区域"><a href="#进程：一个应用程序在内存中执行区域" class="headerlink" title="进程：一个应用程序在内存中执行区域"></a>进程：一个应用程序在内存中执行区域</h3><h3 id="线程：进程中的一个执行控制单元"><a href="#线程：进程中的一个执行控制单元" class="headerlink" title="线程：进程中的一个执行控制单元"></a>线程：进程中的一个执行控制单元</h3><blockquote><p>一个进程可以有多个线程</p></blockquote><h3 id="多线程实现"><a href="#多线程实现" class="headerlink" title="多线程实现"></a>多线程实现</h3><blockquote><p>方式一</p></blockquote><pre><code>继承Thread 类重写run方法创建对象启动 start()</code></pre><blockquote><p>方式二</p></blockquote><pre><code>实现Runnable 接口</code></pre><hr><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><blockquote><p>设备之间的数据通讯</p></blockquote><pre><code>Socket</code></pre><h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><pre><code>ip    网络设备的标识端口    用于标识进程的逻辑地址传输协议    udp tcp ip</code></pre><h2 id="InerAddress"><a href="#InerAddress" class="headerlink" title="InerAddress"></a>InerAddress</h2><pre><code>表示网络协议（IP) 地址   InetAddress address =InetAddress.getByName(&quot;itheima&quot;);//通过主机名获取InetAddress    InetAddress address =InetAddress.getLocalHost();//本地主机InetAddress</code></pre><h2 id="Udp"><a href="#Udp" class="headerlink" title="Udp"></a>Udp</h2><h3 id="发送过程"><a href="#发送过程" class="headerlink" title="发送过程"></a>发送过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建Socket对象</span></span><br><span class="line"> DatagramSocket ds =<span class="keyword">new</span> DategramSocket();<span class="comment">//创建socket对象随机分配端口</span></span><br><span class="line"> <span class="comment">//DatagramSocket ds =new DategramSocket(1000);指定端口</span></span><br><span class="line"> <span class="comment">//创建数据并打包</span></span><br><span class="line"> <span class="comment">//DatagramPacket 数据包类</span></span><br><span class="line"> <span class="keyword">byte</span>[] bys;<span class="comment">//数据</span></span><br><span class="line"> InetAddress addr = InetAddress.getByName(<span class="string">""</span>);<span class="comment">//ip地址</span></span><br><span class="line"> <span class="keyword">int</span> port ;<span class="comment">//端口</span></span><br><span class="line"> DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys,bys.length,addr,port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"> ds.send(dp);</span><br><span class="line"> <span class="comment">//关闭资源</span></span><br><span class="line"> ds.close();</span><br></pre></td></tr></table></figure><h3 id="接收过程"><a href="#接收过程" class="headerlink" title="接收过程"></a>接收过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建Socket对象</span></span><br><span class="line"> DatagramSocket ds =<span class="keyword">new</span> DategramSocket(<span class="number">1000</span>);<span class="comment">//指定端口</span></span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">DatagramPacket dp = <span class="keyword">new</span> DatagrmPacket(bys,bys.length);</span><br><span class="line">ds.receive(dp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拆分数据</span></span><br><span class="line">InetAddress addr =dp.getAddress();</span><br><span class="line"><span class="keyword">int</span> length =dp.getLength();<span class="comment">//数据长度</span></span><br><span class="line"><span class="comment">//byte[] data =dp.getData();//数据会在bys 中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">ds.close();</span><br></pre></td></tr></table></figure><h2 id="Tcp"><a href="#Tcp" class="headerlink" title="Tcp"></a>Tcp</h2><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建socket对象</span></span><br><span class="line"> Socket socket = <span class="keyword">new</span> Socket(InetAddres.getByName(<span class="string">""</span>),<span class="number">10086</span>);</span><br><span class="line"><span class="comment">// 获取输出流对象</span></span><br><span class="line">OutputSteam os socket.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">  os.write(<span class="string">""</span>);</span><br><span class="line"> <span class="comment">//关闭资源</span></span><br><span class="line"> socket.close();</span><br></pre></td></tr></table></figure><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10086</span>);</span><br><span class="line"> <span class="comment">//监听</span></span><br><span class="line">Socket socket = ss.accept();</span><br><span class="line"><span class="comment">//获得输入流</span></span><br><span class="line">InputStream is =socket.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len =is.read(bs);</span><br><span class="line"></span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure><hr><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote><p>运行过程中获取对象，对象中的成员</p></blockquote><h2 id="获取字节码对象"><a href="#获取字节码对象" class="headerlink" title="获取字节码对象"></a>获取字节码对象</h2><pre><code>Class clz =Class.forName(&quot;类的全名&quot;);</code></pre><h2 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h2><pre><code>Constructor[] cs=  clz.getConstructors() //获取所有public 构造方法Constructor c =clz.getConstructor();//获取无参构造Constructor c =clz.getConstructor(T.class,..);//获取有参构造</code></pre><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><pre><code>Object o = c.newInstance();//无参 c为无构造Object o = c.newInstance(...);//有参 传递实参 c为有参构造</code></pre><h2 id="获取成员字段"><a href="#获取成员字段" class="headerlink" title="获取成员字段"></a>获取成员字段</h2><pre><code>Field field =clz.getField();Field[]  getFields(); public 字段getDeclarefields(); 所有的字段field.get(o) //获取o对象上的field字段的值field.setAccessible(true) //设置反射取消java访问检查field.set(o,值) //给o对象上的field字段设值</code></pre><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><pre><code>Method m = clz.getMethod(&quot;method&quot;,形参类型);m.Invoke(o,实参); 调用方法</code></pre><h2 id="内省技术"><a href="#内省技术" class="headerlink" title="内省技术"></a>内省技术</h2><blockquote><p>内省是基于反射,获取类中的属性和get/set方法</p><blockquote><p>BeanUtil.populate()使用到内省技术</p></blockquote></blockquote><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><blockquote><p>满足了特定格式的java类</p></blockquote><ul><li>无参构造</li><li>属性私有化,并提供set/get方法</li></ul><h3 id="Introspector"><a href="#Introspector" class="headerlink" title="Introspector"></a>Introspector</h3><blockquote><p>Introspector.getBeanInfo()</p></blockquote><h3 id="BeanInfo类"><a href="#BeanInfo类" class="headerlink" title="BeanInfo类"></a>BeanInfo类</h3><p>   PropertyDescriptor[] psds= beanIfo.getPropertyDesciptors();</p><h3 id="PropertyDescriptor类"><a href="#PropertyDescriptor类" class="headerlink" title="PropertyDescriptor类"></a>PropertyDescriptor类</h3><pre><code>pd.getName()Method m= pd.getReadMethod()  //getxx()方法pd.getWriteMethod() //setxx()方法</code></pre>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 进阶学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaSE基础</title>
      <link href="/java/JavaSE%E5%9F%BA%E7%A1%80/"/>
      <url>/java/JavaSE%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="JavaSE基础"><a href="#JavaSE基础" class="headerlink" title="JavaSE基础"></a>JavaSE基础</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code>JVMJRE =JVM +类库JDK =JRE+java开发工具</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>整数  <ul><li>byte      一个字节</li><li>short     两个字节</li><li>int       四个字节</li><li>long      八个字节</li></ul></li><li>小数<ul><li>float     4个字节</li><li>double    8个字节</li></ul></li><li>字符<ul><li>char      2个字节  </li></ul></li><li>布尔<ul><li>boolean</li></ul></li></ul><blockquote><p>float double 在内存中存放结构<br>float一共32位，其结构定义如下：<br>|—— 31 —–|—- 30-23 —— |—— 22-0 —–|<br>符号位(sign)         指数部分(exp)           小数部分(mag)</p></blockquote><ul><li>sign:符号位就一位，0表示正数，1表示负数</li><li>exp: 指数部分，无符号正数</li><li>mag:小数部分，定点小数，小数点在最左边<br>  float的表达式 :  pow(-1,sign)  <code>*</code> (1+mag)  <code>*</code> pow(2,exp-127)</li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>数组 对象(new出来的)</p><blockquote><p>需要注意的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">byte</span> c=a+b;<span class="comment">//编译通不过，byte short char 做+、-、*、/运算时结果为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">3</span>;<span class="comment">//java有常量优化机制 , 3 为常量 在取值范围内jvm会自动强制转换</span></span><br></pre></td></tr></table></figure><h3 id="常量、变量"><a href="#常量、变量" class="headerlink" title="常量、变量"></a>常量、变量</h3><blockquote><p>变量定义格式</p></blockquote><pre><code>数据类型 变量名 = 初始化值；例： int a=10;</code></pre><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><pre><code>+   -   *   /   %   ++  --</code></pre><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><pre><code>&amp;    |   ！  ^  &amp;&amp;         ||</code></pre><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><pre><code>关系表达式？表达式1：表达式2；    int c=a&gt;b?a:b;不能单独存在,结果必须被接收</code></pre><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>()&#123;</span><br><span class="line">    <span class="keyword">case</span> 值:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">&#125;<span class="keyword">while</span>();</span><br></pre></td></tr></table></figure><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><blockquote><p>break<br>continue<br>return</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="声明数组："><a href="#声明数组：" class="headerlink" title="声明数组："></a>声明数组：</h3><p>数据类型[] 数组名；</p><h3 id="数组赋值："><a href="#数组赋值：" class="headerlink" title="数组赋值："></a>数组赋值：</h3><ul><li><p>数组名=new 数组类型[数组长度]；</p></li><li><p>数组名=new 数组类型[]{数据1，数据2，…}；</p></li></ul><h3 id="数组进行初始化"><a href="#数组进行初始化" class="headerlink" title="数组进行初始化"></a>数组进行初始化</h3><ul><li>a:动态初始化 只指定长度，由系统给出初始化值<ul><li>int[] arr = new int[5];</li></ul></li><li>b:静态初始化 给出初始化值，由系统决定长度<ul><li>int[] arr = new int[]{1,2,3,4,5};</li><li>简写：int[] arr = {1,2,3,4,5};</li></ul></li><li>c 不能动静结合的初始化 如int[] arr = new int[5]{1,2,3,4,5};编译不会通过</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">int</span>[] arr =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];<span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span> arr =<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//静态初始化</span></span><br><span class="line"><span class="keyword">int</span> arr =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//错误的表示编译报错</span></span><br></pre></td></tr></table></figure><h3 id="二维、多维数组"><a href="#二维、多维数组" class="headerlink" title="二维、多维数组"></a>二维、多维数组</h3><blockquote><p>int[][] arr=new int[m][n];</p></blockquote><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li><p>冒泡排序</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j+<span class="number">1</span> &lt; arr.length-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp =arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择排序</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp =arr[i];</span><br><span class="line">            arr[i] =arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><pre><code>定义：    声明：大括号前面的内容    内容：大括号里面的内容修饰符 返回类型 方法名（参数类型 参数1，参数类型 参数2....）{//return  ;//当返回类型为void 是可以省略，可以不带值return 返回值；//返回值的类型必须与返回类型匹配}</code></pre><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol><li>面向过程:<br> 一步一步的执行 强调过程</li><li>面向对象:<br> 是一种思想基于面向过程的</li></ol><blockquote><p>将过程封装起来<br>是一种更符合我们思考习惯的思想<br>复杂变简单<br>执行者变成指挥者</p></blockquote><h3 id="Java语言最基本的单位-类"><a href="#Java语言最基本的单位-类" class="headerlink" title="Java语言最基本的单位-类"></a>Java语言最基本的单位-类</h3><ul><li>类：是一组相关的属性和行为的集合</li><li>对象：就是该事物的具体体现</li></ul><h3 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h3><ol><li>封装<blockquote><p>将不需要对外提供的内容都隐藏起来</p></blockquote></li><li>继承</li><li>多态</li></ol><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote><p>与类名一致 不写返回值类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;<span class="comment">//构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javaBean规范"><a href="#javaBean规范" class="headerlink" title="javaBean规范"></a>javaBean规范</h3><blockquote><p>空参构造<br>属性私有化<br>提供setXXX(…)     getXXX()</p></blockquote><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><blockquote><p>应用程序接口</p></blockquote><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String(String original)</span><br><span class="line">String(<span class="keyword">char</span>[] value)</span><br><span class="line">String(<span class="keyword">char</span>[],<span class="keyword">int</span> index,<span class="keyword">int</span> count)<span class="comment">//把字符数组的一部分变成字符串对象</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串的内容存储在方法区的常量池中的，方便字符串的重复使用</p></blockquote><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span>:比较字符串的内容是否相同</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String str)</span>:比较字符串的内容是否相同,忽略大小写</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span>:判断字符串对象是否以指定的str开头</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span>:判断字符串对象是否以指定的str结尾</span></span><br></pre></td></tr></table></figure><h4 id="StringBulider类"><a href="#StringBulider类" class="headerlink" title="StringBulider类"></a>StringBulider类</h4><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><blockquote><p>可以把数据存储到文件也可以从文件中读取数据</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>按方向：<ul><li>输入流</li><li>输出流</li></ul></li><li>按功能：<ul><li>节点流</li><li>处理流</li></ul></li><li>按数据<ul><li>字节流</li><li>字符流</li></ul></li></ul><h3 id="FileWriter-类"><a href="#FileWriter-类" class="headerlink" title="FileWriter 类"></a>FileWriter 类</h3><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileWriter(File file)</span><br><span class="line">FileWriter(String fileName)</span><br><span class="line">FileWriter(String fileName,<span class="keyword">boolean</span> flag) <span class="comment">//flag表示是否在文件末尾追加写入 默认false</span></span><br></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">write(String str) <span class="comment">//写字符串</span></span><br><span class="line">wirte(String str,<span class="keyword">int</span> index,<span class="keyword">int</span> len)</span><br><span class="line">write(<span class="keyword">char</span> ch)</span><br><span class="line">wirte(<span class="keyword">char</span> ch,<span class="keyword">int</span> index,<span class="keyword">int</span> len)</span><br><span class="line">flush() <span class="comment">//刷新</span></span><br><span class="line">close() <span class="comment">//关闭流释放资源，流将不能再使用了</span></span><br></pre></td></tr></table></figure><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>创建对象，关联文件</li><li>调用输出流对象的写数据方法write(String str)</li><li>关闭资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子：</span></span><br><span class="line">FileWrite fw =<span class="keyword">new</span> FileWriter(<span class="string">"D:\\a.txt"</span>);</span><br><span class="line">fw.write(<span class="string">"IO流"</span>);</span><br><span class="line">fw.close();</span><br></pre></td></tr></table></figure><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><pre><code>window : \r\nlinux :\nmax :\r</code></pre><h3 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h3><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileReader(Flie flie)</span><br><span class="line">FileReader(String fileName)</span><br></pre></td></tr></table></figure><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">close();</span><br></pre></td></tr></table></figure><h4 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>创建输入流对象</li><li>调用输人流对象的读数据方法read()</li><li>关闭释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">FileReader fr =<span class="keyword">new</span> FileReader (<span class="string">"D:\\a.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> a = fr.read();</span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure><h3 id="BufferedWriter-类-高效的写字符输出流"><a href="#BufferedWriter-类-高效的写字符输出流" class="headerlink" title="BufferedWriter 类 高效的写字符输出流"></a>BufferedWriter 类 高效的写字符输出流</h3><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter(FileWriter fileWriter)</span><br></pre></td></tr></table></figure><h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write(String s)</span><br><span class="line">flush();</span><br><span class="line">close()</span><br><span class="line">newLine(); <span class="comment">//写一个换行符</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"a.txt"</span>));</span><br><span class="line">bw.wirte(<span class="string">"abv"</span>)</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure><h3 id="BufferedReader类-高效的文本读取"><a href="#BufferedReader类-高效的文本读取" class="headerlink" title="BufferedReader类 高效的文本读取"></a>BufferedReader类 高效的文本读取</h3><h4 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader(FileReader fr)</span><br></pre></td></tr></table></figure><h4 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read()</span><br><span class="line">flush();</span><br><span class="line">close()</span><br><span class="line">readLine() 一次读一行字符不包括换行符</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"a.txt"</span>));</span><br><span class="line"><span class="keyword">int</span> c = bw.read()</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/Markdown/MarkDown%E8%AF%AD%E6%B3%95/"/>
      <url>/Markdown/MarkDown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>1)使用<code>#</code>，可表示1-6级标题。</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>2）使用<code>=</code>和<code>-</code>标记一级和二级标题。<br>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__<br>***加粗斜体***</p></blockquote><p>效果：</p><blockquote><p> <strong>一个人来到田纳西</strong><br><strong>毫无疑问</strong></p></blockquote><blockquote><p>  <em>斜体</em>或_斜体_<br>  <strong>粗体</strong><br>  <strong><em>加粗斜体</em></strong><br>  <del>删除线</del></p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格</p><pre><code>---***___</code></pre><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>> 区块引用<br>>&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或<em>制表符</em>。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h2 id="分割线-1"><a href="#分割线-1" class="headerlink" title="分割线"></a>分割线</h2><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[百度](https:://<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> “千百度”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://www.baidu.comm" title="千百度" target="_blank" rel="noopener">百度</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[百度][1]<br>[百度][2]<br>[1]:https:://<a href="http://www.baidu.comm" target="_blank" rel="noopener">www.baidu.comm</a> “千百度”<br>[2]:百度 “千百度”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">百度1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">百度2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h2 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠\"></a>反斜杠<code>\</code></h2><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h2 id="符号’-’"><a href="#符号’-’" class="headerlink" title="符号’`’"></a>符号’`’</h2><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote>]]></content>
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xml</title>
      <link href="/JavaWeb/xml/"/>
      <url>/JavaWeb/xml/</url>
      <content type="html"><![CDATA[<h3 id="什么是xml"><a href="#什么是xml" class="headerlink" title="什么是xml"></a>什么是xml</h3><pre><code>可扩展标记语言</code></pre><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><pre><code>传输和存储数据软件的配置文件</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="xml语法"><a href="#xml语法" class="headerlink" title="xml语法"></a>xml语法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法:"></a>基本语法:</h4><pre><code>- XML必须有关闭标签- 区分大小写- 属性需要有引号- 标签必须正确嵌套.文档声明注释元素属性特殊字符和CDATA区</code></pre><h4 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h4><p>通常出现在xml 文档的第一行第一列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml 属性名=&quot;值&quot; ... ?&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;  ?&gt;</span><br><span class="line">* version   :必须的. 使用”1.0”</span><br><span class="line">* encoding  :字符集. 是使用浏览器打开的时候采用的默认的字符集的编码.</span><br><span class="line">* standalone    :描述XML文档是否需要依赖其他的文件.</span><br></pre></td></tr></table></figure></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre><code>&lt;!--  注释内容   --&gt;</code></pre><h4 id="元素-标签"><a href="#元素-标签" class="headerlink" title="元素(标签)"></a>元素(标签)</h4><p>命名规范</p><ol><li>字母 数字 及其他字符</li><li>不能以数字或标点符号开始</li><li>不能以字符”xml”(“XML/Xml”)开始</li><li>不能包含空格</li></ol><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><pre><code>属性的名称规范与元素一致需要引号</code></pre><h4 id="特殊字符和CDATA区"><a href="#特殊字符和CDATA区" class="headerlink" title="特殊字符和CDATA区"></a>特殊字符和CDATA区</h4><p>#####特殊字符</p><pre><code>&amp;lt; &lt; 小于 &amp;gt; &gt; 大于 &amp;amp; &amp; 和号 &amp;apos; &apos; 单引号 &amp;quot; &quot; 引号 </code></pre><h5 id="CDATA区"><a href="#CDATA区" class="headerlink" title="CDATA区"></a>CDATA区</h5><p>CDATA区中的所有内容都会被认为是字符串<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[ 内容 ]]&gt;</span><br></pre></td></tr></table></figure></p><h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><p>从xml文档中获取数据</p><h3 id="解析方式"><a href="#解析方式" class="headerlink" title="解析方式"></a>解析方式</h3><ol><li>DOM解析    Doucument Object Model</li><li>SAX解析    Simple Api for Xml</li></ol><h3 id="两种解析方式的区别"><a href="#两种解析方式的区别" class="headerlink" title="两种解析方式的区别"></a>两种解析方式的区别</h3><p>DOM:</p><pre><code>一次性将文档加载到内存形成树形结构解析优点:当文件特别大时容易内存溢出缺点:对xml进行增删改操作</code></pre><p>SAX:</p><pre><code>事件驱动方式,一行一行的解析优点:不能对文档进行增删改操作缺点:当文件特别大时不会内存溢出</code></pre><h3 id="api实现与案例"><a href="#api实现与案例" class="headerlink" title="api实现与案例"></a>api实现与案例</h3><p>针对这两种解析的方式，不同的公司提供了不同的API的实现.</p><ul><li>JAXP      :SUN公司提供的一套XML的解析的API.</li><li>JDOM      :开源组织提供了一套XML的解析的API-jdom.</li><li><code>DOM4J</code>    :开源组织提供了一套XML的解析的API-dom4j.</li><li><code>pull</code>     :主要应用在Android手机端解析XML.</li></ul><h4 id="dom4j案例代码"><a href="#dom4j案例代码" class="headerlink" title="dom4j案例代码"></a>dom4j案例代码</h4><ol><li>【步骤一】导入jar包.dom4j-1.6.1.jar</li><li>【步骤二】创建解析器</li><li>【步骤三】解析文档获得代表文档的Document对象.</li><li>【步骤四】获得跟节点.</li><li>【步骤五】从跟节点下查找其他的节点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建解析器</span></span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="comment">// 解析XML的文档</span></span><br><span class="line">Document document = reader.read(<span class="string">"xml/demo1.xml"</span>);</span><br><span class="line"><span class="comment">// 获得跟节点</span></span><br><span class="line">Element root = document.getRootElement();</span><br><span class="line">System.out.println(root.getName());</span><br><span class="line"><span class="comment">// 查找跟节点下的子节点. element() elements();</span></span><br><span class="line">Element pElement = root.element(<span class="string">"person"</span>); <span class="comment">// 查找的是第一个person元素</span></span><br><span class="line"><span class="comment">// root.elements("person").get(1); // 查找的是第二个person元素</span></span><br><span class="line">Element nElement = pElement.element(<span class="string">"name"</span>);</span><br><span class="line">Element aElement = pElement.element(<span class="string">"age"</span>);</span><br><span class="line">Element sElement = pElement.element(<span class="string">"sex"</span>);</span><br><span class="line">System.out.println(nElement.getText());</span><br><span class="line">System.out.println(aElement.getText());</span><br><span class="line">System.out.println(sElement.getText());</span><br></pre></td></tr></table></figure><h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4><p>XPath由W3C的XPath 1.0 标准描述,dom4j支持xpath</p><ul><li>jaxen-1.1-beta-6.jar</li></ul><p>dom4j的XPath支持的API:</p><ul><li>List document.selectNodes(String xPath);</li><li>Node document.selectSingleNode(String xPath);<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建解析器:</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="comment">// 解析XML返回Document对象.</span></span><br><span class="line">        Document document = reader.read(<span class="string">"xml/demo1.xml"</span>);</span><br><span class="line">        <span class="comment">/*List&lt;Node&gt; list = document.selectNodes("//name");</span></span><br><span class="line"><span class="comment">        for (Node node : list) &#123;</span></span><br><span class="line"><span class="comment">            Element element = (Element) node;</span></span><br><span class="line"><span class="comment">            System.out.println(element.getText());</span></span><br><span class="line"><span class="comment">        &#125;*/</span> </span><br><span class="line">        List&lt;Node&gt; list = document.selectNodes(<span class="string">"//person['@id']"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Node node : list) &#123;</span><br><span class="line">            Element element = (Element) node;</span><br><span class="line">            System.out.println(element.attributeValue(<span class="string">"id"</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="xml约束"><a href="#xml约束" class="headerlink" title="xml约束"></a>xml约束</h2><h3 id="XML的约束的概述"><a href="#XML的约束的概述" class="headerlink" title="XML的约束的概述:"></a>XML的约束的概述:</h3><ul><li>什么是XML的约束 :就是用来约束XML的文档中可以出现哪些标签，不能出现哪些标签，标签中是否有顺序，出现的次数.</li><li>XML的约束            :用来规范XML的写法</li></ul><p>###XML的约束的种类及区别?<br>DTD 和 Schema :</p><pre><code>区别:     1.DTD语法是自成一体的.Schema语法就是XML的语法.     2.Schema的语法就是XML的语法所以更容易被解析器所解析.     3.Schema支持名称空间.     4.Schema有比DTD更加强大的语义和语法的约束.</code></pre><h3 id="DTD的语法"><a href="#DTD的语法" class="headerlink" title="DTD的语法"></a>DTD的语法</h3><p>####DTD的引入方式:</p><ul><li>内部的DTD:<br>&lt;!DOCTYPE persons [<br>]&gt;</li></ul><ul><li><p>外部的DTD:</p><ul><li>一种本地DTD:<br>&lt;!DOCTYPE persons SYSTEM “unknown.dtd”&gt;</li><li>一种网络DTD:<br>&lt;!DOCTYPE persons PUBLIC “//UNKNOWN/“ “unknown.dtd”&gt;</li></ul></li><li><p>元素:</p><ul><li>&lt;!ELEMENT 元素名 元素类型&gt;   </li><li>元素类型:<ul><li>EMPTY</li><li>ANY</li><li>子元素</li><li>是否有序: 使用 逗号(,)或者竖线(|)表示.</li><li>出现的次数：?:零次或一次 +：一次或多次 *：零次或多次 <ul><li>PCDATA 可解析的字符串</li></ul></li></ul></li></ul></li><li>属性:<ul><li>&lt;!ATTLIST 元素名称 属性名称 属性的类型 属性的约束&gt;<ul><li>属性的类型:<ul><li>ID类型:表示属性值需要是唯一的.</li><li>CDATA类型:普通的字符串.</li><li>枚举:</li></ul></li><li>属性的约束:<ul><li>#REQUIRED 属性值是必须的</li><li>#IMPLIED 属性不是必须的</li><li>#FIXED value   属性值固定<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT persons (person*)&gt;</span><br><span class="line">&lt;!ELEMENT person (name|age|sex)*&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class="line"></span><br><span class="line">&lt;!ATTLIST person id ID #REQUIRED&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h3 id="Schema的语法"><a href="#Schema的语法" class="headerlink" title="Schema的语法"></a>Schema的语法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    名称空间:一个XML只能引入一个DTD约束文档.使用了Schema约束XML文档,一个XML可以引入多个Schame的约束!!!</span></span><br><span class="line"><span class="comment">                      如果再多个Schema文档中定义了相同的属性名称 该怎么办?</span></span><br><span class="line"><span class="comment">      * 名称空间类似于java中的package.通过名称空间区分 标签或属性来自于哪个文档的！！！通常名称空间唯一的不重复的即可.一般情况下使用一个URL地址表示一个名称空间.</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">    xmlns               :xml name sapace .代表当前的文档应用的名称空间.</span></span><br><span class="line"><span class="comment">    targetNameSpace     :目标名称空间.</span></span><br><span class="line"><span class="comment">    elementFormDefault  :</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">targetNamespace</span>=<span class="string">"http://www.itheima.com/ee25"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复杂标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"persons"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 复杂类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sequence</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 简单标签 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网站主题设置</title>
      <link href="/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/"/>
      <url>/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><ol><li>修改 <code>_layout.swig</code><br> 主题文件下/layout/_layout.swig<br> 在 &lt;\/body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;</span><br><span class="line">color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改主题配置文件<br> 打开 主题下的_config.yml,在里面添加如下代码：(可以放在最后面)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># --------------------------------------------------------------</span><br><span class="line"># background settings</span><br><span class="line"># --------------------------------------------------------------</span><br><span class="line"># add canvas-nest effect</span><br><span class="line"># see detail from https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure></li></ol><h3 id="主页文章阴影效果"><a href="#主页文章阴影效果" class="headerlink" title="主页文章阴影效果"></a>主页文章阴影效果</h3><pre><code>打开\themes\next\source\css\_custom\custom.styl,向里面加入：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="在网站底部加上访问量"><a href="#在网站底部加上访问量" class="headerlink" title="在网站底部加上访问量"></a>在网站底部加上访问量</h3><p>编辑 主题配置文件 中的busuanzi_count的配置项。</p><p>当enable: true时，代表开启全局开关。若site_uv、site_pv、page_pv的值均为false时，不蒜子仅作记录而不会在页面上显示。</p><p>\themes\next\layout_partials\footer.swig文件,在copyright前加上画红线这句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后添加显示统计的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 放在&lt;div class=&quot;powered-by&quot;&gt; 前--&gt;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="首页只显示文章部分"><a href="#首页只显示文章部分" class="headerlink" title="首页只显示文章部分"></a>首页只显示文章部分</h2><p>   修改 _config.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">    enable: true</span><br><span class="line">    length: 150</span><br></pre></td></tr></table></figure></p><h2 id="页脚元素居中"><a href="#页脚元素居中" class="headerlink" title="页脚元素居中"></a>页脚元素居中</h2><pre><code>修改your blog\themes\next\source\css\schemes\Mist\index.styl文件，将.footer-inner中的text-align: left;修改为text-align: center;即可。</code></pre><h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><pre><code>修改文件 themes\next\source\css\_common\components\post\post.styl ，在末尾添加如下css样式，：</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="blog文章书写开头格式"><a href="#blog文章书写开头格式" class="headerlink" title="blog文章书写开头格式"></a>blog文章书写开头格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">title: # 文章标题</span><br><span class="line">author: # 作者</span><br><span class="line">tags: </span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">categories: </span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">description: # 描述，首页文章显示的摘要</span><br><span class="line">date: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="关闭侧边栏设置"><a href="#关闭侧边栏设置" class="headerlink" title="关闭侧边栏设置"></a>关闭侧边栏设置</h2><p>在\source\js\src\motion.js里自行写实现该效果的js方法（当然也可以放在页面其他js文件里面）：</p><p>这里贴一个实现此需求的js方法：</p><p>// $(‘.sidebar-inner’).css({‘height’:’100%’});<br>$(‘body’).on(‘click’,function(e){<br>    var bSidebarShow = $(‘#sidebar’).css(‘display’)===’block’ &amp;&amp; $(‘#sidebar’).width() &gt; 0;<br>    var bFlag = $(e.target).parents(‘#sidebar,.sidebar-toggle’).length &gt; 0;<br>    if(bSidebarShow &amp;&amp; !bFlag){<br>        $(‘.sidebar-toggle-line-wrap’).trigger(‘click’);<br>        e.preventDefault();<br>    }<br>});</p><h2 id="侧边栏居左"><a href="#侧边栏居左" class="headerlink" title="侧边栏居左"></a>侧边栏居左</h2><ol><li>修改 source\js\src\motion.js<br>使用Ctrl+F查找paddingRight 把其修改为paddingLeft就可以了</li><li>source\css_custom下为custom.styl添加内容<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.sidebar-toggle</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>把back-to-top这个按钮留在了右侧<br>如果你偏向一并放在左侧 添加以下css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.back-to-top</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>修改箭头动画方向<br>修改motion.js文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sidebarToggleLine1st = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-first'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'60%'</span>, <span class="attr">rotateZ</span>: <span class="string">'45deg'</span>, <span class="attr">top</span>: <span class="string">'2px'</span>, <span class="attr">left</span>: <span class="string">'50%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">rotateZ</span>: <span class="string">'-45deg'</span>, <span class="attr">top</span>: <span class="string">'5px'</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sidebarToggleLine2nd = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-middle'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'90%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sidebarToggleLine3rd = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-last'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'60%'</span>, <span class="attr">rotateZ</span>: <span class="string">'-45deg'</span>, <span class="attr">top</span>: <span class="string">'-2px'</span>, <span class="attr">left</span>: <span class="string">'50%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">rotateZ</span>: <span class="string">'45deg'</span>, <span class="attr">top</span>: <span class="string">'-5px'</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>不能调整透明<br>就把motion.js中选择的两个body改成了.container<br>NexT.utils.isDesktop() &amp;&amp; $(‘.container’).velocity(‘stop’)</p><h2 id="侧栏背景图以及内部文字颜色的修改"><a href="#侧栏背景图以及内部文字颜色的修改" class="headerlink" title="侧栏背景图以及内部文字颜色的修改"></a>侧栏背景图以及内部文字颜色的修改</h2><p>在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>:<span class="built_in">url</span>(图片链接);</span><br><span class="line">            <span class="attribute">background-size</span>: cover;</span><br><span class="line">            <span class="attribute">background-position</span>:center;</span><br><span class="line">            <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">            p,span,a &#123;color: 颜色代码;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="滑动的menu"><a href="#滑动的menu" class="headerlink" title="滑动的menu"></a>滑动的menu</h2><h2 id="menu中的搜索"><a href="#menu中的搜索" class="headerlink" title="menu中的搜索"></a>menu中的搜索</h2><pre><code>LocalSearch搜索安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：$ npm install hexo-generator-searchdb --save编辑 站点配置文件，新增以下内容到任意位置：search:  path: search.xml  field: post  format: html  limit: 10000编辑 主题配置文件，启用本地搜索功能： Local searchlocal_search:  enable: true</code></pre>]]></content>
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blog网站搭建</title>
      <link href="/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
      <url>/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>Node.js</li><li>Git</li><li>Hexo</li><li>github账号</li></ol><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>直接到<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git官网</a> 下载安装即可</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><blockquote><p>  什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h3 id="安装好Node-js与Git-执行命令"><a href="#安装好Node-js与Git-执行命令" class="headerlink" title="安装好Node.js与Git 执行命令"></a>安装好Node.js与Git 执行命令</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>随便建一个文件夹，名字随便取，博主取其名为blog，cd 到文件夹里，先安装必要的文件，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init  # hexo会在目标文件夹建立网站所需要的所有文件</span><br><span class="line">npm install  # 安装依赖包</span><br></pre></td></tr></table></figure></p><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>有了必要的各种配置文件之后就可以在本地预览效果了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 等同于hexo generate，生成静态文件</span><br><span class="line">hexo s # 等同于hexo server，在本地服务器运行</span><br></pre></td></tr></table></figure></p><p>打开浏览器并输入IP地址 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看</p><h3 id="简单的命令"><a href="#简单的命令" class="headerlink" title="简单的命令"></a>简单的命令</h3><p>总结一下简单的使用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder] # 初始化一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站</span><br><span class="line">hexo new [layout] &lt;title&gt; # 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来</span><br><span class="line">hexo version # 查看版本</span><br><span class="line">hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g # 等于hexo generate # 生成静态文件</span><br><span class="line">hexo s # 等于hexo server # 本地预览</span><br><span class="line">hexo d # 等于hexo deploy # 部署，可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure></p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><h3 id="git克隆"><a href="#git克隆" class="headerlink" title="git克隆"></a>git克隆</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可<br>使用git克隆最新版next主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开站点配置文件， 找到 theme 字段，并将其值更改为 next<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><p>然后 hexo s 即可预览主题效果</p><h3 id="更换主题外观"><a href="#更换主题外观" class="headerlink" title="更换主题外观"></a>更换主题外观</h3><p>NexT有三个外观，博主用的是 Muse，直接更改主题配置文件的 scheme 参数即可，如果显示的是繁体中文，那么站点配置文件中的 language: zh-CN<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br></pre></td></tr></table></figure></p><h2 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h2><h2 id="部署到Github与Coding"><a href="#部署到Github与Coding" class="headerlink" title="部署到Github与Coding"></a>部署到Github与Coding</h2><h3 id="在此之前，先安装Git部署插件"><a href="#在此之前，先安装Git部署插件" class="headerlink" title="在此之前，先安装Git部署插件"></a>在此之前，先安装Git部署插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="打开站点配置文件，拉到底部，修改部署配置："><a href="#打开站点配置文件，拉到底部，修改部署配置：" class="headerlink" title="打开站点配置文件，拉到底部，修改部署配置："></a>打开站点配置文件，拉到底部，修改部署配置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:masteranthoneyd/masteranthoneyd.github.io.git,master</span><br><span class="line">    coding: git@git.coding.net:ookamiantd/ookamiantd.git,master</span><br></pre></td></tr></table></figure><h3 id="终端执行"><a href="#终端执行" class="headerlink" title="终端执行"></a>终端执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2>]]></content>
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
